//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
//
// $Id: TiaraCellScorer.cc-Smeared,v 1.1.1.1 2003-06-12 13:08:25 dressel Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
// ----------------------------------------------------------------------
// GEANT 4 class source file
//
// TiaraCellScorer.cc
//
// ----------------------------------------------------------------------

#include <cmath>
#include "TiaraCellScorer.hh"
#include "G4GeometryCell.hh"
#include "G4Step.hh"
#include "G4StepPoint.hh"
#include "G4CellScoreValues.hh"
#include "Randomize.hh"

TiaraCellScorer::TiaraCellScorer(AIDA::IHistogramFactory *hf,
				 const G4String &histBaseName,
				 const G4std::vector<double> 
				 &binEdgesScinti,
				 const G4std::vector<double> 
				 &binEdgesBonner,
				 const TiaraTally &tally) :
  fBaseName(histBaseName),
  fEnergyHisto(hf->createHistogram1D(histBaseName, 
				     histBaseName + ": flux vs. energy", 
				     binEdgesScinti)),
  fEnergyFluxHisto(hf->createHistogram1D(histBaseName + "Eflux", 
					 histBaseName + ": energy flux vs. energy", 
					 binEdgesScinti)),
  
  fEnergyHistoBonner(hf->createHistogram1D(histBaseName + "Bonner", 
					   histBaseName + ": flux vs. energy", 
					   binEdgesBonner)),
  fEnergyFluxHistoBonner(hf->createHistogram1D(histBaseName + "BonnerEflux", 
					       histBaseName + ": energy flux vs. energy", 
					       binEdgesBonner)),
  
  fTally(tally),
  fDataStream(),
  fDataFileName()
{}



TiaraCellScorer::~TiaraCellScorer()
{}

void TiaraCellScorer::ScoreAnExitingStep(const G4Step &aStep,
				       const G4GeometryCell &pre_gCell){
  fG4CellScorer.ScoreAnExitingStep(aStep, pre_gCell);
  FillHisto(aStep);
}

void TiaraCellScorer::ScoreAnEnteringStep(const G4Step &aStep,
					const G4GeometryCell &post_gCell){
  fG4CellScorer.ScoreAnEnteringStep(aStep, post_gCell);
  return;
}

void TiaraCellScorer::ScoreAnInVolumeStep(const G4Step &aStep,
					const G4GeometryCell &post_gCell){
  fG4CellScorer.ScoreAnInVolumeStep(aStep, post_gCell);
  FillHisto(aStep);
}

void TiaraCellScorer::FillHisto(const G4Step &aStep){

  G4StepPoint *p = 0;
  p = aStep.GetPreStepPoint();

  G4double sl = aStep.GetStepLength() / cm;  
  G4double w = p->GetWeight();
  G4double slw = sl * w;

  G4double e(p->GetKineticEnergy());


  G4double b2 = 0.16;
  G4double a2 = 0.0025;

  while (1) {
    G4double b2_e = 0;
    if (e>0.) {
      b2_e = b2 / e;
    }
    G4double sig = e * sqrt(a2 + b2_e);
    e = G4RandGauss::shoot( e, sig);
    if (!(e<0)) {
      break;
    }
  }


  if (fDataStream.is_open()) {
    fDataStream << G4std::scientific << G4std::setprecision(4)
		<< e << " " << sl << " " << w << "\n";
  }
  
  fEnergyHisto->fill(e, slw);
  fEnergyFluxHisto->fill(e, slw*e);
  fEnergyHistoBonner->fill(e/eV, slw);
  fEnergyFluxHistoBonner->fill(e/eV, slw*e/eV);

  fTally.fill(e, slw);

}

void TiaraCellScorer::EndOfEventAction() {
  if (fDataStream.is_open()) {
    fDataStream << "ee" << "\n";
  }
  fTally.EndOfEventAction();
}

const TiaraTally &TiaraCellScorer::GetTally() const {
  return fTally;
}

void TiaraCellScorer::openDataStream(const G4String &filename){
  fDataFileName = filename;
  closeDataStream();
  fDataStream.open(fDataFileName.c_str());
  if (!fDataStream.is_open()) {
    G4cout << "TiaraCellScorer::openDataStream: ERROR: failed to open: "
	   << fDataFileName << G4endl;
  }
  else {
    fDataStream << fDataFileName << "\n";
    fDataStream << "end of event marked with: ee\n";
    fDataStream << "emergy steplength weight\n";
  }
}

void TiaraCellScorer::closeDataStream(){
  if (fDataStream.is_open()) {
    fDataStream.flush();
    fDataStream.close();
  }
}

const  G4String &TiaraCellScorer::getDataFileName(){
  return fDataFileName;
}

