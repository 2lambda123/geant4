// ********************************************************************
// *                                                                  *
// * cosmicray_charging advanced example for Geant4                   *
// * (adapted simulation of test-mass charging in the LISA mission)   *
// *                                                                  *
// * Henrique Araujo (h.araujo@imperial.ac.uk) & Peter Wass           *
// * Imperial College London                                          *
// *                                                                  *
// * LISADetectorConstruction class                                   *
// *                                                                  *
// ********************************************************************
//
// HISTORY
// 22/02/2004: migrated from LISA-V04
// 24/11/2004: migrated to cmath
//
// ********************************************************************


//**************************************************************************
// Science Module Structure (SMS)
//**************************************************************************
//    Primary Structure
//    Lower Deck
//    Upper Deck
//    Thermal Shield
//    Solar Array 
//    Optical Solar Reflectors (OSR)
//    Radiator Panels
//**************************************************************************


  // Structure Tubes 
  G4double StructTube_dia       =  100.*mm;
  G4double StructTube_thi       =   11.*mm;
  G4double StructTube_hei       =  490.*mm;
  G4double StructTube_sep       = 1480.*mm;
  G4double StructTubeSpacer_dia =  200.*mm;
  G4double StructTubeSpacer_thi =   50.*mm;
  G4double StructTubeSpacer_hei =   16.*mm;

  // Diagonal Panels 
  G4double DiagPanelSkin_thi   = 0.5*mm;
  G4double DiagPanelSkin_len   = 1420.*mm;
  G4double DiagPanelSkin_hei   = 490.*mm;
  G4double DiagPanelCore_thi   = 19.*mm;
  G4double DiagPanelCore_len   = DiagPanelSkin_len;
  G4double DiagPanelCore_hei   = DiagPanelSkin_hei;
  G4double DiagPanelCutout_dia = 466.*mm;
  G4double DiagPanelCutout_off = 50.*mm;

  // Radial Panels
  G4double RadialPanelSkin_thi = 0.5*mm;
  G4double RadialPanelSkin_hei = 490.*mm;
  G4double RadialPanelSkin_top = 424.*mm;
  G4double RadialPanelSkin_bot = 159.*mm;
  G4double RadialPanelCore_thi =  19.*mm;
  G4double RadialPanel_roff    = 910.*mm;

  // Upper and Lower Decks 
  G4double UpperDeck_dia     = 2700.*mm;
  G4double UpperDeckCore_thi =  29.0*mm;
  G4double LowerDeckCore_thi =  29.0*mm;
  G4double UpperDeck_zoff    =   0.5*mm;
  G4double UpperDeckSkin_thi =   0.5*mm;
  G4double LowerDeck_dia     = 2174.*mm;
  G4double LowerDeckSkin_thi =   0.5*mm;
  G4double LowerDeck_zoff    =   0.5*mm;
  G4double MLIBlanket_dia    = LowerDeck_dia;
  G4double MLIBlanket_thi    =   1.0*mm;

  // Thermal Shield 
  G4double ThermalShieldFacesheet_thi = 0.6*mm;
  G4double ThermalShieldCore_thi      = 20.*mm;
  G4double ThermalShieldFoam_thi      = 20.*mm;
  G4double ThermalShield_zoff         = StructTubeSpacer_hei;
  G4double ThermalShield_thi          = 3*ThermalShieldFacesheet_thi + 
                                        ThermalShieldCore_thi + 
                                        ThermalShieldFoam_thi;
  // Solar Array and OSR Assy
  G4double SolarArray_i   = 0.5*1683*mm;
  G4double SolarArray_o   = 0.5*UpperDeck_dia;
  G4double SolarArray_thi = 0.5*mm;
  G4double OSRAssy_o      = SolarArray_i;
  G4double OSRAssy_thi    = 0.5*mm;

  // Radiator Panels 
  G4double RadPanel_top  = UpperDeck_dia+12.*mm;
  G4double RadPanel_bot  = LowerDeck_dia+12.*mm;
  G4double RadPanel_len  = 510.*mm;
  G4double RadPanel_thi  = 1.25*mm;
  G4double RadPanel_zoff = 20*mm;
  G4double RadPanelCutout_roff  = 0.5*(RadPanel_top+RadPanel_bot)/2.;
  G4double RadPanelCutout1_dia  = 466.*mm;
  G4double RadPanelCutout1_len  = 200.*mm;
  G4double RadPanelCutout2_hei  = 500.*mm;
  G4double RadPanelCutout2_wid  = 400.*mm;
  G4double RadPanelCutout2_len  = 400.*mm;
  G4double RadPanelCutout2_zoff = 330.*mm;




  // Structure Tubes **********************************************************

  // Struct Tube: 2.16 kg
  // (ID adjusted to make up for mass of missing top part of tube)
  G4Tubs* StructTube_sol = new G4Tubs("StructTube_sol", 
    0.5*StructTube_dia-StructTube_thi, 0.5*StructTube_dia,
    0.5*StructTube_hei, 0., 360.*deg);
  G4LogicalVolume* StructTube_log = new G4LogicalVolume
    (StructTube_sol, Al6061, "StructTube_log");
  G4VPhysicalVolume* StructTube_phys;
  StructTube_phys = new G4PVPlacement(0, spacecraft_pos + 
    G4ThreeVector(+0.5*StructTube_sep/std::cos(30.*deg),0,0),
    "StructTube_phys", StructTube_log, wld_phys, false, 0);
  StructTube_phys = new G4PVPlacement(0, spacecraft_pos + 
    G4ThreeVector(-0.5*StructTube_sep*std::tan(30.*deg),+0.5*StructTube_sep,0),
    "StructTube_phys", StructTube_log, wld_phys, false, 1);
  StructTube_phys = new G4PVPlacement(0, spacecraft_pos + 
    G4ThreeVector(-0.5*StructTube_sep*std::tan(30.*deg),-0.5*StructTube_sep,0),
    "StructTube_phys", StructTube_log, wld_phys, false, 2);
  StructTube_log->SetVisAttributes(sol_white_vat);

  // Struct Tube Spacer: 1.0 kg 
  // (ID adjusted to include mass of missing TopCap)
  G4Tubs* StructTubeSpacer_sol = new G4Tubs("StructTubeSpacer_sol", 
    0.5*StructTubeSpacer_dia-StructTubeSpacer_thi,
    0.5*StructTubeSpacer_dia, 0.5*StructTubeSpacer_hei, 0., 360.*deg);
  G4LogicalVolume* StructTubeSpacer_log = new G4LogicalVolume
    (StructTubeSpacer_sol, Al6061, "StructTubeSpacer_log");
  G4VPhysicalVolume* StructTubeSpacer_phys;
  StructTubeSpacer_phys = new G4PVPlacement
    (0, spacecraft_pos + G4ThreeVector(+0.5*StructTube_sep/std::cos(30.*deg),0,
    +0.5*StructTube_hei+UpperDeckCore_thi+2*UpperDeckSkin_thi
    +0.5*StructTubeSpacer_hei+UpperDeck_zoff),
    "StructTubeSpacer_phys", StructTubeSpacer_log, wld_phys, false, 0);
  StructTubeSpacer_phys = new G4PVPlacement
    (0, spacecraft_pos + G4ThreeVector(-0.5*StructTube_sep*std::tan(30.*deg),
    +0.5*StructTube_sep, +0.5*StructTube_hei+UpperDeckCore_thi
    +2*UpperDeckSkin_thi+0.5*StructTubeSpacer_hei+UpperDeck_zoff),
    "StructTubeSpacer_phys", StructTubeSpacer_log, wld_phys, false, 1);
  StructTubeSpacer_phys = new G4PVPlacement
    (0, spacecraft_pos + G4ThreeVector(-0.5*StructTube_sep*std::tan(30.*deg),
    -0.5*StructTube_sep,+0.5*StructTube_hei+UpperDeckCore_thi
    +2*UpperDeckSkin_thi+0.5*StructTubeSpacer_hei+UpperDeck_zoff),
    "StructTubeSpacer_phys", StructTubeSpacer_log, wld_phys, false, 2);
  StructTubeSpacer_log->SetVisAttributes(sol_grey_vat);


  // Diagonal Panels **********************************************************

  // Diagonal Panel: core (x3)
  // Honeycomb core is represented by Al6061 at 0.05 g/cm3
  G4Box* DiagPanelCore_box = new G4Box("DiagPanelCore_box", 
    0.5*DiagPanelCore_len-2.*cm, 0.5*DiagPanelCore_thi, 0.5*DiagPanelCore_hei);
  G4Tubs* DiagPanelCutout_tub = new G4Tubs("DiagPanelCutout_tub", 0., 
    0.5*DiagPanelCutout_dia, 2*DiagPanelCore_thi, 0., 360.*deg);
  G4UnionSolid* DiagPanelCutout_sol = new G4UnionSolid("DiagPanelCutout_sol",
    DiagPanelCutout_tub, DiagPanelCutout_tub, 
    G4Transform3D(G4RotationMatrix(), G4ThreeVector(DiagPanelCutout_off,0,0)));
  G4RotationMatrix SMS_rot1; SMS_rot1.rotateX(90.*deg);
  G4SubtractionSolid* DiagPanelCore_sol = 
    new G4SubtractionSolid("DiagPanelCore_sol", DiagPanelCore_box, 
    DiagPanelCutout_sol, G4Transform3D(SMS_rot1, 
    G4ThreeVector(-0.5*DiagPanelCutout_off,0,0)));
  G4LogicalVolume* DiagPanelCore_log = new G4LogicalVolume
    (DiagPanelCore_sol, AlHoneycomb, "DiagPanelCore_log");
  G4VPhysicalVolume* DiagPanelCore_phys;
  G4RotationMatrix SMS_rot2; SMS_rot2.rotateZ(90.*deg);
  DiagPanelCore_phys = new G4PVPlacement(G4Transform3D(SMS_rot2, 
    spacecraft_pos + G4ThreeVector(-0.5*DiagPanelCore_len*std::tan(30.*deg),0,0)), 
    "DiagPanelCore_phys", DiagPanelCore_log, wld_phys, false, 0);
  G4RotationMatrix SMS_rot3; SMS_rot3.rotateZ(-30.*deg);
  DiagPanelCore_phys = new G4PVPlacement(G4Transform3D(SMS_rot3, 
    spacecraft_pos + G4ThreeVector
    (.5*DiagPanelCore_len*std::sin(30.*deg)*std::tan(30.*deg),
    0.5*DiagPanelCore_len*std::sin(30.*deg),0)), "DiagPanelCore_phys", 
    DiagPanelCore_log, wld_phys, false, 1);
  G4RotationMatrix SMS_rot4; SMS_rot4.rotateZ(+30.*deg);
  DiagPanelCore_phys = new G4PVPlacement(G4Transform3D(SMS_rot4, 
    spacecraft_pos + G4ThreeVector
    (0.5*DiagPanelCore_len*std::sin(30*deg)*std::tan(30*deg),
    -0.5*DiagPanelCore_len*std::sin(30.*deg),0)), 
    "DiagPanelCore_phys", DiagPanelCore_log, wld_phys, false, 2);
  DiagPanelCore_log->SetVisAttributes(sol_white_vat);

  // Diagonal Panel: skins (x6)
  G4Box* DiagPanelSkin_box = new G4Box("DiagPanelSkin_box", 
    0.5*DiagPanelSkin_len-2.*cm, 0.5*DiagPanelSkin_thi, 0.5*DiagPanelSkin_hei);
  G4SubtractionSolid* DiagPanelSkin_sol = 
    new G4SubtractionSolid("DiagPanelSkin_sol", DiagPanelSkin_box, 
    DiagPanelCutout_sol, G4Transform3D(SMS_rot1, 
    G4ThreeVector(-0.5*DiagPanelCutout_off,0,0)));
  G4LogicalVolume* DiagPanelSkin_log = new G4LogicalVolume
    (DiagPanelSkin_sol, CFRP, "DiagPanelSkin_log");
  G4VPhysicalVolume* DiagPanelSkin_phys;
  DiagPanelSkin_phys = new G4PVPlacement(G4Transform3D(SMS_rot2, 
    spacecraft_pos + G4ThreeVector(-0.5*DiagPanelCore_len*std::tan(30.*deg) +
    0.5*(DiagPanelCore_thi+DiagPanelSkin_thi),0,0)),
    "DiagPanelSkin_phys", DiagPanelSkin_log, wld_phys, false, 0);
  DiagPanelSkin_phys = new G4PVPlacement(G4Transform3D(SMS_rot2, 
    spacecraft_pos + G4ThreeVector(-0.5*DiagPanelCore_len*std::tan(30.*deg) -
    0.5*(DiagPanelCore_thi+DiagPanelSkin_thi),0,0)), 
    "DiagPanelSkin_phys", DiagPanelSkin_log, wld_phys, false, 1);
  DiagPanelSkin_phys = new G4PVPlacement(G4Transform3D(SMS_rot3, 
    spacecraft_pos + G4ThreeVector
    (0.5*DiagPanelCore_len*std::sin(30*deg)*std::tan(30*deg), 
    0.5*DiagPanelCore_len*std::sin(30.*deg),0) + 
    G4ThreeVector(0.5*(DiagPanelCore_thi+DiagPanelSkin_thi)*std::sin(30.*deg),
    0.5*(DiagPanelCore_thi+DiagPanelSkin_thi)*std::cos(30.*deg),0)),
    "DiagPanelSkin_phys", DiagPanelSkin_log, wld_phys, false, 2);
  DiagPanelSkin_phys = new G4PVPlacement(G4Transform3D(SMS_rot3, 
    spacecraft_pos + G4ThreeVector
    (0.5*DiagPanelCore_len*std::sin(30*deg)*std::tan(30*deg), 
    0.5*DiagPanelCore_len*std::sin(30.*deg),0) + 
    G4ThreeVector(-0.5*(DiagPanelCore_thi+DiagPanelSkin_thi)*std::sin(30.*deg),
    -0.5*(DiagPanelCore_thi+DiagPanelSkin_thi)*std::cos(30.*deg),0)),
    "DiagPanelSkin_phys", DiagPanelSkin_log, wld_phys, false, 3);
  DiagPanelSkin_phys = new G4PVPlacement(G4Transform3D(SMS_rot4, 
    spacecraft_pos + G4ThreeVector
    (0.5*DiagPanelCore_len*std::sin(30*deg)*std::tan(30*deg), 
    -0.5*DiagPanelCore_len*std::sin(30.*deg),0) + 
    G4ThreeVector(0.5*(DiagPanelCore_thi+DiagPanelSkin_thi)*std::sin(30.*deg),
    -0.5*(DiagPanelCore_thi+DiagPanelSkin_thi)*std::cos(30.*deg),0)),
    "DiagPanelSkin_phys", DiagPanelSkin_log, wld_phys, false, 3);
  DiagPanelSkin_phys = new G4PVPlacement(G4Transform3D(SMS_rot4, 
    spacecraft_pos + G4ThreeVector
    (0.5*DiagPanelCore_len*std::sin(30*deg)*std::tan(30*deg), 
    -0.5*DiagPanelCore_len*std::sin(30.*deg),0) + 
    G4ThreeVector(-0.5*(DiagPanelCore_thi+DiagPanelSkin_thi)*std::sin(30.*deg),
    +0.5*(DiagPanelCore_thi+DiagPanelSkin_thi)*std::cos(30.*deg),0)),
    "DiagPanelSkin_phys", DiagPanelSkin_log, wld_phys, false, 4);
  DiagPanelSkin_log->SetVisAttributes(sol_white_vat);



  // Radial Panels ************************************************************

  // Radial Panels: skins (x3)
  G4Trap* RadialPanelSkin_sol = new G4Trap("RadialPanelSkin_sol",
    2*RadialPanelSkin_thi+RadialPanelCore_thi, RadialPanelSkin_hei,
    RadialPanelSkin_top, RadialPanelSkin_bot);
  G4LogicalVolume* RadialPanelSkin_log = new G4LogicalVolume
    (RadialPanelSkin_sol, CFRP, "RadialPanelSkin_log");
  G4VPhysicalVolume* RadialPanelSkin_phys;
  G4RotationMatrix SMS_rot5; SMS_rot5.rotateX(-90.*deg);
  RadialPanelSkin_phys = new G4PVPlacement
    (G4Transform3D(SMS_rot5, spacecraft_pos + 
    G4ThreeVector(+RadialPanel_roff/std::cos(30.*deg),0,0)),
    "RadialPanelSkin_phys", RadialPanelSkin_log, wld_phys, false, 0);
  G4RotationMatrix SMS_rot6; 
  SMS_rot6.rotateX(-90.*deg); SMS_rot6.rotateZ(120.*deg);
  RadialPanelSkin_phys = new G4PVPlacement
    (G4Transform3D(SMS_rot6, spacecraft_pos + 
    G4ThreeVector(-RadialPanel_roff*std::tan(30.*deg),+RadialPanel_roff,0)),
    "RadialPanelSkin_phys", RadialPanelSkin_log, wld_phys, false, 1);
  G4RotationMatrix SMS_rot7; 
  SMS_rot7.rotateX(-90.*deg); SMS_rot7.rotateZ(-120.*deg);
  RadialPanelSkin_phys = new G4PVPlacement
    (G4Transform3D(SMS_rot7, spacecraft_pos + 
    G4ThreeVector(-RadialPanel_roff*std::tan(30.*deg),-RadialPanel_roff,0)),
    "RadialPanelSkin_phys", RadialPanelSkin_log, wld_phys, false, 2);
  RadialPanelSkin_log->SetVisAttributes(sol_white_vat);
  // Radial Panels: core
  // Honeycomb core is represented by Al6061 at 0.05 g/cm3
  G4Trap* RadialPanelCore_sol = new G4Trap("RadialPanelCore_sol",
    RadialPanelCore_thi, RadialPanelSkin_hei,
    RadialPanelSkin_top, RadialPanelSkin_bot);
  G4LogicalVolume* RadialPanelCore_log = new G4LogicalVolume
    (RadialPanelCore_sol, AlHoneycomb, "RadialPanelCore_log");
  G4VPhysicalVolume* RadialPanelCore_phys = new G4PVPlacement
    (0, G4ThreeVector(0,0,0), "RadialPanelCore_phys", 
    RadialPanelCore_log, RadialPanelSkin_phys, false, 0);
  RadialPanelCore_log->SetVisAttributes(sol_white_vat);



  // Upper and Lower Decks ****************************************************


  // Upper Deck - skin: 2*4.56 kg
  G4Tubs* UpperDeckSkin_sol = new G4Tubs
    ("UpperDeckSkin_sol", 0., 0.5*UpperDeck_dia, 
    0.5*UpperDeckCore_thi + UpperDeckSkin_thi, 0., 360.*deg);
  G4LogicalVolume* UpperDeckSkin_log = new G4LogicalVolume
    (UpperDeckSkin_sol, CFRP, "UpperDeckSkin_log");
  G4VPhysicalVolume* UpperDeckSkin_phys = new G4PVPlacement
    (0, spacecraft_pos + G4ThreeVector(0,0,+0.5*StructTube_hei
    +0.5*UpperDeckCore_thi+UpperDeckSkin_thi+UpperDeck_zoff),
    "UpperDeckSkin_phys", UpperDeckSkin_log, wld_phys, false, 0);
  UpperDeckSkin_log->SetVisAttributes(white_vat);
  // upper deck - core: 8.3 kg
  // Honeycomb core is represented by Al6061 at 0.05 g/cm3
  G4Tubs* UpperDeckCore_sol = new G4Tubs
    ("UpperDeckCore_sol",0.,.5*UpperDeck_dia,.5*UpperDeckCore_thi,0.,360.*deg);
  G4LogicalVolume* UpperDeckCore_log = new G4LogicalVolume
    (UpperDeckCore_sol, AlHoneycomb, "UpperDeckCore_log");
  G4VPhysicalVolume* UpperDeckCore_phys = new G4PVPlacement(0,G4ThreeVector(),
    "UpperDeckCore_phys", UpperDeckCore_log, UpperDeckSkin_phys, false, 0);
  UpperDeckCore_log->SetVisAttributes(white_vat);

  // Lower Deck - skin: 2*2.95 kg
  G4Tubs* LowerDeckSkin_sol = new G4Tubs
    ("LowerDeckSkin_sol", 0., 0.5*LowerDeck_dia, 
    0.5*LowerDeckCore_thi + LowerDeckSkin_thi, 0., 360.*deg);
  G4LogicalVolume* LowerDeckSkin_log = new G4LogicalVolume
    (LowerDeckSkin_sol, CFRP, "LowerDeckSkin_log");
  G4VPhysicalVolume* LowerDeckSkin_phys = new G4PVPlacement
    (0, spacecraft_pos + G4ThreeVector(0,0,-0.5*StructTube_hei
    -0.5*LowerDeckCore_thi-LowerDeckSkin_thi-LowerDeck_zoff),
    "LowerDeckSkin_phys", LowerDeckSkin_log, wld_phys, false, 0);
  LowerDeckSkin_log->SetVisAttributes(sol_dgrey_vat);
  // lower deck - core: 5.38 kg
  // Honeycomb core is represented by Al6061 at 0.05 g/cm3
  G4Tubs* LowerDeckCore_sol = new G4Tubs
    ("LowerDeckCore_sol",0.,.5*LowerDeck_dia,.5*LowerDeckCore_thi,0.,360.*deg);
  G4LogicalVolume* LowerDeckCore_log = new G4LogicalVolume
    (LowerDeckCore_sol, AlHoneycomb, "LowerDeckCore_log");
  G4VPhysicalVolume* LowerDeckCore_phys = new G4PVPlacement(0,G4ThreeVector(),
    "LowerDeckCore_phys", LowerDeckCore_log, LowerDeckSkin_phys, false, 0);
  LowerDeckCore_log->SetVisAttributes(sol_dgrey_vat);

  // Lower Deck MLI Blanket: 5.3 kg
  G4Tubs* MLIBlanket_sol = new G4Tubs("MLIBlanket_sol", 
    0., 0.5*MLIBlanket_dia, 0.5*MLIBlanket_thi, 0., 360.*deg);
  G4LogicalVolume* MLIBlanket_log = new G4LogicalVolume
    (MLIBlanket_sol, MLImat, "MLIBlanket_log");
  G4VPhysicalVolume* MLIBlanket_phys = new G4PVPlacement
    (0, spacecraft_pos + G4ThreeVector(0,0,-0.5*StructTube_hei
    -LowerDeckCore_thi-2*LowerDeckSkin_thi-LowerDeck_zoff-.5*MLIBlanket_thi),
    "MLIBlanket_phys", MLIBlanket_log, wld_phys, false, 0);
  MLIBlanket_log->SetVisAttributes(sol_orange_vat);


  // Thermal Shield ***********************************************************

  // Thermal Shield (Facesheet+HoneycombCore+Facesheet+Foam+Facesheet)
  // Thermal Shield - facesheet: 3*5.47 kg
  G4Tubs* ThermalShieldFacesheet_sol = new G4Tubs("ThermalShieldFacesheet_sol",
    0., 0.5*UpperDeck_dia, 0.5*ThermalShield_thi, 0., 360.*deg);
  G4LogicalVolume* ThermalShieldFacesheet_log = new G4LogicalVolume
    (ThermalShieldFacesheet_sol, CFRP, "ThermalShieldFacesheet_log");
  G4VPhysicalVolume* ThermalShieldFacesheet_phys = new G4PVPlacement(0,
    spacecraft_pos + G4ThreeVector
    (0,0,+.5*StructTube_hei+UpperDeckCore_thi+2*UpperDeckSkin_thi+
    UpperDeck_zoff+0.5*ThermalShield_thi+ThermalShield_zoff), 
    "ThermalShieldFacesheet_phys",ThermalShieldFacesheet_log,wld_phys,false,0);
  ThermalShieldFacesheet_log->SetVisAttributes(red_vat);
  // Thermal Shield: core
  // Honeycomb core is represented by Al6061 at 0.05 g/cm3
  G4Tubs* ThermalShieldCore_sol = new G4Tubs("ThermalShieldCore_sol",
    0., 0.5*UpperDeck_dia, 0.5*ThermalShieldCore_thi, 0., 360.*deg);
  G4LogicalVolume* ThermalShieldCore_log = new G4LogicalVolume
    (ThermalShieldCore_sol, AlHoneycomb, "ThermalShieldCore_log");
  G4VPhysicalVolume* ThermalShieldCore_phys = new G4PVPlacement(0,
    G4ThreeVector(0,0,.5*ThermalShieldFacesheet_thi+.5*ThermalShieldCore_thi),
    "ThermalShieldCore_phys", ThermalShieldCore_log, 
    ThermalShieldFacesheet_phys, false, 0);
  ThermalShieldCore_log->SetVisAttributes(red_vat);
// Thermal Shield: foam
  G4Tubs* ThermalShieldFoam_sol = new G4Tubs("ThermalShieldFoam_sol",
    0., 0.5*UpperDeck_dia, 0.5*ThermalShieldFoam_thi, 0., 360.*deg);
  G4LogicalVolume* ThermalShieldFoam_log = new G4LogicalVolume
    (ThermalShieldFoam_sol, foam, "ThermalShieldFoam_log");
  G4VPhysicalVolume* ThermalShieldFoam_phys = new G4PVPlacement(0,
    G4ThreeVector(0,0,-.5*ThermalShieldFacesheet_thi-.5*ThermalShieldFoam_thi),
    "ThermalShieldFoam_phys", ThermalShieldFoam_log, 
    ThermalShieldFacesheet_phys, false, 0);
 ThermalShieldFoam_log->SetVisAttributes(red_vat);



  // Solar Array and OSR Assy *************************************************

  // Solar Array: 13.5 kg
  // Thickness for correct mass
  G4Tubs* SolarArray_sol = new G4Tubs("SolarArray_sol",
    SolarArray_i, SolarArray_o, 0.5*SolarArray_thi, 0., 360.*deg);
  G4LogicalVolume* SolarArray_log = new G4LogicalVolume
    (SolarArray_sol, Scell, "SolarArray_log");
  G4VPhysicalVolume* SolarArray_phys = new G4PVPlacement(0, spacecraft_pos + 
    G4ThreeVector(0,0,+.5*StructTube_hei+UpperDeckCore_thi+2*UpperDeckSkin_thi+
    UpperDeck_zoff+ThermalShield_thi+ThermalShield_zoff+0.5*SolarArray_thi), 
    "SolarArray_phys",SolarArray_log, wld_phys, false, 0);
  SolarArray_log->SetVisAttributes(lblue_vat);
  // Optical Solar Reflector: NO MASS
  G4Tubs* OSRAssy_sol = new G4Tubs("OSRAssy_sol",
    0., OSRAssy_o, 0.5*OSRAssy_thi, 0., 360.*deg);
  G4LogicalVolume* OSRAssy_log = new G4LogicalVolume
    (OSRAssy_sol, vacuum, "OSRAssy_log");
  G4VPhysicalVolume* OSRAssy_phys = new G4PVPlacement(0, spacecraft_pos + 
    G4ThreeVector(0,0,+.5*StructTube_hei+UpperDeckCore_thi+2*UpperDeckSkin_thi+
    UpperDeck_zoff+ThermalShield_thi+ThermalShield_zoff+0.5*OSRAssy_thi), 
    "OSRAssy_phys",OSRAssy_log, wld_phys, false, 0);
  OSRAssy_log->SetVisAttributes(lblue_vat);



  // Radiator Panels **********************************************************

  // Radiator Panels: 3*3.87 kg
  // Thickess adjusted for correct mass of FS+Core+FS
  G4Cons* RadPanel_con = new G4Cons("RadPanel_con", 
     0.5*RadPanel_bot-RadPanel_thi, 0.5*RadPanel_bot,
     0.5*RadPanel_top-RadPanel_thi, 0.5*RadPanel_top,
     0.5*RadPanel_len, 0.*deg, 360.*deg);
  // window cutouts
  G4Tubs* RadPanelCutout_tub = new G4Tubs("RadPanelCutout_tub", 0., 
    0.5*RadPanelCutout1_dia, 2*RadPanelCutout1_len, 0., 360.*deg);
  G4RotationMatrix SMS_rot8; SMS_rot8.rotateY(90.*deg);
  G4SubtractionSolid* RadPanel1_sol = 
    new G4SubtractionSolid("RadPanel1_sol", RadPanel_con, 
    RadPanelCutout_tub, G4Transform3D(SMS_rot8,
    G4ThreeVector(-RadPanelCutout_roff,0,0)));
  G4RotationMatrix SMS_rot9; 
  SMS_rot9.rotateY(90.*deg); SMS_rot9.rotateZ(49.*deg);
  G4SubtractionSolid* RadPanel2_sol = 
    new G4SubtractionSolid("RadPanel2_sol", RadPanel1_sol, 
    RadPanelCutout_tub, G4Transform3D(SMS_rot9, G4ThreeVector
    (RadPanelCutout_roff*std::sin(49.*deg),RadPanelCutout_roff*std::cos(49.*deg),0)));
  G4RotationMatrix SMS_rot10; 
  SMS_rot10.rotateY(90.*deg); SMS_rot10.rotateZ(131.*deg);
  G4SubtractionSolid* RadPanel3_sol = 
    new G4SubtractionSolid("RadPanel3_sol", RadPanel2_sol, 
    RadPanelCutout_tub, G4Transform3D(SMS_rot10, G4ThreeVector
    (RadPanelCutout_roff*std::sin(131.*deg),RadPanelCutout_roff*std::cos(131.*deg),0)));
  // box cutouts
  G4Box* RadPanelCutout_box = new G4Box("RadPanelCutout_box", 
    0.5*RadPanelCutout2_len, 0.5*RadPanelCutout2_wid, 0.5*RadPanelCutout2_hei);
  G4SubtractionSolid* RadPanel4_sol = 
    new G4SubtractionSolid("RadPanel4_sol", RadPanel3_sol, 
    RadPanelCutout_box, G4Transform3D(G4RotationMatrix(), G4ThreeVector
    (RadPanelCutout_roff,0,RadPanelCutout2_zoff)));
  G4RotationMatrix SMS_rot11; SMS_rot11.rotateZ(+120.*deg);
  G4SubtractionSolid* RadPanel5_sol = 
    new G4SubtractionSolid("RadPanel5_sol", RadPanel4_sol, 
    RadPanelCutout_box, G4Transform3D(SMS_rot11, 
    G4ThreeVector(RadPanelCutout_roff*std::cos(120.*deg), 
    RadPanelCutout_roff*std::sin(120.*deg), RadPanelCutout2_zoff)));
  G4RotationMatrix SMS_rot12; SMS_rot12.rotateZ(-120.*deg);
  G4SubtractionSolid* RadPanel6_sol = 
    new G4SubtractionSolid("RadPanel6_sol", RadPanel5_sol, 
    RadPanelCutout_box, G4Transform3D(SMS_rot12, 
    G4ThreeVector(RadPanelCutout_roff*std::cos(-120.*deg), 
    RadPanelCutout_roff*std::sin(-120.*deg), RadPanelCutout2_zoff)));
  G4LogicalVolume* RadPanel_log = 
    new G4LogicalVolume(RadPanel6_sol, Al6061, "RadPanel_log");
  G4VPhysicalVolume* RadPanel_phys = 
    new G4PVPlacement(0, spacecraft_pos + G4ThreeVector(0,0,0),
    "RadPanel_phys", RadPanel_log, wld_phys, false, 0);
  RadPanel_log->SetVisAttributes(sol_white_vat);

//*****************************************************************************


  // invisible spacecraft top
  if(0) {
     UpperDeckSkin_log->SetVisAttributes(G4VisAttributes::Invisible);
     UpperDeckCore_log->SetVisAttributes(G4VisAttributes::Invisible);
     ThermalShieldFacesheet_log->SetVisAttributes(G4VisAttributes::Invisible);
     ThermalShieldCore_log->SetVisAttributes(G4VisAttributes::Invisible);
     ThermalShieldFoam_log->SetVisAttributes(G4VisAttributes::Invisible);
     //  SolarArray_log->SetVisAttributes(G4VisAttributes::Invisible);
     OSRAssy_log->SetVisAttributes(G4VisAttributes::Invisible);
  }
 
 // solid spacecraft top
  if(0) {
     UpperDeckSkin_log->SetVisAttributes(sol_white_vat);
     UpperDeckCore_log->SetVisAttributes(sol_white_vat);
     ThermalShieldFacesheet_log->SetVisAttributes(sol_red_vat);
     ThermalShieldCore_log->SetVisAttributes(sol_red_vat);
     ThermalShieldFoam_log->SetVisAttributes(sol_red_vat);
     SolarArray_log->SetVisAttributes(sol_lblue_vat);
     OSRAssy_log->SetVisAttributes(sol_lgreen_vat);
  }

//*****************************************************************************
