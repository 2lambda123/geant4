//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// ********************************************************************
// *                                                                  *
// * cosmicray_charging advanced example for Geant4                   *
// * (adapted simulation of test-mass charging in the LISA mission)   *
// *                                                                  *
// * Henrique Araujo (h.araujo@imperial.ac.uk) & Peter Wass           *
// * Imperial College London                                          *
// *                                                                  *
// * LISADetectorConstruction class                                   *
// *                                                                  *
// ********************************************************************
//
// HISTORY
// 22/02/2004: migrated from LISA-V04
// 24/11/2004: migrated to cmath
// 24/11/2004: inner boxes made invisible 
// 08/12/2005: removed compilation warnings
//
// ********************************************************************


//***************************************************************************
// Electronics Boxes
//***************************************************************************


  // Lower Deck electronics
  G4double EB_zoff = -230.*mm;
  G4ThreeVector        EPC1_pos(-680*mm, +580*mm, EB_zoff+0.5*110.*mm);
  G4ThreeVector        EPC2_pos(-680*mm, -580*mm, EB_zoff+0.5*110.*mm);
  G4ThreeVector    GyroPack_pos(+150*mm, +980*mm, EB_zoff+0.5* 85.*mm);
  G4ThreeVector   InstConE1_pos(+720*mm, -190*mm, EB_zoff+0.5*180.*mm);
  G4ThreeVector   InstConE2_pos(+720*mm, +190*mm, EB_zoff+0.5*180.*mm);
  G4ThreeVector        RFDU_pos( +30*mm,-1000*mm, EB_zoff+0.5* 80.*mm);
  G4ThreeVector  StarTrack3_pos(+450*mm, -850*mm, EB_zoff+0.5* 54.*mm);
  G4ThreeVector  StarTrack4_pos(+450*mm, +850*mm, EB_zoff+0.5* 54.*mm);
  G4ThreeVector     STElec1_pos( +30*mm, -720*mm, EB_zoff+0.5*100.*mm);
  G4ThreeVector     STElec2_pos(-280*mm, -900*mm, EB_zoff+0.5*100.*mm);
  G4ThreeVector     STElec3_pos(-280*mm, +900*mm, EB_zoff+0.5*100.*mm);
  G4ThreeVector     STElec4_pos( +30*mm, +720*mm, EB_zoff+0.5*100.*mm);
  G4ThreeVector        TWT1_pos(-730*mm, +350*mm, EB_zoff+0.5* 36.*mm);
  G4ThreeVector        TWT2_pos(-730*mm, -350*mm, EB_zoff+0.5* 36.*mm);
  G4ThreeVector      UVBox1_pos(+180*mm,       0, EB_zoff+0.5* 70.*mm);
  G4ThreeVector      UVBox2_pos(+480*mm,       0, EB_zoff+0.5* 70.*mm);

  // Upper Deck electronics
  EB_zoff = 220.*mm;
  G4ThreeVector        PCDU_pos(-770*mm, +600*mm, EB_zoff-0.5*300.*mm);
  G4ThreeVector   CentELCPS_pos(-780*mm, -570*mm, EB_zoff-0.5*115.*mm);
  G4ThreeVector     CentEL2_pos(-250*mm,-1000*mm, EB_zoff-0.5*284.*mm);
  G4ThreeVector     FEEPEL1_pos(-250*mm,+1000*mm, EB_zoff-0.5*200.*mm);
  G4ThreeVector     FEEPEL2_pos(+270*mm,+1020*mm, EB_zoff-0.5*200.*mm);
  G4ThreeVector   HGADrive1_pos(  20*mm,-1210*mm, EB_zoff-0.5*100.*mm);
  G4ThreeVector   HGADrive2_pos(  20*mm,+1210*mm, EB_zoff-0.5*100.*mm);
  G4ThreeVector InterfelEL1_pos(1030*mm, -180*mm, EB_zoff-0.5*150.*mm);
  G4ThreeVector InterfelEL2_pos(1030*mm, +180*mm, EB_zoff-0.5*150.*mm);
  G4ThreeVector    LaserEL1_pos(+720*mm, -220*mm, EB_zoff-0.5*100.*mm);
  G4ThreeVector    LaserEL2_pos(+720*mm, +220*mm, EB_zoff-0.5*100.*mm);
  G4ThreeVector  LaserHead1_pos(1100*mm, -400*mm, EB_zoff-0.5* 5.*mm);
  G4ThreeVector  LaserHead2_pos(1010*mm, -480*mm, EB_zoff-0.5* 50.*mm);
  G4ThreeVector  LaserHead3_pos(1100*mm, +400*mm, EB_zoff-0.5* 50.*mm);
  G4ThreeVector  LaserHead4_pos(1010*mm, +480*mm, EB_zoff-0.5* 50.*mm);
  G4ThreeVector  StarTrack1_pos(+650*mm,+1050*mm, EB_zoff-0.5* 54.*mm);
  G4ThreeVector  StarTrack2_pos(+650*mm,-1050*mm, EB_zoff-0.5* 54.*mm);
  G4ThreeVector  Transpond2_pos(+270*mm,-1050*mm, EB_zoff-0.5*178.*mm);


  // rotations
  G4RotationMatrix EB_rot1; EB_rot1.rotateZ(+30.*deg);
  G4RotationMatrix EB_rot2; EB_rot2.rotateZ(-30.*deg);
  G4RotationMatrix EB_rot3; EB_rot3.rotateZ(+60.*deg);
  G4RotationMatrix EB_rot4; EB_rot4.rotateZ(-60.*deg);


  G4double f;
  // Each box is made from solid Al6061 from which a volume 
  // f times smaller is removed to match assigned mass;


  // Lower Deck electronics
  G4Box* EPC_box_o;
  EPC_box_o = new G4Box("EPC_box_o",
     0.5*227.*mm, 0.5*63.*mm, 0.5*110.*mm);
  G4LogicalVolume* EPC_log_o;
  EPC_log_o = new G4LogicalVolume(EPC_box_o, Al6061, "EPC_log_o");
  G4VPhysicalVolume* EPC_phys_o;
  EPC_phys_o = new G4PVPlacement(0, spacecraft_pos + EPC1_pos,
     "EPC_phys_o", EPC_log_o, wld_phys, false, 0);
  EPC_phys_o = new G4PVPlacement(0, spacecraft_pos + EPC2_pos,
     "EPC_phys_o", EPC_log_o, wld_phys, false, 1);
  f = std::pow(1.-1.4/(2.70*227*63*110)*1E6, 1./3.);
  //  G4cout << "f: " << f << G4endl;
  G4Box* EPC_box_i;
  EPC_box_i = new G4Box("EPC_box_i",
     f*0.5*227.*mm, f*0.5*63.*mm, f*0.5*110.*mm);
  G4LogicalVolume* EPC_log_i;
  EPC_log_i = new G4LogicalVolume(EPC_box_i, vacuum, "EPC_log_i");
  G4VPhysicalVolume* EPC_phys_i;
  EPC_phys_i = new G4PVPlacement
     (0, 0, "EPC_phys_i", EPC_log_i, EPC_phys_o, false, 0);
  //
  //
  G4Tubs* GyroPack_tub_o;
  GyroPack_tub_o = new G4Tubs("GyroPack_tub_o", 
     0., 0.5*89.*mm, 0.5*85.*mm, 0., 360.*deg);
  G4LogicalVolume* GyroPack_log_o;
  GyroPack_log_o = new G4LogicalVolume
     (GyroPack_tub_o, Al6061, "GyroPack_log_o");
  G4VPhysicalVolume* GyroPack_phys_o;
  GyroPack_phys_o = new G4PVPlacement(0, spacecraft_pos
     + GyroPack_pos, "GyroPack_phys_o", GyroPack_log_o, wld_phys, false, 0);
  f = std::pow(1.-1.00/(2.70*pi*(0.5*89.)*(0.5*89.)*85.)*1E6, 1./3.);
  //  G4cout << "f: " << f << G4endl;
  G4Tubs* GyroPack_tub_i;
  GyroPack_tub_i = new G4Tubs("GyroPack_tub_i", 
     0., f*0.5*89.*mm, f*0.5*85.*mm, 0., 360.*deg);
  G4LogicalVolume* GyroPack_log_i;
  GyroPack_log_i = new G4LogicalVolume
     (GyroPack_tub_i, vacuum, "GyroPack_log_i");
  G4VPhysicalVolume* GyroPack_phys_i;
  GyroPack_phys_i = new G4PVPlacement(0, 0, 
     "GyroPack_phys_i", GyroPack_log_i, GyroPack_phys_o, false, 0);
  //
  //
  G4Box* InstConE_box_o;
  InstConE_box_o = new G4Box("InstConE_box_o",
     0.5*250.*mm, 0.5*180.*mm, 0.5*180.*mm);
  G4LogicalVolume* InstConE_log_o;
  InstConE_log_o = new G4LogicalVolume
     (InstConE_box_o, Al6061, "InstConE_log_o");
  G4VPhysicalVolume* InstConE_phys_o;
  InstConE_phys_o = new G4PVPlacement(G4Transform3D
     (EB_rot1, spacecraft_pos + InstConE1_pos),
     "InstConE_phys_o", InstConE_log_o, wld_phys, false, 0);
  InstConE_phys_o = new G4PVPlacement(G4Transform3D
     (EB_rot2, spacecraft_pos + InstConE2_pos),
     "InstConE_phys_o", InstConE_log_o, wld_phys, false, 1);
  f = std::pow(1.-4.5/(2.70*250*180*180)*1E6, 1./3.);
  G4Box* InstConE_box_i;
  InstConE_box_i = new G4Box("InstConE_box_i",
     f*0.5*250.*mm, f*0.5*180.*mm, f*0.5*180.*mm);
  G4LogicalVolume* InstConE_log_i;
  InstConE_log_i = new G4LogicalVolume
     (InstConE_box_i, vacuum, "InstConE_log_i");
  G4VPhysicalVolume* InstConE_phys_i;
  InstConE_phys_i = new G4PVPlacement
     (0, 0, "InstConE_phys_i", InstConE_log_i, InstConE_phys_o, false, 0);
  //
  //
  G4Box* RFDU_box_o;
  RFDU_box_o = new G4Box("RFDU_box_o",
     0.5*160.*mm, 0.5*60.*mm, 0.5*80.*mm);
  G4LogicalVolume* RFDU_log_o;
  RFDU_log_o = new G4LogicalVolume
     (RFDU_box_o, Al6061, "RFDU_log_o");
  G4VPhysicalVolume* RFDU_phys_o;
  RFDU_phys_o = new G4PVPlacement(0, spacecraft_pos
     + RFDU_pos, "RFDU_phys_o", RFDU_log_o, wld_phys, false, 0);
  f = std::pow(1.-1.0/(2.70*160*60*80)*1E6, 1./3.);
  G4Box* RFDU_box_i;
  RFDU_box_i = new G4Box("RFDU_box_i",
     f*0.5*160.*mm, f*0.5*60.*mm, f*0.5*80.*mm);
  G4LogicalVolume* RFDU_log_i;
  RFDU_log_i = new G4LogicalVolume(RFDU_box_i, vacuum, "RFDU_log_i");
  G4VPhysicalVolume* RFDU_phys_i;
  RFDU_phys_i = new G4PVPlacement
     (0, 0, "RFDU_phys_i", RFDU_log_i, RFDU_phys_o, false, 0);
  //
  //
  G4Box* StarTrack_L_box_o;
  StarTrack_L_box_o = new G4Box("StarStrack_box_o",
     0.5*50.*mm, 0.5*50.*mm, 0.5*54.*mm);
  G4LogicalVolume* StarTrack_L_log_o;
  StarTrack_L_log_o = new G4LogicalVolume
     (StarTrack_L_box_o, Al6061, "StarTrack_log_o");
  G4VPhysicalVolume* StarTrack_L_phys_o;
  StarTrack_L_phys_o = new G4PVPlacement(0, spacecraft_pos + StarTrack3_pos,
     "STarTrack3_phys_o", StarTrack_L_log_o, wld_phys, false, 0);
  StarTrack_L_phys_o = new G4PVPlacement(0, spacecraft_pos + StarTrack4_pos,
     "STarTrack4_phys_o", StarTrack_L_log_o, wld_phys, false, 1);
  f = std::pow(1.-0.30/(2.70*50*50*54)*1E6, 1./3.);
  G4Box* StarTrack_L_box_i;
  StarTrack_L_box_i = new G4Box("StarTrack_L_box_i",
     f*0.5*50.*mm, f*0.5*50.*mm, f*0.5*54.*mm);
  G4LogicalVolume* StarTrack_L_log_i;
  StarTrack_L_log_i = new G4LogicalVolume
     (StarTrack_L_box_i, vacuum, "StarTrack_L_log_i");
  G4VPhysicalVolume* StarTrack_L_phys_i;
  StarTrack_L_phys_i = new G4PVPlacement
     (0,0,"StarTrack_L_phys_i",StarTrack_L_log_i,StarTrack_L_phys_o,false,0);
  //
  //
  G4Box* STElec_box_o;
  STElec_box_o = new G4Box("STElec_box_o",
     0.5*100.*mm, 0.5*100.*mm, 0.5*100.*mm);
  G4LogicalVolume* STElec_log_o;
  STElec_log_o = new G4LogicalVolume
     (STElec_box_o, Al6061, "STElec_log_o");
  G4VPhysicalVolume* STElec_phys_o;
  STElec_phys_o = new G4PVPlacement(G4Transform3D
     (EB_rot1, spacecraft_pos + STElec1_pos),
     "STElec_phys_o", STElec_log_o, wld_phys, false, 0);
  STElec_phys_o = new G4PVPlacement(G4Transform3D
     (EB_rot1, spacecraft_pos + STElec2_pos),
     "STElec_phys_o", STElec_log_o, wld_phys, false, 1);
  STElec_phys_o = new G4PVPlacement(G4Transform3D
     (EB_rot2, spacecraft_pos + STElec3_pos),
     "STElec_phys_o", STElec_log_o, wld_phys, false, 2);
  STElec_phys_o = new G4PVPlacement(G4Transform3D
     (EB_rot2, spacecraft_pos + STElec4_pos),
     "STElec_phys_o", STElec_log_o, wld_phys, false, 3);
  f = std::pow(1.-2.0/(2.70*100*100*100)*1E6, 1./3.);
  G4Box* STElec_box_i;
  STElec_box_i = new G4Box("STElec_box_i",
     f*0.5*100.*mm, f*0.5*100.*mm, f*0.5*100.*mm);
  G4LogicalVolume* STElec_log_i;
  STElec_log_i = new G4LogicalVolume(STElec_box_i, vacuum, "STElec_log_i");
  G4VPhysicalVolume* STElec_phys_i;
  STElec_phys_i = new G4PVPlacement
     (0, 0, "STElec_phys_i", STElec_log_i, STElec_phys_o, false, 0);
  //
  //
  G4Box* TWT_box_o;
  TWT_box_o = new G4Box("TWT_box_o",
     0.5*321.*mm, 0.5*58.*mm, 0.5*36.*mm);
  G4LogicalVolume* TWT_log_o;
  TWT_log_o = new G4LogicalVolume
     (TWT_box_o, Al6061, "TWT_log_o");
  G4VPhysicalVolume* TWT_phys_o;
  TWT_phys_o = new G4PVPlacement(0, spacecraft_pos + TWT1_pos,
     "TWT_phys_o", TWT_log_o, wld_phys, false, 0);
  TWT_phys_o = new G4PVPlacement(0, spacecraft_pos + TWT2_pos,
     "TWT_phys_o", TWT_log_o, wld_phys, false, 1);
  f = std::pow(1.-0.75/(2.70*321*58*36)*1E6, 1./3.);
  G4Box* TWT_box_i = new G4Box("TWT_box_i",
     f*0.5*321.*mm, f*0.5*58.*mm, f*0.5*36.*mm);
  G4LogicalVolume* TWT_log_i;
  TWT_log_i = new G4LogicalVolume
     (TWT_box_i, vacuum, "TWT_log_i");
  G4VPhysicalVolume* TWT_phys_i;
  TWT_phys_i = new G4PVPlacement
     (0, 0, "TWT_phys_i", TWT_log_i, TWT_phys_o, false, 0);
  //
  //
  G4Box* UVBox_box_o;
  UVBox_box_o = new G4Box("UVBox_box_o",
     0.5*150.*mm, 0.5*100.*mm, 0.5*70.*mm);
  G4LogicalVolume* UVBox_log_o;
  UVBox_log_o = new G4LogicalVolume
     (UVBox_box_o, Al6061, "UVBox_log_o");
  G4VPhysicalVolume* UVBox_phys_o;
  UVBox_phys_o = new G4PVPlacement(0, spacecraft_pos + UVBox1_pos,
     "UVBox_phys_o", UVBox_log_o, wld_phys, false, 0);
  UVBox_phys_o = new G4PVPlacement(0, spacecraft_pos + UVBox2_pos,
     "UVBox_phys_o", UVBox_log_o, wld_phys, false, 1);
  f = std::pow(1.-0.50/(2.70*150*100*70)*1E6, 1./3.);
  G4Box* UVBox_box_i;
  UVBox_box_i = new G4Box("UVBox_box_i",
     f*0.5*150.*mm, f*0.5*100.*mm, f*0.5*70.*mm);
  G4LogicalVolume* UVBox_log_i;
  UVBox_log_i = new G4LogicalVolume
     (UVBox_box_i, vacuum, "UVBox_log_i");
  G4VPhysicalVolume* UVBox_phys_i;
  UVBox_phys_i = new G4PVPlacement
     (0, 0, "UVBox_phys_i", UVBox_log_i, UVBox_phys_o, false, 0);



  // Upper Deck electronics
 
  G4Box* PCDU_box_o;
  PCDU_box_o = new G4Box("PCDU_box_o",
     0.5*200.*mm, 0.5*350.*mm, 0.5*300.*mm);
  G4LogicalVolume* PCDU_log_o;
  PCDU_log_o = new G4LogicalVolume
     (PCDU_box_o, Al6061, "PCDU_log_o");
  G4VPhysicalVolume* PCDU_phys_o;
  PCDU_phys_o = new G4PVPlacement(0, spacecraft_pos 
     + PCDU_pos, "PCDU_phys_o", PCDU_log_o, wld_phys, false, 0);
  f = std::pow(1.-15.90/(2.70*200*350*300)*1E6, 1./3.);
  G4Box* PCDU_box_i;
  PCDU_box_i = new G4Box("PCDU_box_i",
     f*0.5*200.*mm, f*0.5*350.*mm, f*0.5*300.*mm);
  G4LogicalVolume* PCDU_log_i;
  PCDU_log_i = new G4LogicalVolume
     (PCDU_box_i, vacuum, "PCDU_log_i");
  G4VPhysicalVolume* PCDU_phys_i;
  PCDU_phys_i = new G4PVPlacement
     (0, 0, "PCDU_phys_i", PCDU_log_i, PCDU_phys_o, false, 0);
  //
  //
  G4Box* CentELCPS_box_o;
  CentELCPS_box_o = new G4Box("CentELCPS_box_o",
     0.5*240.*mm, 0.5*356.*mm, 0.5*140.*mm);
  G4LogicalVolume* CentELCPS_log_o;
  CentELCPS_log_o = new G4LogicalVolume
    (CentELCPS_box_o, Al6061, "CentELCPS_log_o");
  G4VPhysicalVolume* CentELCPS_phys_o;
  CentELCPS_phys_o = new G4PVPlacement(0, spacecraft_pos 
     + CentELCPS_pos, "CentELCPS_phys_o", CentELCPS_log_o, wld_phys, false, 0);
  f = std::pow(1.-15.90/(2.70*240*356*140)*1E6, 1./3.);
  G4Box* CentELCPS_box_i;
  CentELCPS_box_i = new G4Box("CentELCPS_box_i",
     f*0.5*240.*mm, f*0.5*356.*mm, f*0.5*140.*mm);
  G4LogicalVolume* CentELCPS_log_i;
   CentELCPS_log_i = new G4LogicalVolume
     (CentELCPS_box_i, vacuum, "CentELCPS_log_i");
  G4VPhysicalVolume* CentELCPS_phys_i;
  CentELCPS_phys_i = new G4PVPlacement
     (0, 0, "CentELCPS_phys_i", CentELCPS_log_i, CentELCPS_phys_o, false, 0);
  //
  //
  G4Box* CentEL2_box_o;
  CentEL2_box_o = new G4Box("CentEL2_box_o",
     0.5*220.*mm, 0.5*184.*mm, 0.5*284.*mm);
  G4LogicalVolume* CentEL2_log_o;
  CentEL2_log_o = new G4LogicalVolume
     (CentEL2_box_o, Al6061, "CentEL2_log_o");
  G4VPhysicalVolume* CentEL2_phys_o;
  CentEL2_phys_o = new G4PVPlacement(G4Transform3D
     (EB_rot3, spacecraft_pos + CentEL2_pos),
     "CentEL2_phys_o", CentEL2_log_o, wld_phys, false, 0);
  f = std::pow(1.-15.90/(2.70*220*184*284)*1E6, 1./3.);
  G4Box* CentEL2_box_i;
  CentEL2_box_i = new G4Box("CentEL2_box_i",
     f*0.5*220.*mm, f*0.5*184.*mm, f*0.5*284.*mm);
  G4LogicalVolume* CentEL2_log_i;
  CentEL2_log_i = new G4LogicalVolume
     (CentEL2_box_i, vacuum, "CentEL2_log_i");
  G4VPhysicalVolume* CentEL2_phys_i;
  CentEL2_phys_i = new G4PVPlacement
     (0, 0, "CentEL2_phys_i", CentEL2_log_i, CentEL2_phys_o, false, 0);
  //
  //
  G4Box* FEEPEL_box_o;
  FEEPEL_box_o = new G4Box("FEEPEL_box_o",
     0.5*260.*mm, 0.5*170.*mm, 0.5*200.*mm);
  G4LogicalVolume* FEEPEL_log_o;
  FEEPEL_log_o = new G4LogicalVolume
     (FEEPEL_box_o, Al6061, "FEEPEL_log_o");
  G4VPhysicalVolume* FEEPEL_phys_o;
  FEEPEL_phys_o = new G4PVPlacement(G4Transform3D
     (EB_rot4, spacecraft_pos + FEEPEL1_pos),
     "FEEPEL_phys_o", FEEPEL_log_o, wld_phys, false, 0);
  FEEPEL_phys_o = new G4PVPlacement(G4Transform3D
     (EB_rot1, spacecraft_pos + FEEPEL2_pos),
     "FEEPEL_phys_o", FEEPEL_log_o, wld_phys, false, 1);
  f = std::pow(1.-6.50/(2.70*260*170*200)*1E6, 1./3.);
  G4Box* FEEPEL_box_i;
  FEEPEL_box_i = new G4Box("FEEPEL_box_i",
     f*0.5*260.*mm, f*0.5*170.*mm, f*0.5*200.*mm);
  G4LogicalVolume* FEEPEL_log_i;
  FEEPEL_log_i = new G4LogicalVolume
     (FEEPEL_box_i, vacuum, "FEEPEL_log_i");
  G4VPhysicalVolume* FEEPEL_phys_i;
  FEEPEL_phys_i = new G4PVPlacement
     (0, 0, "FEEPEL_phys_i", FEEPEL_log_i, FEEPEL_phys_o, false, 0);
  //
  //
  G4Box* HGADrive_box_o;
  HGADrive_box_o = new G4Box("HGADrive_box_o",
     0.5*100.*mm, 0.5*100.*mm, 0.5*100.*mm);
  G4LogicalVolume* HGADrive_log_o;
  HGADrive_log_o = new G4LogicalVolume
     (HGADrive_box_o, Al6061, "HGADrive_log_o");
  G4VPhysicalVolume* HGADrive_phys_o;
  HGADrive_phys_o = new G4PVPlacement(0, spacecraft_pos + HGADrive1_pos,
     "HGADrive_phys_o", HGADrive_log_o, wld_phys, false, 0);
  HGADrive_phys_o = new G4PVPlacement(0, spacecraft_pos + HGADrive2_pos,
     "HGADrive_phys_o", HGADrive_log_o, wld_phys, false, 1);
  f = std::pow(1.-1.00/(2.70*100*100*100)*1E6, 1./3.);
  G4Box* HGADrive_box_i;
  HGADrive_box_i = new G4Box("HGADrive_box_i",
     f*0.5*100.*mm, f*0.5*100.*mm, f*0.5*100.*mm);
  G4LogicalVolume* HGADrive_log_i;
  HGADrive_log_i = new G4LogicalVolume
     (HGADrive_box_i, vacuum, "HGADrive_log_i");
  G4VPhysicalVolume* HGADrive_phys_i;
  HGADrive_phys_i = new G4PVPlacement
     (0, 0, "HGADrive_phys_i", HGADrive_log_i, HGADrive_phys_o, false, 0);
  //
  //
  G4Box* InterfelEL_box_o;
  InterfelEL_box_o = new G4Box("InterfelEL_box_o",
     0.5*200.*mm, 0.5*200.*mm, 0.5*150.*mm);
  G4LogicalVolume* InterfelEL_log_o;
  InterfelEL_log_o = new G4LogicalVolume
     (InterfelEL_box_o, Al6061, "InterfelEL_log_o");
  G4VPhysicalVolume* InterfelEL_phys_o;
  InterfelEL_phys_o = new G4PVPlacement(0, spacecraft_pos + InterfelEL1_pos,
     "InterfelEL_phys_o", InterfelEL_log_o, wld_phys, false, 0);
  InterfelEL_phys_o = new G4PVPlacement(0, spacecraft_pos + InterfelEL2_pos,
     "InterfelEL_phys_o", InterfelEL_log_o, wld_phys, false, 1);
  f = std::pow(1.-3.50/(2.70*200*200*150)*1E6, 1./3.);
  G4Box* InterfelEL_box_i;
  InterfelEL_box_i = new G4Box("InterfelEL_box_i",
     f*0.5*200.*mm, f*0.5*200.*mm, f*0.5*150.*mm);
  G4LogicalVolume* InterfelEL_log_i;
  InterfelEL_log_i = new G4LogicalVolume
     (InterfelEL_box_i, vacuum, "InterfelEL_log_i");
  G4VPhysicalVolume* InterfelEL_phys_i;
  InterfelEL_phys_i = new G4PVPlacement(0, 0, 
     "InterfelEL_phys_i", InterfelEL_log_i, InterfelEL_phys_o, false, 0);
  //
  //
  G4Box* LaserEL_box_o;
  LaserEL_box_o = new G4Box("LaserEL_box_o",
     0.5*200.*mm, 0.5*200.*mm, 0.5*100.*mm);
  G4LogicalVolume* LaserEL_log_o;
  LaserEL_log_o = new G4LogicalVolume
     (LaserEL_box_o, Al6061, "LaserEL_log_o");
  G4VPhysicalVolume* LaserEL_phys_o;
  LaserEL_phys_o = new G4PVPlacement(G4Transform3D
     (EB_rot1, spacecraft_pos + LaserEL1_pos),
     "LaserEL_phys_o", LaserEL_log_o, wld_phys, false, 0);
  LaserEL_phys_o = new G4PVPlacement(G4Transform3D
     (EB_rot2, spacecraft_pos + LaserEL2_pos),
     "LaserEL_phys_o", LaserEL_log_o, wld_phys, false, 1);
  f = std::pow(1.-3.00/(2.70*200*200*100)*1E6, 1./3.);
  G4Box* LaserEL_box_i;
  LaserEL_box_i = new G4Box("LaserEL_box_i",
     f*0.5*200.*mm, f*0.5*200.*mm, f*0.5*100.*mm);
  G4LogicalVolume* LaserEL_log_i;
  LaserEL_log_i = new G4LogicalVolume
     (LaserEL_box_i, vacuum, "LaserEL_log_i");
  G4VPhysicalVolume* LaserEL_phys_i;
  LaserEL_phys_i = new G4PVPlacement
     (0, 0, "LaserEL_phys_i", LaserEL_log_i, LaserEL_phys_o, false, 0);
  //
  //
  G4Box* LaserHead_box_o;
  LaserHead_box_o = new G4Box("LaserHead_box_o",
     0.5*100.*mm, 0.5*100.*mm, 0.5*50.*mm);
  G4LogicalVolume* LaserHead_log_o;
  LaserHead_log_o = new G4LogicalVolume
     (LaserHead_box_o, Al6061, "LaserHead_log_o");
  G4VPhysicalVolume* LaserHead_phys_o;
  LaserHead_phys_o = new G4PVPlacement(G4Transform3D
     (EB_rot3, spacecraft_pos + LaserHead1_pos),
     "LaserHead_phys_o", LaserHead_log_o, wld_phys, false, 0);
  LaserHead_phys_o = new G4PVPlacement(G4Transform3D
     (EB_rot3, spacecraft_pos + LaserHead2_pos),
     "LaserHead_phys_o", LaserHead_log_o, wld_phys, false, 1);
  LaserHead_phys_o = new G4PVPlacement(G4Transform3D
     (EB_rot4, spacecraft_pos + LaserHead3_pos),
     "LaserHead_phys_o", LaserHead_log_o, wld_phys, false, 2);
  LaserHead_phys_o = new G4PVPlacement(G4Transform3D
     (EB_rot4, spacecraft_pos + LaserHead4_pos),
     "LaserHead_phys_o", LaserHead_log_o, wld_phys, false, 3);
  f = std::pow(1.-0.70/(2.70*100*100*50)*1E6, 1./3.);
  G4Box* LaserHead_box_i;
  LaserHead_box_i = new G4Box("LaserHead_box_i",
     f*0.5*100.*mm, f*0.5*100.*mm, f*0.5*50.*mm);
  G4LogicalVolume* LaserHead_log_i;
  LaserHead_log_i = new G4LogicalVolume
     (LaserHead_box_i, vacuum, "LaserHead_log_i");
  G4VPhysicalVolume* LaserHead_phys_i;
  LaserHead_phys_i = new G4PVPlacement
     (0, 0, "LaserHead_phys_i", LaserHead_log_i, LaserHead_phys_o, false, 0);
  //
  //
  G4Box* StarTrack_U_box_o;
  StarTrack_U_box_o = new G4Box("StarStrack_box_o",
     0.5*50.*mm, 0.5*50.*mm, 0.5*54.*mm);
  G4LogicalVolume* StarTrack_U_log_o;
  StarTrack_U_log_o = new G4LogicalVolume
     (StarTrack_U_box_o, Al6061, "StarTrack_log_o");
  G4VPhysicalVolume* StarTrack_U_phys_o;
  StarTrack_U_phys_o = new G4PVPlacement(0, spacecraft_pos + StarTrack1_pos,
     "STarTrack_phys_o", StarTrack_U_log_o, wld_phys, false, 0);
  StarTrack_U_phys_o = new G4PVPlacement(0, spacecraft_pos + StarTrack2_pos,
     "STarTrack_phys_o", StarTrack_U_log_o, wld_phys, false, 1);
  f = std::pow(1.-0.30/(2.70*50*50*54)*1E6, 1./3.);
  G4Box* StarTrack_U_box_i;
  StarTrack_U_box_i = new G4Box("StarTrack_U_box_i",
     f*0.5*50.*mm, f*0.5*50.*mm, f*0.5*54.*mm);
  G4LogicalVolume* StarTrack_U_log_i;
  StarTrack_U_log_i = new G4LogicalVolume
     (StarTrack_U_box_i, vacuum, "StarTrack_U_log_i");
  G4VPhysicalVolume* StarTrack_U_phys_i;
    StarTrack_U_phys_i = new G4PVPlacement(0, 0, 
    "StarTrack_U_phys_i", StarTrack_U_log_i, StarTrack_U_phys_o, false, 0);
  //
  //
  G4Box* Transpond2_box_o;
  Transpond2_box_o = new G4Box("Transpond2_box_o",
     0.5*220.*mm, 0.5*184.*mm, 0.5*178.*mm);
  G4LogicalVolume* Transpond2_log_o;
  Transpond2_log_o = new G4LogicalVolume
     (Transpond2_box_o, Al6061, "Transpond2_log_o");
  G4VPhysicalVolume* Transpond2_phys_o;
     Transpond2_phys_o = new G4PVPlacement(G4Transform3D
     (EB_rot2, spacecraft_pos + Transpond2_pos),
     "Transpond2_phys_o", Transpond2_log_o, wld_phys, false, 0);
  f = std::pow(1.-3.50/(2.70*220*184*178)*1E6, 1./3.);
  G4Box* Transpond2_box_i;
  Transpond2_box_i = new G4Box("Transpond2_box_i",
     f*0.5*220.*mm, f*0.5*184.*mm, f*0.5*178.*mm);
  G4LogicalVolume* Transpond2_log_i;
  Transpond2_log_i = new G4LogicalVolume
     (Transpond2_box_i, vacuum, "Transpond2_log_i");
  G4VPhysicalVolume* Transpond2_phys_i;
  Transpond2_phys_i = new G4PVPlacement(0, 0, 
     "Transpond2_phys_i", Transpond2_log_i, Transpond2_phys_o, false, 0);


  // vis Attributes

          EPC_log_o->SetVisAttributes(sol_blue_vat);
     GyroPack_log_o->SetVisAttributes(sol_blue_vat);
     InstConE_log_o->SetVisAttributes(sol_blue_vat);
         RFDU_log_o->SetVisAttributes(sol_blue_vat);
  StarTrack_L_log_o->SetVisAttributes(sol_blue_vat);
       STElec_log_o->SetVisAttributes(sol_blue_vat);
          TWT_log_o->SetVisAttributes(sol_blue_vat);
        UVBox_log_o->SetVisAttributes(sol_blue_vat);
          EPC_log_i->SetVisAttributes(G4VisAttributes::Invisible);
     GyroPack_log_i->SetVisAttributes(G4VisAttributes::Invisible);
     InstConE_log_i->SetVisAttributes(G4VisAttributes::Invisible);
         RFDU_log_i->SetVisAttributes(G4VisAttributes::Invisible);
  StarTrack_L_log_i->SetVisAttributes(G4VisAttributes::Invisible);
       STElec_log_i->SetVisAttributes(G4VisAttributes::Invisible);
          TWT_log_i->SetVisAttributes(G4VisAttributes::Invisible);
        UVBox_log_i->SetVisAttributes(G4VisAttributes::Invisible);

         PCDU_log_o->SetVisAttributes(sol_lblue_vat);
    CentELCPS_log_o->SetVisAttributes(sol_lblue_vat);
      CentEL2_log_o->SetVisAttributes(sol_lblue_vat);
       FEEPEL_log_o->SetVisAttributes(sol_lblue_vat);
     HGADrive_log_o->SetVisAttributes(sol_lblue_vat);
   InterfelEL_log_o->SetVisAttributes(sol_lblue_vat);
      LaserEL_log_o->SetVisAttributes(sol_lblue_vat);
    LaserHead_log_o->SetVisAttributes(sol_lblue_vat);
  StarTrack_U_log_o->SetVisAttributes(sol_lblue_vat);
   Transpond2_log_o->SetVisAttributes(sol_lblue_vat);
         PCDU_log_i->SetVisAttributes(G4VisAttributes::Invisible);
    CentELCPS_log_i->SetVisAttributes(G4VisAttributes::Invisible);
      CentEL2_log_i->SetVisAttributes(G4VisAttributes::Invisible);
       FEEPEL_log_i->SetVisAttributes(G4VisAttributes::Invisible);
     HGADrive_log_i->SetVisAttributes(G4VisAttributes::Invisible);
   InterfelEL_log_i->SetVisAttributes(G4VisAttributes::Invisible);
      LaserEL_log_i->SetVisAttributes(G4VisAttributes::Invisible);
    LaserHead_log_i->SetVisAttributes(G4VisAttributes::Invisible);
  StarTrack_U_log_i->SetVisAttributes(G4VisAttributes::Invisible);
   Transpond2_log_i->SetVisAttributes(G4VisAttributes::Invisible);



  // **************************************************************************


