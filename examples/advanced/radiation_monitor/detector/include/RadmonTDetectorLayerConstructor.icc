//
// File name:     RadmonTDetectorLayerConstructor.icc
// Creation date: Sep 2005
// Main author:   Riccardo Capra <capra@ge.infn.it>
//
// Id:            $Id: RadmonTDetectorLayerConstructor.icc,v 1.1 2005-09-21 14:48:18 capra Exp $
// Tag:           $Name: not supported by cvs2svn $
//

#ifndef   RADMONTDETECTORLAYERCONSTRUCTOR_HH
 #error "RadmonTDetectorLayerConstructor.icc cannot be included directly. Please use RadmonTDetectorLayerConstructor.hh"
#else  /* RADMONTDETECTORLAYERCONSTRUCTOR_HH */

 // Include files
 #include "RadmonDetectorLayerVolumesList.hh"
 #include "RadmonDetectorLayerVolumeItem.hh"
 
 template <class LayerVolumesComponent>
 inline                                         RadmonTDetectorLayerConstructor<LayerVolumesComponent> :: RadmonTDetectorLayerConstructor(const G4String & label)
 :
  RadmonVDetectorLabelledEntityConstructor(label),
  volumesList(0),
  component(this)
 {
 }
 
 
 
 template <class LayerVolumesComponent>
 inline                                         RadmonTDetectorLayerConstructor<LayerVolumesComponent> :: ~RadmonTDetectorLayerConstructor()
 {
  delete volumesList;
 }





 template <class LayerVolumesComponent>
 G4LogicalVolume *                              RadmonTDetectorLayerConstructor<LayerVolumesComponent> :: ConstructLogicalVolume(void)
 {
  if (volumesList)
   G4Exception("RadmonTDetectorLayerConstructor::ConstructLogicalVolume: Called twice.");
  
  volumesList=component.GenerateVolumesList();
  
  if (volumesList==0)
   return 0;
  
  RadmonDetectorLayerVolumeItem * item;
  G4LogicalVolume * motherVolume(0);
  G4LogicalVolume * volume;
  
  G4int n(volumesList->GetNItems());
  
  while (n>0)
  {
   n--;
   
   item=volumesList->GetItem(n);
   volume=item->GetLogicalVolume();
   
   if (volume)
   {
    if (item->GetMotherVolumeItem()==0)
    {
     if (motherVolume)
      G4Exception("RadmonTDetectorLayerConstructor::ConstructLogicalVolume: Found two mother volumes.");

     motherVolume=volume;
    }
   }
  }
  
  if (!motherVolume)
   G4Exception("RadmonTDetectorLayerConstructor::ConstructLogicalVolume: No mother volume found.");
  
  return motherVolume;
 }



 template <class LayerVolumesComponent>
 RadmonVDetectorLabelledEntityConstructor *     RadmonTDetectorLayerConstructor<LayerVolumesComponent> :: New(void) const
 {
  return new RadmonTDetectorLayerConstructor<LayerVolumesComponent>(GetLabel());
 }
#endif /* RADMONTDETECTORLAYERCONSTRUCTOR_HH */
