//
// File name:     RadmonDetectorLayerLayout.icc
// Creation date: Sep 2005
// Main author:   Riccardo Capra <capra@ge.infn.it>
//
// Id:            $Id: RadmonDetectorLayerLayout.icc,v 1.1 2005-09-09 08:26:24 capra Exp $
// Tag:           $Name: not supported by cvs2svn $
//

#ifndef   RADMONDETECTORLAYERLAYOUT_HH
 #error "RadmonDetectorLayerLayout.icc cannot be included directly. Please use RadmonDetectorLayerLayout.hh"
#else  /* RADMONDETECTORLAYERLAYOUT_HH */

 // Include files
 #include "RadmonDetectorDumpStyle.hh"
 #include <iomanip>
 
 
 
 inline                                         RadmonDetectorLayerLayout :: RadmonDetectorLayerLayout()
 {
 }
 
 
 
 inline                                         RadmonDetectorLayerLayout :: RadmonDetectorLayerLayout(const RadmonDetectorLayerLayout & copy)
 :
  RadmonDetectorLayoutEntityWithAttributes(copy),
  layerLabel(copy.layerLabel),
  layerType(copy.layerType),
  layerThickness(copy.layerThickness)
 {
 }
 
 
 
 inline                                         RadmonDetectorLayerLayout :: ~RadmonDetectorLayerLayout()
 {
 }
 
 
 
 

 inline RadmonDetectorLayerLayout &             RadmonDetectorLayerLayout :: operator=(const RadmonDetectorLayerLayout & copy)
 {
  RadmonDetectorLayoutEntityWithAttributes::operator=(copy);
  layerLabel=copy.layerLabel;
  layerType=copy.layerType;
  layerThickness=copy.layerThickness;
  
  return (*this);
 }
 
 
 
 

 inline const G4String &                        RadmonDetectorLayerLayout :: GetLabel(void) const
 {
  return layerLabel; 
 }
 
 
 
 inline const G4String &                        RadmonDetectorLayerLayout :: GetType(void) const
 {
  return layerType;
 }
 
 
 
 inline G4double                                RadmonDetectorLayerLayout :: GetThickness(void) const
 {
  return layerThickness; 
 }
 
 
 
 inline void                                    RadmonDetectorLayerLayout :: SetLabel(const G4String & label)
 {
  layerLabel=label; 
 }
 
 
 
 inline void                                    RadmonDetectorLayerLayout :: SetType(const G4String & type)
 {
  layerType=type;
 }
 
 
 
 inline void                                    RadmonDetectorLayerLayout :: SetThickness(G4double thickness)
 {
  layerThickness=thickness;
 }

 
 
 
 
 inline void                                    RadmonDetectorLayerLayout :: DumpLayout(std::ostream & out) const
 {
  out << std::setw(RADMONDETECTORDUMPWIDTH+4) << "Label = \"" << layerLabel << '\"' << std::endl
      << std::setw(RADMONDETECTORDUMPWIDTH+4) << "Type = \""  << layerType << '\"' << std::endl
      << std::setw(RADMONDETECTORDUMPWIDTH+3) << "Thickness = " << std::setprecision(2) << layerThickness/mm << " mm" << std::endl;
 }  
#endif /* RADMONDETECTORLAYERLAYOUT_HH */
