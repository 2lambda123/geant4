//
// File name:     RadmonDetectorMultilayerPlacementLayout.icc
// Creation date: Sep 2005
// Main author:   Riccardo Capra <capra@ge.infn.it>
//
// Id:            $Id: RadmonDetectorMultilayerPlacementLayout.icc,v 1.1 2005-09-12 17:13:26 capra Exp $
// Tag:           $Name: not supported by cvs2svn $
//

#ifndef   RADMONDETECTORMULTILAYERPLACEMENTLAYOUT_HH
 #error "RadmonDetectorMultilayerPlacementLayout.icc cannot be included directly. Please use RadmonDetectorMultilayerPlacementLayout.hh"
#else  /* RADMONDETECTORMULTILAYERPLACEMENTLAYOUT_HH */
 inline                                         RadmonDetectorMultilayerPlacementLayout :: RadmonDetectorMultilayerPlacementLayout()
 {
 }
 
 
 
 inline                                         RadmonDetectorMultilayerPlacementLayout :: RadmonDetectorMultilayerPlacementLayout(const RadmonDetectorMultilayerPlacementLayout & copy)
 :
  placementLabel(copy.placementLabel),
  multilayerLabel(copy.multilayerLabel),
  multilayerRotation(copy.multilayerRotation),
  multilayerPosition(copy.multilayerPosition)
 {
 }
 
 
 
 inline                                         RadmonDetectorMultilayerPlacementLayout :: ~RadmonDetectorMultilayerPlacementLayout()
 {
 }
 
 
 


 inline RadmonDetectorMultilayerPlacementLayout & RadmonDetectorMultilayerPlacementLayout :: operator=(const RadmonDetectorMultilayerPlacementLayout & copy)
 {
  placementLabel=copy.placementLabel;
  multilayerLabel=copy.multilayerLabel;
  multilayerRotation=copy.multilayerRotation;
  multilayerPosition=copy.multilayerPosition;
  
  return (*this);
 }
 
 
 


 inline const G4String &                        RadmonDetectorMultilayerPlacementLayout :: GetLabel(void) const
 {
  return placementLabel;
 }
 
 
 
 inline const G4String &                        RadmonDetectorMultilayerPlacementLayout :: GetMultilayerLabel(void) const
 {
  return multilayerLabel;
 }
 
 
 


 inline void                                    RadmonDetectorMultilayerPlacementLayout :: SetLabel(const G4String & label)
 {
  placementLabel=label;
 }
 
 
 
 inline void                                    RadmonDetectorMultilayerPlacementLayout :: SetMultilayerLabel(const G4String & label)
 {
  multilayerLabel=label;
 }
 
 
 


 inline const G4ThreeVector &                   RadmonDetectorMultilayerPlacementLayout :: GetAbsolutePosition(void) const
 {
  return multilayerPosition;
 }
 
 
 
 inline const G4RotationMatrix &                RadmonDetectorMultilayerPlacementLayout :: GetAbsoluteRotation(void) const
 {
  return multilayerRotation;
 }
 
 
 


 inline void                                    RadmonDetectorMultilayerPlacementLayout :: SetAbsolutePosition(const G4ThreeVector & position)
 {
  multilayerPosition=position;
 }
 
 
 
 inline void                                    RadmonDetectorMultilayerPlacementLayout :: SetAbsoluteRotation(const G4RotationMatrix & rotation)
 {
  multilayerRotation=rotation;
 }
#endif /* RADMONDETECTORMULTILAYERPLACEMENTLAYOUT_HH */
