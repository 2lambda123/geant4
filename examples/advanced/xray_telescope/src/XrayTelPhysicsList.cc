// XrayTelPhysicsList.cc 

//  generated by Geant4 Physics Editor at   Tue Sep 19 18:53:22 CEST 2000

#include "XrayTelPhysicsList.hh"

#include "globals.hh"
#include "G4ParticleDefinition.hh"
#include "G4ParticleWithCuts.hh"
#include "G4ProcessManager.hh"
#include "G4ProcessVector.hh"
#include "G4ParticleTypes.hh"
#include "G4ParticleTable.hh"
#include "G4ShortLivedConstructor.hh"
#include "G4Material.hh"
#include "G4MaterialTable.hh"

#include "G4ios.hh"

XrayTelPhysicsList::XrayTelPhysicsList():  G4VUserPhysicsList()
{
// Here used the default cut value you have typed in

  defaultCutValue = 2.0*mm;
  cutForGamma     = 1.0*micrometer;
  cutForElectron  = 1.0*micrometer;
  cutForProton    = 1.0*micrometer;

  SetVerboseLevel(1);
}

XrayTelPhysicsList::~XrayTelPhysicsList()
{}

void XrayTelPhysicsList::ConstructParticle()
{
// Here are constructed all particles you have chosen

  ConstructBosons();
  ConstructLeptons();
  ConstructMesons();
  ConstructBaryons();
  ConstructAllShortLiveds();
}

// In this method, static member functions should be called for ALL particles to be used.

void XrayTelPhysicsList::ConstructBosons()
{
}
void XrayTelPhysicsList::ConstructLeptons()
{
}
void XrayTelPhysicsList::ConstructMesons()
{
}
void XrayTelPhysicsList::ConstructBaryons()
{
  G4Proton::ProtonDefinition();
}
void XrayTelPhysicsList::ConstructAllShortLiveds()
{
// Here are contructed all short liveds

}
void XrayTelPhysicsList::ConstructProcess()
{
// Transportation, electromagnetic and general processes 

  AddTransportation();
  ConstructEM();
  ConstructGeneral();
}
// Here are respective header files for chosen processes

#include "G4MultipleScattering.hh"
#include "G4hLowEnergyIonisation.hh"

void XrayTelPhysicsList::ConstructEM()
{
  theParticleIterator->reset();
  while( (*theParticleIterator)() ){
    G4ParticleDefinition* particle = theParticleIterator->value();
    G4ProcessManager* pmanager = particle->GetProcessManager();
    G4String particleName = particle->GetParticleName();

    if ((!particle->IsShortLived()) &&
         (particle->GetPDGCharge() != 0.0 )&&
           (particle->GetParticleName() != "e-") &&
           (particle->GetParticleName() != "e+") &&
           (particle->GetParticleName() != "mu-") &&
           (particle->GetParticleName() != "mu+") &&
           (particle->GetParticleName() != "chargedgeantino")){

      pmanager->AddProcess(new G4MultipleScattering(), -1, 1, 1);

      G4double demax = 0.05;    // try to lose at most 5% of the energy in
                                // a single step (in limit of large energies)
      G4double stmin = 1.e-9*m; // length of the final step: 10 angstrom
                                // reproduced angular distribution of TRIM

      G4hLowEnergyIonisation* lowEIonisation = new G4hLowEnergyIonisation();
      pmanager->AddProcess( lowEIonisation, -1,2,2);      
      lowEIonisation->SetStepFunction( demax, stmin ); 
    }
  }
}

#include "G4Decay.hh"

void XrayTelPhysicsList::ConstructGeneral()
{
  G4Decay* theDecayProcess = new G4Decay();
  theParticleIterator->reset();
  while( (*theParticleIterator)() ){
    G4ParticleDefinition* particle = theParticleIterator->value();
    G4ProcessManager* pmanager = particle->GetProcessManager();
    if (theDecayProcess->IsApplicable(*particle)) {
      pmanager ->AddProcess(theDecayProcess);
      pmanager ->SetProcessOrdering(theDecayProcess, idxPostStep);
      pmanager ->SetProcessOrdering(theDecayProcess, idxAtRest);
    }
  }
}

void XrayTelPhysicsList::SetCuts()
{
// defaultCutValue you have typed in is used

  if (verboseLevel >1){
    G4cout << "XrayTelPhysicsList::SetCuts:";
  }

  // set cut values for gamma at first and for e- second
  SetCutValue(cutForGamma, "gamma");
  SetCutValue(cutForElectron, "e-");

  // set cut values for proton
  SetCutValue(cutForProton, "proton"); 

  SetCutValueForOthers(defaultCutValue); 
 
  if (verboseLevel >1) { 
    DumpCutValuesTable(); 
  } 
}

void XrayTelPhysicsList::SetCutForGamma(G4double cut)
{
  ResetCuts();
  cutForGamma = cut;
}

void XrayTelPhysicsList::SetCutForElectron(G4double cut)
{
  ResetCuts();
  cutForElectron = cut;
}

void XrayTelPhysicsList::SetCutForProton(G4double cut)
{
  ResetCuts();
  cutForProton = cut;
}

G4double XrayTelPhysicsList::GetCutForGamma() const
{
  return cutForGamma;
}

G4double XrayTelPhysicsList::GetCutForElectron() const
{
  return cutForElectron;
}

G4double XrayTelPhysicsList::GetCutForProton() const
{
  return cutForProton;
}

