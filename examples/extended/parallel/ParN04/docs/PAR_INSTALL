$Id: PAR_INSTALL,v 1.1 2002-03-05 15:22:08 gcosmo Exp $
-------------------------------------------------------------------
These are instructions for parallelizing a new application.  Before
doing so, try out the examples, ParN02 and ParN04, which have
parallelized N02 and N04.

TO INSTALL:

1.  Install Geant4, CLHEP, and TOP-C
    TOP-C:  http://www.ccs.neu.edu/home/gene/topc.html
    Geant4: http://cern.ch/geant4/source/source.html
    CLHEP: http://wwwinfo.cern.ch/asd/lhc++/DISTRIBUTION/hep.html

2.  Source in the standard Geant4 and CLHEP environment variables.
    Environment variables are described in the Geant4 Installation Guide from:
      http://cern.ch/geant4/G4UsersDocuments/Overview/html

3.  On Linux, g++ version 2.91.66 or 2.95.2 are recommended.
    (Try g++ --version to check)
    Make sure that topc-config is in your path.  (Try `which topc-config')
    Test that TOP-C is working.  (cd to TOP-C install dir and `make test')
    Also test that a standard Geant4 application (such as novice/N04) works.

4.  For clarity, we assume we are parallelizing novice/N04 from the Geant4
    distribution.  The instructions should work for most Geant4 applications.
    First, copy the following files:
      cp ParN04.icc ParGNUmakefile procgroup $G4INSTALL/example/novice/N04/
      cp Par*.cc $G4INSTALL/example/novice/N04/src/
      cp Par*.hh $G4INSTALL/example/novice/N04/include/

5.  Change to the N04 directory:
      cd $G4INSTALL/example/novice/N04/

6.  Modify GNUmakefile by adding a line at the beginning:
      include ParGNUmakefile

    Modify exampleN04.cc by adding a line just before the definition of main():
    [IMPORTANT:  This must be the last include file in exampleN04.cc]
      #include "ParN04.icc"

7.  Optionally modify include/ParRandomState.hh
    In a first installation, I recommend using the provided default.
    This arranges to generate a random seed on the master for
      each event, and copy it to the slave processing that event.
      This provides both reasonable efficiency and repeatability
      that is independent of the number of slave process and of the
      order in which slaves complete their tasks.

8.  Modify src/ParExMarshaledHits.cc according to the comments in that file.
    You will find examples of the required modification in the EXAMPLES
      subdirectory.  The example modifications are:
      ParN04/src/ParExN04MarshaledHits.cc for N04, and so on.
      These are targeted toward some of the examples provided
      with the Geant4 distribution.

    The modifications are required to implement marshaling of each type of hit
    (e.g. for N04:  ExN04TrackerHit, ExN04MuonHit, ExN04CalorimeterHit)

    You will need to modify the functions:
      MarshaledHCofThisEvent::MarshalHitsCollection
      MarshaledHCofThisEvent::UnmarshalSlaveHitsCollection
    in order to add additional cases in the `if ... else if ...' statement.
    You should also remove the existing case of ExN04TrackerHit
    if you are not parallelizing examples/novice/N04.

    There are already default template functions for each type of hit, T:
      TMarshaledHitsCollection<T>::UnmarshalHit
      TMarshaledHitsCollection<T>::MarshalHit
    where T is a G4VHit class such as ExN04TrackerHit.
    The default copies the entire class into a single buffer.  If your
      hit class includes pointers, and if you use those pointer in your
      analysis (AnalyzeEvent), then you will need to override the default
      with an explicit specialization that marshals the pointers.
      You may also wish to override the default in order to write
      more efficient marshaling code.

9.  The file `procgroup' determines on which machines the remote processes run.
    The makefile automatically copies the local procgroup to the G4BINDIR just
    before each run.
    For testing, you can use the provided file, as is, and it will set
    up two slave processes on the localhost.  For production runs, you
    will want to change it.  See the file procgroup for comments on
    ways to change it.

10. Modify ParGNUmakefile according to your goals.
    It may be enough to only change:
      MACROFILE (current default:  ParN04.in)
    If you have a datafile (e.g.: examples/novice/N04/pythia_main.data)
      then also set DATAFILE.
    The GNUmakefile copies the MACROFILE and DATAFILE to the G4BINDIR.
    If you require other files (e.g.:  pythia_event.data for ExN04), then
      copy them to the G4BINDIR manually or modify ParGNUmakefile to do so.
    Then choose your desired makefile target and go.  Try one of:
      make compile
      make run
      make run-debug    [Runs application inside gdb.]
      make parclean

============================================================================
Further possible customizations:

If you wish to customize your code further, note that ParGNUmakefile
contains TOP-C parameters.  Try other parameters such as:
  --TOPC-verbose=0
  --TOPC-trace=0
  --TOPC-slave-timeout=XXX  [ units are seconds, default 1800 seconds ]
  --TOPC-num-slaves=XXX
  --TOPC-help

If you wish to make some of these the default, add a line like:
  TOPC_OPT_trace = 0;
between `main( ... )' and `TOPC_init( ... )' in the main function.

Read the TOP-C manual, available from the home page
  http://www.ccs.neu.edu/home/gene/topc.html
for further customizations and uses of TOP-C.

Read ParMarshaledObj.hh for the full set of primitive marshaling functions
that you might want to use in writing MarshalHit() and UnmarshalHit().
