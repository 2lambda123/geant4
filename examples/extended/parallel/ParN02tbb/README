

This example is an adaptation of Geant4-MultiThreading to Intel Thread 
Building Blocks (TBB).

An event could be simulated by any worker. The TBB runtime system 
determines which task/thread is used during a run.

In this first version, a fixed number of tasks is created (in the 
main program) and used to run all events.  The application (main) is 
responsible for deciding the number of parallel tasks.

Each thread which is used by this application owns a workspace.  
It uses this workspace for the state of the simulation.  Objects 
which are stored in this workspace include all the physics processes
used by this worker (thread) and a partial state of the geometry 
which depends on the worker/thread.

This implementation shares all the remaining features of 
Geant4-MT: threads share most detector data including physics table 
and physics vectors for EM physics processes. The master process 
initializes the data, as in sequential and Geant4-MT runs. Each 
worker thread initializes its thread private data, when it is 
first used to carry out a task.

