//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
// $Id: QBBC.icc,v 1.11 2006-05-12 16:26:37 vnivanch Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
//---------------------------------------------------------------------------
//
// ClassName:QBBC
//
// Author: 11 April 2006 V. Ivanchenko
//
// Modified:
//
//----------------------------------------------------------------------------
//

#include "globals.hh"
#include "G4ParticleDefinition.hh"

#include "G4DecayPhysics.hh"
#include "G4EmStandardPhysics.hh"
#include "G4EmExtraPhysics.hh"
#include "G4QStoppingPhysics.hh"
#include "G4LHEPStoppingPhysics.hh"

#include "G4DataQuestionaire.hh"
#include "G4HadronInelasticQBBC.hh"
#include "G4HadronInelasticQLHEP.hh"
#include "G4HadronElasticPhysics.hh"
#include "G4IonBinaryCascadePhysics.hh"
#include "G4LHEPIonPhysics.hh"

template<class T> TQBBC<T>::TQBBC( G4int ver, const G4String& type): T()
{
  G4DataQuestionaire it(photon, neutron);
  G4cout << "<<< Geant4 Physics List simulation engine: QBBC 3.0  with type <"
	<< type <<">" <<G4endl;
  G4cout <<G4endl;
  this->defaultCutValue = 0.7*mm;  
  this->SetVerboseLevel(ver);

  // EM Physics
  this->RegisterPhysics( new G4EmStandardPhysics("standard EM",ver));

  // Synchroton Radiation & GN Physics
  this->RegisterPhysics( new G4EmExtraPhysics("extra EM"));

  // Decays
  this->RegisterPhysics( new G4DecayPhysics("decay",ver) );

   // Hadron Physics
  if(type == "QBBC") {
    this->RegisterPhysics( new G4HadronElasticPhysics("elastic",ver,false));
    this->RegisterPhysics( new G4HadronInelasticQBBC("inelastic", ver, false,
		false, false, false));
    this->RegisterPhysics( new G4QStoppingPhysics("stopping",ver));
    this->RegisterPhysics( new G4IonBinaryCascadePhysics("ionBIC"));
  } else if(type == "QBEC") {
    this->RegisterPhysics( new G4HadronElasticPhysics("elastic",ver,false));
    this->RegisterPhysics( new G4HadronInelasticQBBC("inelastic", ver, false,
		truee, false, false));
    this->RegisterPhysics( new G4QStoppingPhysics("stopping",ver));
    this->RegisterPhysics( new G4IonBinaryCascadePhysics("ionBIC"));
  } else if(type == "QBEC_HP") {
    this->RegisterPhysics( new G4HadronElasticPhysics("elastic",ver,true));
    this->RegisterPhysics( new G4HadronInelasticQBBC("inelastic", ver, false,
		true, false, true));
    this->RegisterPhysics( new G4QStoppingPhysics("stopping",ver));
    this->RegisterPhysics( new G4IonBinaryCascadePhysics("ionBIC"));
  } else if(type == "QGSP") {
    this->RegisterPhysics( new G4HadronElasticPhysics("LElastic",ver,false));
    this->RegisterPhysics( new G4HadronInelasticQLHEP("inelastic", ver, 
		true, false, false, false));
    this->RegisterPhysics( new G4LHEPStoppingPhysics("stopping",ver));
    this->RegisterPhysics( new G4LHEPIonPhysics("ionLHEP"));
  } else if(type == "QGSP_BERT") {
    this->RegisterPhysics( new G4HadronElasticPhysics("LElastic",ver,false));
    this->RegisterPhysics( new G4HadronInelasticQLHEP("inelastic", ver, 
		true, true, false, false));
    this->RegisterPhysics( new G4LHEPStoppingPhysics("stopping",ver));
    this->RegisterPhysics( new G4LHEPIonPhysics("ionLHEP"));
  } else if (type == "QGSP_EL") {
    this->RegisterPhysics( new G4HadronElasticPhysics("elastic",ver,false));
    this->RegisterPhysics( new G4HadronInelasticQLHEP("inelastic", ver, 
		true, false, false, false));
    this->RegisterPhysics( new G4LHEPStoppingPhysics("stopping",ver));
    this->RegisterPhysics( new G4LHEPIonPhysics("ionLHEP"));
  } else if (type == "QGSP_STP") {
    this->RegisterPhysics( new G4HadronElasticPhysics("LElastic",ver,false));
    this->RegisterPhysics( new G4HadronInelasticQLHEP("inelastic", ver, 
		true, false, false, false));
    this->RegisterPhysics( new G4QStoppingPhysics("stopping",ver));
    this->RegisterPhysics( new G4LHEPIonPhysics("ionLHEP"));
  } else {
    G4cout << "QBBC ERROR: Unknown Hadronic Physics Type <" << type
           << ">" << G4endl;
    G4Exception("*** No Hadronic Physics can be configured");
  }
}

template<class T> TQBBC<T>::~TQBBC()
{}

template<class T> void TQBBC<T>::SetCuts()
{
  if (this->verboseLevel >1) G4cout << "### QBBC::SetCuts:"; 
  this->SetCutsWithDefault();   
}


