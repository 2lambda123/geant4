//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// $Id: QBBC.icc,v 1.10 2007-11-27 07:15:57 vnivanch Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
//---------------------------------------------------------------------------
//
// ClassName:QBBC
//
// Author: 11 April 2006 V. Ivanchenko
//
// Modified:
// 24.11.06 Add G4HadronHElasticPhysics and G4NeutronTrackingCut
// 16.05.2007 V.Ivanchenko: rename EM builders
//
//----------------------------------------------------------------------------
//

#include "globals.hh"
#include "G4ParticleDefinition.hh"

#include "G4DecayPhysics.hh"
#include "G4EmStandardPhysics.hh"
#include "G4EmExtraPhysics.hh"
#include "G4QStoppingPhysics.hh"
#include "G4LHEPStoppingPhysics.hh"

#include "G4DataQuestionaire.hh"
#include "G4HadronInelasticQBBC.hh"
#include "G4HadronInelasticQLHEP.hh"
#include "G4HadronElasticPhysics.hh"
#include "G4HadronDElasticPhysics.hh"
#include "G4HadronHElasticPhysics.hh"
#include "G4IonBinaryCascadePhysics.hh"
#include "G4IonPhysics.hh"
#include "G4NeutronTrackingCut.hh"

template<class T> TQBBC<T>::TQBBC( G4int ver, const G4String& type, G4bool gl): T()
{
  G4DataQuestionaire it(photon, neutron);
  G4cout << "<<< Geant4 Physics List simulation engine: QBBC 3.1  with type <"
	<< type <<">" <<G4endl;
  G4cout <<G4endl;
  this->defaultCutValue = 0.7*mm;  
  this->SetVerboseLevel(ver);

  // EM Physics
  this->RegisterPhysics( new G4EmStandardPhysics(ver));

  // Synchroton Radiation & GN Physics
  this->RegisterPhysics( new G4EmExtraPhysics("extra EM"));

  // Decays
  this->RegisterPhysics( new G4DecayPhysics("decay",ver) );

   // Hadron Physics
  if(type == "QBBC") {
    this->RegisterPhysics( new G4HadronElasticPhysics("hElastic",ver,false,true));
    this->RegisterPhysics( new G4QStoppingPhysics("stopping",ver));
    this->RegisterPhysics( new G4IonBinaryCascadePhysics("ionBIC"));
    this->RegisterPhysics( new G4HadronInelasticQBBC("inelastic", ver, false,
		false, false, false, false));

  } else if(type == "QBBCG") {
    this->RegisterPhysics( new G4HadronElasticPhysics("hElastic",ver,false,true));
    this->RegisterPhysics( new G4QStoppingPhysics("stopping",ver));
    this->RegisterPhysics( new G4IonBinaryCascadePhysics("ionBIC"));
    this->RegisterPhysics( new G4HadronInelasticQBBC("inelastic", ver, false,
		false, false, false, true));

  } else if(type == "QBBC_DEL") {
    this->RegisterPhysics( new G4HadronDElasticPhysics(ver,false));
    this->RegisterPhysics( new G4QStoppingPhysics("stopping",ver));
    this->RegisterPhysics( new G4IonBinaryCascadePhysics("ionBIC"));
    this->RegisterPhysics( new G4HadronInelasticQBBC("inelastic", ver, false,
		true, false, false, false));

  } else if(type == "QBBC_HEL") {
    this->RegisterPhysics( new G4HadronHElasticPhysics(ver,false));
    this->RegisterPhysics( new G4QStoppingPhysics("stopping",ver));
    this->RegisterPhysics( new G4IonBinaryCascadePhysics("ionBIC"));
    this->RegisterPhysics( new G4HadronInelasticQBBC("inelastic", ver, false,
		true, false, false, false));

  } else if(type == "QBBC_HP") {
    this->RegisterPhysics( new G4HadronElasticPhysics("hElastic",ver,true,true));
    this->RegisterPhysics( new G4QStoppingPhysics("stopping",ver));
    this->RegisterPhysics( new G4IonBinaryCascadePhysics("ionBIC"));
    this->RegisterPhysics( new G4HadronInelasticQBBC("inelastic", ver, false,
		false, false, true, false));

  } else { 
    G4cout << "QBBC ERROR: Unknown Hadronic Physics Type <" << type
           << ">" << G4endl;
    G4Exception("*** No Hadronic Physics can be configured");
  }
  // Neutron tracking cut
  this->RegisterPhysics( new G4NeutronTrackingCut("Neutron tracking cut", ver));
}

template<class T> TQBBC<T>::~TQBBC()
{}

template<class T> void TQBBC<T>::SetCuts()
{
  if (this->verboseLevel >1) G4cout << "### QBBC::SetCuts:"; 
  this->SetCutsWithDefault();   
}


