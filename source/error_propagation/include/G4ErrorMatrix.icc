//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// ------------------------------------------------------------
//      GEANT 4 class inline implementation
// ------------------------------------------------------------

inline G4ErrorMatrix::G4ErrorMatrix()
  : m(0), nrow(0), ncol(0), size(0) {}

inline int G4ErrorMatrix::num_row() const { return nrow;}

inline int G4ErrorMatrix::num_col() const  { return ncol;}

inline int G4ErrorMatrix::num_size() const { return size;}

inline double & G4ErrorMatrix::operator()(int row, int col)
{
#ifdef MATRIX_BOUND_CHECK
  if(row<1 || row>num_row() || col<1 || col>num_col())
    error("Range error in G4ErrorMatrix::operator()");
#endif
  return *(m.begin()+(row-1)*ncol+col-1);
}

inline const double & G4ErrorMatrix::operator()(int row, int col) const 
{
#ifdef MATRIX_BOUND_CHECK
  if(row<1 || row>num_row() || col<1 || col>num_col())
    error("Range error in G4ErrorMatrix::operator()");
#endif
  return *(m.begin()+(row-1)*ncol+col-1);
}

inline G4ErrorMatrix::G4ErrorMatrix_row G4ErrorMatrix::operator[] (int r)
#ifdef HEP_GNU_OPTIMIZED_RETURN
  return b(*this,r);
{
#else
{
  G4ErrorMatrix_row b(*this,r);
#endif
  return b;
}

inline const G4ErrorMatrix::G4ErrorMatrix_row_const G4ErrorMatrix::operator[] (int r) const
#ifdef HEP_GNU_OPTIMIZED_RETURN
  return b(*this,r);
{
#else
{
  G4ErrorMatrix_row_const b(*this,r);
#endif
  return b;
}

inline double &G4ErrorMatrix::G4ErrorMatrix_row::operator[](int c) {
  #ifdef MATRIX_BOUND_CHECK
   if (_r<0 || _r>=_a.num_row() || c<0 || c>=_a.num_col())
     G4ErrorMatrix::error("Range error in G4ErrorMatrix::operator[][]");
  #endif
  return *(_a.m.begin()+_r*_a.ncol+c);
}

inline const double &G4ErrorMatrix::G4ErrorMatrix_row_const::operator[](int c) const
{
  #ifdef MATRIX_BOUND_CHECK
  if (_r<0 || _r>=_a.num_row() || c<0 || c>=_a.num_col())
    G4ErrorMatrix::error("Range error in G4ErrorMatrix::operator[][]");
#endif
  
  return *(_a.m.begin()+_r*_a.ncol+c);
}

inline G4ErrorMatrix::G4ErrorMatrix_row::G4ErrorMatrix_row(G4ErrorMatrix&a,int r) 
: _a(a) {
  _r = r;
}

inline G4ErrorMatrix::G4ErrorMatrix_row_const::G4ErrorMatrix_row_const 
(const G4ErrorMatrix&a, int r) 
   : _a(a) 
{
  _r = r;
}

  /*-ap inline */ G4ErrorMatrix G4ErrorMatrix::inverse(int &ierr) const
#ifdef HEP_GNU_OPTIMIZED_RETURN
  return mTmp(*this);
{
#else
{
  G4ErrorMatrix mTmp(*this);
#endif
  mTmp.invert(ierr);
  return mTmp;
}

