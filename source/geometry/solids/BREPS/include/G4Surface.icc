//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
//
// $Id: G4Surface.icc,v 1.3 2001-07-11 09:59:38 gunter Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
// --------------------------------------------------------------------
// GEANT 4 inline definitions file
//
// G4Surface.icc
//
// Implementation of inline methods of G4Surface
// --------------------------------------------------------------------

inline
G4Vector3D G4Surface::GetOrigin() const
{
  return origin;
}

inline
G4double G4Surface::GetDistance() const
{
  return distance;
}

inline
void G4Surface::SetDistance(G4double Dist)
{
  distance=Dist;
}

inline
G4int G4Surface::IsActive() const
{
  return active;
}

inline
void G4Surface::SetActive(G4int act)
{
  active=act;
}

inline
void G4Surface::Deactivate()
{
  active=0;
}

inline
void G4Surface::SetSameSense(G4int sameSense0)
{
  sameSense = sameSense0;
}

inline
G4int G4Surface::GetSameSense() const
{
  return sameSense;
}

inline
G4BoundingBox3D* G4Surface::GetBBox()
{
  return bbox;
}

inline
const G4Point3D& G4Surface::GetClosestHit() const
{
  return closest_hit;
}

inline
G4Surface* G4Surface::GetNextNode()
{
  return next;
}

inline
void G4Surface::SetNextNode(G4Surface* node)
{
  next = node;
}

inline
void G4Surface::Project (G4double& Coord,
                         const G4Point3D& Pt2, 
                         const G4Plane& Pl1)
{
  Coord = Pt2.x()*Pl1.a + Pt2.y()*Pl1.b + Pt2.z()*Pl1.c - Pl1.d;
}
