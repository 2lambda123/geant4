//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
//
// $Id: G4KnotVector.icc,v 1.4 2004-12-02 09:31:24 gcosmo Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
// --------------------------------------------------------------------
// GEANT 4 inline definitions file
//
// G4KnotVector.icc
//
// Implementation of inline methods of G4KnotVector
// --------------------------------------------------------------------

inline
G4int G4KnotVector::GetSize() const
{
  return k_size;
}

inline
G4double G4KnotVector::GetKnot(G4int knot_number) const
{
  return knots[knot_number];
}

inline
void G4KnotVector::PutKnot(G4int knot_number, G4double value)
{
  knots[knot_number]=value;
}

inline
G4double G4KnotVector::ApxEq(G4double x, G4double y) const
{
  return (std::fabs(x - y) < kCarTolerance);
}
