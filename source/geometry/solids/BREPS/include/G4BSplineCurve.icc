inline G4int G4BSplineCurve::GetDegree() const {
  return degree;
}

inline const G4BSplineCurve::G4Point3DVector*
G4BSplineCurve::GetControlPointsList() const {
  return controlPointsList;
}

inline const G4BSplineCurve::G4doubleVector*
G4BSplineCurve::GetKnots() const {
  return knots;
}

inline const G4BSplineCurve::G4doubleVector*
G4BSplineCurve::GetWeightsData() const {
  return weightsData;
}

// add by L. Broglia to pass linkage

inline G4double G4BSplineCurve::GetPMax()
{
  return 0.0;
}

inline G4Point3D G4BSplineCurve::GetPoint(G4double param)
{
  return G4Point3D(0, 0, 0);
}

inline G4double  G4BSplineCurve::GetPPoint(const G4Point3D& p)
{
  return 0.0;
}

//////////////////////////////////////////////////////////////////////

#include "G4CurveRayIntersection.hh"
/*
inline void G4BSplineCurve::IntersectRay2D(const G4Ray& ray,
					   G4CurveRayIntersection& is)
{
}
*/
inline G4int G4BSplineCurve::IntersectRay2D(const G4Ray& ray)
{
  // L. Broglia
  G4cout<<"\nWarning ! G4BSplineCurve::IntersectRay2D is empty.";
  return 0;
}

