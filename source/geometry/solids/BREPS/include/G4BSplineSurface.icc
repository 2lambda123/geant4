// This code implementation is the intellectual property of
// the GEANT4 collaboration.
//
// By copying, distributing or modifying the Program (or any work
// based on the Program) you indicate your acceptance of this statement,
// and all its terms.
//
// $Id: G4BSplineSurface.icc,v 1.1 2000-08-28 08:57:42 gcosmo Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
// --------------------------------------------------------------------
// GEANT 4 inline definitions file
//
// G4BSplineSurface.icc
//
// Implementation of inline methods of G4BSplineSurface
// --------------------------------------------------------------------

inline G4double G4BSplineSurface::GetUHit()
{
  return Hit->u;
}

inline G4double G4BSplineSurface::GetVHit()
{
  return Hit->v;
}

inline G4int G4BSplineSurface::MyType() const
{
  return 2;
}

inline void G4BSplineSurface::Reset()
{
  active=1;
  bezier_list.EmptyList();
  projected_list.EmptyList();
  Intersected=0;
  distance = kInfinity;
}

inline G4int G4BSplineSurface::GetRows() 
{
  return ctl_points->GetRows();
}

inline G4int G4BSplineSurface::GetCols()
{
  return ctl_points->GetCols();
}

inline G4Point3D G4BSplineSurface::GetControlPoint(G4int a, G4int b)
{
  return ctl_points->Get3D(a,b);
}

inline G4int G4BSplineSurface::GetOrder (G4int direction)
{
  return order[direction];
}

inline void G4BSplineSurface::PutOrder(G4int direction, G4int value)
{
  order[direction]=value;
}

inline G4Vector3D G4BSplineSurface::SurfaceNormal(const G4Point3D& Pt) const
{
  return G4Vector3D(0,0,0);
}
