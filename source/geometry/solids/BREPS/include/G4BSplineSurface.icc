//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
//
// $Id: G4BSplineSurface.icc,v 1.4 2001-07-11 09:59:31 gunter Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
// --------------------------------------------------------------------
// GEANT 4 inline definitions file
//
// G4BSplineSurface.icc
//
// Implementation of inline methods of G4BSplineSurface
// --------------------------------------------------------------------

inline
G4double G4BSplineSurface::GetUHit() const
{
  return Hit->GetU();
}

inline
G4double G4BSplineSurface::GetVHit() const
{
  return Hit->GetV();
}

inline
G4int G4BSplineSurface::MyType() const
{
  return 2;
}

inline
void G4BSplineSurface::Reset()
{
  active=1;
  bezier_list.EmptyList();
  projected_list.EmptyList();
  Intersected=0;
  distance = kInfinity;
}

inline
G4int G4BSplineSurface::GetRows() const
{
  return ctl_points->GetRows();
}

inline
G4int G4BSplineSurface::GetCols() const
{
  return ctl_points->GetCols();
}

inline
G4Point3D G4BSplineSurface::GetControlPoint(G4int a, G4int b) const
{
  return ctl_points->Get3D(a,b);
}

inline
G4int G4BSplineSurface::GetOrder (G4int direction) const
{
  return order[direction];
}

inline
void G4BSplineSurface::PutOrder(G4int direction, G4int value)
{
  order[direction]=value;
}

inline
G4Vector3D G4BSplineSurface::SurfaceNormal(const G4Point3D& Pt) const
{
  return G4Vector3D(0,0,0);
}
