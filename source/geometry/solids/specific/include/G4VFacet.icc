//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration and of QinetiQ Ltd,  subject DEFCON 705 IPR *
// * conditions.                                                      *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
// $Id: G4VFacet.icc,v 1.2 2006-01-30 14:39:53 gcosmo Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//
// MODULE:              G4VFacet.icc
//
// Version:             0.B
// Date:                15/06/2005
// Author:              P R Truscott
// Organisation:        QinetiQ Ltd, UK
// Customer:            UK Ministry of Defence : RAO CRP TD Electronic Systems
// Contract:            C/MAT/N03517
//
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//
// CHANGE HISTORY
// --------------
//
// 31 October 2004, P R Truscott, QinetiQ Ltd, UK - Created.
//
// %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

///////////////////////////////////////////////////////////////////////////////
//
inline G4VFacet::G4VFacet ()
{
  dirTolerance = 1.0E-14;
  
  P.clear();
  E.clear();
    
  centroid  = G4ThreeVector(0.0,0.0,0.0);
  radius    = 0.0;
  radiusSqr = 0.0;
}

///////////////////////////////////////////////////////////////////////////////
//
inline G4VFacet::~G4VFacet ()
{
  P.clear();
  E.clear();
}

///////////////////////////////////////////////////////////////////////////////
//
inline G4ThreeVector G4VFacet::GetSurfaceNormal () const
  {return surfaceNormal;}

///////////////////////////////////////////////////////////////////////////////
//
inline G4GeometryType G4VFacet::GetEntityType () const
  {return geometryType;}

///////////////////////////////////////////////////////////////////////////////
//
inline G4bool G4VFacet::IsInside (const G4ThreeVector &p) const
{
  G4ThreeVector D       = p - P0;
  G4double displacement = D.dot(surfaceNormal);
  G4bool inside         = (displacement <= 0.0);
  
  return inside;
}

///////////////////////////////////////////////////////////////////////////////
//
inline G4bool G4VFacet::IsDefined () const
  {return isDefined;}

///////////////////////////////////////////////////////////////////////////////
//
inline size_t G4VFacet::GetVertexIndex (const size_t i) const
{
  if (i < I.size()) return I[i];
  else              return 999999999;
}

///////////////////////////////////////////////////////////////////////////////
//
inline size_t G4VFacet::GetNumberOfVertices () const
{
  return nVertices;
}

 ///////////////////////////////////////////////////////////////////////////////
//
inline void G4VFacet::SetVertexIndex (const size_t i, const size_t j)
  {I[i] = j;}

///////////////////////////////////////////////////////////////////////////////
//
inline G4ThreeVector G4VFacet::GetVertex (size_t i) const
{
  if (i == 0)             return P0;
  else if (i < nVertices) return P[i-1];
  else                    return G4ThreeVector(0.0,0.0,0.0);
}

///////////////////////////////////////////////////////////////////////////////
//
inline void G4VFacet::ApplyTranslation(const G4ThreeVector v)
{
  P0 += v;
  for (G4ThreeVectorList::iterator it=P.begin(); it!=P.end(); it++)
    (*it) += v;
}

///////////////////////////////////////////////////////////////////////////////
//
inline G4bool G4VFacet::operator== (const G4VFacet &right) const
{
  G4double tolerance = kCarTolerance*kCarTolerance/4.0;
  if (nVertices != right.GetNumberOfVertices())
    return false;
  else if ((centroid-right.GetCentroid()).mag2() > tolerance)
    return false;
  else if (std::fabs((right.GetSurfaceNormal()).dot(surfaceNormal)) < 0.9999999999)
    return false;

  G4bool coincident  = true;
  size_t i           = 0;
  do
  {
    coincident = false;
    size_t j   = 0;
    do
    {
      coincident = (GetVertex(i)-right.GetVertex(j)).mag2() < tolerance;
    } while (!coincident && j++ < nVertices);
  } while (coincident && i++ < nVertices);
  
  return coincident;
}

///////////////////////////////////////////////////////////////////////////////
//
inline G4ThreeVector G4VFacet::GetCentroid () const
  {return centroid;}

///////////////////////////////////////////////////////////////////////////////
//
inline G4double G4VFacet::GetRadius () const
  {return radius;}

///////////////////////////////////////////////////////////////////////////////
//
inline G4double G4VFacet::GetRadiusSquared () const
  {return radiusSqr;}

///////////////////////////////////////////////////////////////////////////////
//
inline G4VFacet* G4VFacet::GetClone ()
  {return 0;}

///////////////////////////////////////////////////////////////////////////////
//
inline G4double G4VFacet::Distance (const G4ThreeVector&, const G4double)
  {return kInfinity;}

///////////////////////////////////////////////////////////////////////////////
//
inline G4double G4VFacet::Distance (const G4ThreeVector&, const G4double,
                                    const G4bool)
  {return kInfinity;}

///////////////////////////////////////////////////////////////////////////////
//
inline G4double G4VFacet::Extent (const G4ThreeVector)
  {return 0.0;}

///////////////////////////////////////////////////////////////////////////////
//
inline G4bool G4VFacet::Intersect (const G4ThreeVector&, const G4ThreeVector &,
                                   const G4bool , G4double &, G4double &,
                                         G4ThreeVector &)
  {return false;}
