//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
//
// $Id: G4Sphere.icc,v 1.5 2004-12-02 09:31:28 gcosmo Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
// --------------------------------------------------------------------
// GEANT 4 inline definitions file
//
// G4Sphere.icc
//
// Implementation of inline methods of G4Sphere
// --------------------------------------------------------------------

inline
G4double G4Sphere::GetInsideRadius() const
{
  return fRmin;
}

inline
G4double G4Sphere::GetOuterRadius() const
{
  return fRmax;
}

inline
G4double G4Sphere::GetStartPhiAngle() const
{
  return fSPhi;
}

inline
G4double G4Sphere::GetDeltaPhiAngle() const
{
  return fDPhi;
}

inline
G4double G4Sphere::GetStartThetaAngle() const
{
  return fSTheta;
}

G4double G4Sphere::GetDeltaThetaAngle() const
{
  return fDTheta;
}

inline
void G4Sphere::SetInsideRadius(G4double newRmin)
{
  fRmin= newRmin;
  fCubicVolume= 0.;
  fpPolyhedron = 0;
}

inline
void G4Sphere::SetOuterRadius(G4double newRmax)
{
  fRmax= newRmax;
  fCubicVolume= 0.;
  fpPolyhedron = 0;
}

inline
void G4Sphere::SetStartPhiAngle(G4double newSphi)
{
  fSPhi= newSphi;
  fCubicVolume= 0.;
  fpPolyhedron = 0;
}

inline
void G4Sphere::SetDeltaPhiAngle(G4double newDphi)
{
  fDPhi= newDphi;
  fCubicVolume= 0.;
  fpPolyhedron = 0;
}

inline
void G4Sphere::SetStartThetaAngle(G4double newSTheta)
{
  fSTheta=newSTheta;
  fCubicVolume= 0.;
  fpPolyhedron = 0;
}

inline
void G4Sphere::SetDeltaThetaAngle(G4double newDTheta)
{
  fDTheta=newDTheta;
  fCubicVolume= 0.;
  fpPolyhedron = 0;
}

// Old access functions

inline
G4double G4Sphere::GetRmin() const 
{
  return GetInsideRadius();
}

inline
G4double G4Sphere::GetRmax() const
{
  return GetOuterRadius();
}

inline
G4double G4Sphere::GetSPhi() const
{
  return GetStartPhiAngle();
}

inline
G4double G4Sphere::GetDPhi() const
{
  return GetDeltaPhiAngle();
}

inline
G4double G4Sphere::GetSTheta() const
{
  return GetStartThetaAngle();
}

inline
G4double G4Sphere::GetDTheta() const
{
  return GetDeltaThetaAngle();
}
///////////////////////////////////////////////////

inline
G4double G4Sphere::GetCubicVolume()
{
  if(fCubicVolume != 0.) ;
  else   fCubicVolume = fDPhi*(std::cos(fSTheta)-std::cos(fSTheta+fDTheta))*
                              (fRmax*fRmax*fRmax-fRmin*fRmin*fRmin)/3.; 
  return fCubicVolume;
}
