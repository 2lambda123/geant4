//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
//
// $Id: G4Trap.icc,v 1.5 2005-08-03 16:00:37 danninos Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
// --------------------------------------------------------------------
// GEANT 4 inline definitions file
//
// G4Trap.icc
//
// Implementation of inline methods of G4Trap
// --------------------------------------------------------------------

inline
G4double G4Trap::GetZHalfLength() const
{
  return fDz ;
}

inline
G4ThreeVector G4Trap::GetSymAxis() const
{
  G4double cosTheta = 1.0/std::sqrt(1+fTthetaCphi*fTthetaCphi +
                               fTthetaSphi*fTthetaSphi) ;

  return G4ThreeVector(fTthetaCphi*cosTheta,
                       fTthetaSphi*cosTheta,
                       cosTheta) ;
}

inline
G4double G4Trap::GetYHalfLength1() const
{
  return fDy1 ;
}

inline
G4double G4Trap::GetXHalfLength1() const
{
  return fDx1 ;
}

inline
G4double G4Trap::GetXHalfLength2() const
{
  return fDx2 ;
}

inline
G4double G4Trap::GetTanAlpha1() const
{
  return fTalpha1 ;
}

inline
G4double G4Trap::GetYHalfLength2() const
{
  return fDy2 ;
}

inline
G4double G4Trap::GetXHalfLength3() const
{
  return fDx3 ;
}

inline
G4double G4Trap::GetXHalfLength4() const
{
  return fDx4 ;
}

inline
G4double G4Trap::GetTanAlpha2() const
{
  return fTalpha2 ;
}

inline
TrapSidePlane G4Trap::GetSidePlane( G4int n ) const
{
  return fPlanes[n] ;
}

///////////////////////////////////////////////////
//
// Return the area of a face specified by four clockwise points

inline
G4double G4Trap::GetFaceArea(const G4ThreeVector& p0, const G4ThreeVector& p1,
		             const G4ThreeVector& p2, const G4ThreeVector& p3)
{
   G4double area;

   area = 0.5*((p1-p0).cross(p2-p1).mag()+(p3-p2).cross(p0-p3).mag());
   return area;
}

///////////////////////////////////////////////////
//
// Return the volume as a bit modified Trd

inline
G4double G4Trap::GetCubicVolume()
{
  if(fCubicVolume != 0.) ;
  else   fCubicVolume = fDz*( (fDx1+fDx2+fDx3+fDx4)*(fDy1+fDy2)
                            + (fDx4+fDx3-fDx2-fDx1)*(fDy2-fDy1)/3 ); 
  return fCubicVolume;
}
