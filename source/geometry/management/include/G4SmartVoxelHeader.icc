//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
//
// $Id: G4SmartVoxelHeader.icc,v 1.5 2003-11-02 14:01:22 gcosmo Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
//
// G4SmartVoxelHeader Inline implementation
//
// --------------------------------------------------------------------

inline
G4int G4SmartVoxelHeader::GetMaxEquivalentSliceNo() const
{
  return fmaxEquivalent;
}

inline
void G4SmartVoxelHeader::SetMaxEquivalentSliceNo(G4int pMax)
{
  fmaxEquivalent=pMax;
}

inline
G4int G4SmartVoxelHeader::GetMinEquivalentSliceNo() const
{
  return fminEquivalent;
}

inline
void G4SmartVoxelHeader::SetMinEquivalentSliceNo(G4int pMin)
{
  fminEquivalent=pMin;
}

inline
EAxis G4SmartVoxelHeader::GetAxis() const
{
  return faxis;
}

inline
EAxis G4SmartVoxelHeader::GetParamAxis() const
{
  return fparamAxis;
}

inline
G4double G4SmartVoxelHeader::GetMaxExtent() const
{
  return fmaxExtent;
}

inline
G4double G4SmartVoxelHeader::GetMinExtent() const
{
  return fminExtent;
}

inline
G4int G4SmartVoxelHeader::GetNoSlices() const
{
  return fslices.size();
}

inline
G4SmartVoxelProxy* G4SmartVoxelHeader::GetSlice(G4int n) const
{
  return fslices[n];
}
