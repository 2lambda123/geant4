//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
//
// $Id: G4VPhysicalVolume.icc,v 1.8 2003-11-02 14:01:22 gcosmo Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
//
// class G4VPhysicalVolume Inline Implementation
//
// --------------------------------------------------------------------

inline
G4bool G4VPhysicalVolume::operator == (const G4VPhysicalVolume& p) const
{
  return (this==&p) ? true : false;
}

inline
const G4ThreeVector& G4VPhysicalVolume::GetTranslation() const
{
  return ftrans;
}

inline
void G4VPhysicalVolume::SetTranslation(const G4ThreeVector &v)
{
  ftrans=v;
}

inline
const G4RotationMatrix* G4VPhysicalVolume::GetRotation() const
{
  return frot;
}

inline
G4RotationMatrix* G4VPhysicalVolume::GetRotation()
{
  return frot;
}

inline
void G4VPhysicalVolume::SetRotation(G4RotationMatrix *pRot)
{
  frot=pRot;
}

inline
G4LogicalVolume* G4VPhysicalVolume::GetLogicalVolume() const
{
  return flogical;
}

inline
void G4VPhysicalVolume::SetLogicalVolume(G4LogicalVolume *pLogical)
{
  flogical=pLogical;
}

inline
G4LogicalVolume* G4VPhysicalVolume::GetMotherLogical() const
{
  return flmother;
}

inline
void G4VPhysicalVolume::SetMotherLogical(G4LogicalVolume *pMother)
{
  flmother=pMother;
}

inline
G4String G4VPhysicalVolume::GetName() const
{
  return fname;
}

inline
void G4VPhysicalVolume::SetName(const G4String& pName)
{
  fname=pName;
}

inline
G4RotationMatrix G4VPhysicalVolume::GetObjectRotationValue() const
{
  G4RotationMatrix  aRotM;   // Initialised to identity

  // Insure against frot being a null pointer
  if(frot)
  {
     aRotM= frot->inverse();
  }
  return aRotM;
}

inline
G4ThreeVector  G4VPhysicalVolume::GetObjectTranslation() const
{
  return  ftrans;
}

inline
const G4RotationMatrix* G4VPhysicalVolume::GetFrameRotation() const
{
  return frot;
}

inline
G4ThreeVector  G4VPhysicalVolume::GetFrameTranslation() const
{
  return -ftrans;
}
