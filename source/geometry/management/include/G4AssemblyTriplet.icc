//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
//
// $Id: G4AssemblyTriplet.icc,v 1.5 2001-07-11 09:59:16 gunter Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
// 
// Class G4AssemblyTriplet - inline implementation
//
// ----------------------------------------------------------------------

inline
G4AssemblyTriplet::G4AssemblyTriplet()
  : fVolume( 0 ), fRotation( 0 )
{
  G4ThreeVector v(0.,0.,0.);
  fTranslation = v;
}

inline
G4AssemblyTriplet::G4AssemblyTriplet( G4LogicalVolume* pVolume,
                                      G4ThreeVector& translation,
                                      G4RotationMatrix* pRotation )
  : fVolume( pVolume ), fTranslation( translation ), fRotation( pRotation )
{
}

inline
G4AssemblyTriplet::G4AssemblyTriplet( const G4AssemblyTriplet& second )
{
  fVolume      = second.GetVolume();
  fRotation    = second.GetRotation();
  fTranslation = second.GetTranslation();
}

inline
G4AssemblyTriplet::~G4AssemblyTriplet()
{
}

inline
G4LogicalVolume* G4AssemblyTriplet::GetVolume() const
{
  return fVolume;
}

inline
void G4AssemblyTriplet::SetVolume( G4LogicalVolume* pVolume )
{
  fVolume = pVolume;
}

inline
G4ThreeVector G4AssemblyTriplet::GetTranslation() const
{
  return fTranslation;
}

inline
void G4AssemblyTriplet::SetTranslation( G4ThreeVector& translation )
{
  fTranslation = translation;
}

inline
G4RotationMatrix* G4AssemblyTriplet::GetRotation() const
{
  return fRotation;
}

inline
void G4AssemblyTriplet::SetRotation( G4RotationMatrix* pRotation )
{
  fRotation = pRotation;
}

inline
G4AssemblyTriplet&
G4AssemblyTriplet::operator=( const G4AssemblyTriplet& second )
{
  if( this != &second )
  {
    fVolume      = second.GetVolume();
    fRotation    = second.GetRotation();
    fTranslation = second.GetTranslation();
  }
  
  return *this;
}
