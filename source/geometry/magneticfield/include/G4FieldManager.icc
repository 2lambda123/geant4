//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
//
// $Id: G4FieldManager.icc,v 1.6 2003-06-20 23:01:23 japost Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
//
// G4FieldManager inline implementation 
//

inline
G4bool G4FieldManager::SetDetectorField(G4Field *detectorField)
{
   fDetectorField= detectorField;
   return 0;
}

inline
const G4Field* G4FieldManager::GetDetectorField() const
{ 
   // If pointer is null, should this raise an exception ??
   return fDetectorField;
} 

inline
G4bool G4FieldManager::DoesFieldExist() const
{ 
   return (fDetectorField != 0);
} 

inline  
void G4FieldManager::SetChordFinder(G4ChordFinder *aChordFinder)
{
     fChordFinder= aChordFinder;
}

inline  
G4ChordFinder*  G4FieldManager::GetChordFinder()
{
     return fChordFinder;
}

inline
G4double G4FieldManager::GetDeltaIntersection() const
{
     return fDelta_Intersection_Val;
}

inline
G4double G4FieldManager::GetDeltaOneStep() const
{
     return fDelta_One_Step_Value;
}

inline
void G4FieldManager::SetDeltaOneStep(G4double valDeltaOneStep)
{ 
     fDelta_One_Step_Value= valDeltaOneStep;  
}

inline
void G4FieldManager::SetDeltaIntersection(G4double valDeltaIntersection)
{
      fDelta_Intersection_Val = valDeltaIntersection;
}

inline
void G4FieldManager::SetAccuraciesWithDeltaOneStep(G4double valDeltaOneStep)
{ 
      fDelta_One_Step_Value= valDeltaOneStep;  
      fDelta_Intersection_Val = 0.4 * fDelta_One_Step_Value;
}

inline G4bool   G4FieldManager::DoesFieldChangeEnergy() const
{ return fFieldChangesEnergy;}

inline void     G4FieldManager::SetFieldChangesEnergy(G4bool value)
{ fFieldChangesEnergy = value; }
