//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
//
// $Id: G4ChordFinder.icc,v 1.7 2003-11-05 10:47:58 japost Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
// G4ChordFinder inline implementations
//
// --------------------------------------------------------------------

inline 
void G4ChordFinder::SetIntegrationDriver(G4MagInt_Driver* IntegrationDriver)
{
  fIntgrDriver=IntegrationDriver;
}

inline
G4MagInt_Driver* G4ChordFinder::GetIntegrationDriver()
{
  return fIntgrDriver;
}

inline
G4bool G4ChordFinder::AcceptableMissDist(G4double dChordStep) const
{ 
  return (dChordStep <= fDeltaChord) ;
}

inline
void G4ChordFinder::SetChargeMomentumMass(G4double pCharge, // in e+ units
                                          G4double pMomentum,
                                          G4double pMass)
{
  fIntgrDriver-> SetChargeMomentumMass(pCharge, pMomentum, pMass);
}

inline
G4double G4ChordFinder::GetDeltaChord() const
{
  return fDeltaChord;
}

inline
void G4ChordFinder::SetDeltaChord(G4double newval)
{
  fDeltaChord=newval;
}

// ......................................................................
inline
void G4ChordFinder::ResetStepEstimate()
{
  fLastStepEstimate_Unconstrained = DBL_MAX;    
}
