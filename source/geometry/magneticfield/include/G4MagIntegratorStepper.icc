//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// $Id: G4MagIntegratorStepper.icc,v 1.10 2006-09-20 09:31:46 japost Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//

inline
G4EquationOfMotion* G4MagIntegratorStepper::GetEquationOfMotion()
{
  return  fEquation_Rhs;
} 

inline void
 G4MagIntegratorStepper::SetEquationOfMotion(G4EquationOfMotion* newEquation)
{
  if( newEquation != 0 ) {
    fEquation_Rhs= newEquation;
  }
} 

inline
G4int G4MagIntegratorStepper::GetNumberOfVariables() const
{
  return fNoIntegrationVariables;
}


inline
G4int G4MagIntegratorStepper::GetNumberOfStateVariables() const
{
  return fNoStateVariables;
}

// inline
// void G4MagIntegratorStepper::SetNumberOfVariables(G4int newNo)
// {
//   fNumberOfVariables = newNo;
// }

inline
void G4MagIntegratorStepper::RightHandSide( const  double y[], double dydx[] )   
{
  fEquation_Rhs-> RightHandSide(y, dydx);
}

inline
void G4MagIntegratorStepper::NormaliseTangentVector( G4double vec[6] )
{
   double drds2 = vec[3]*vec[3]+vec[4]*vec[4]+vec[5]*vec[5];

   if( std::fabs(drds2 - 1.0) > 1.e-14 ){
      double normx = 1.0 / std::sqrt(drds2);
      for(int i=0;i<3;i++) 
	 vec[i+3] *= normx;   
   }
}
