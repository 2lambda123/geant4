//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
//
// $Id: G4MagIntegratorStepper.icc,v 1.5 2001-07-11 09:59:09 gunter Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//

inline
G4EquationOfMotion* G4MagIntegratorStepper::GetEquationOfMotion()
{
  return  fEquation_Rhs;
} 

inline
G4int G4MagIntegratorStepper::GetNumberOfVariables() const
{
  return fNumberOfVariables;
}

inline
void G4MagIntegratorStepper::SetNumberOfVariables(G4int newNo)
{
  fNumberOfVariables = newNo;
}

inline
void G4MagIntegratorStepper::NormaliseTangentVector( G4double vec[6] )
{
   double drds2 = vec[3]*vec[3]+vec[4]*vec[4]+vec[5]*vec[5];

   if( fabs(drds2 - 1.0) > 1.e-14 ){
      double normx = 1.0 / sqrt(drds2);
      for(int i=0;i<3;i++) 
	 vec[i+3] *= normx;   
   }
}
