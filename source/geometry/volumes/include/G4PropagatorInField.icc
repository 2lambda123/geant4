// This code implementation is the intellectual property of
// the GEANT4 collaboration.
//
// By copying, distributing or modifying the Program (or any work
// based on the Program) you indicate your acceptance of this statement,
// and all its terms.
//
// $Id: G4PropagatorInField.icc,v 1.10 2000-11-01 16:51:07 gcosmo Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
// 
// ------------------------------------------------------------------------
//	GEANT 4  include file implementation
//
//	For information related to this code contact:
//	GEANT4 Collaboration
// ------------------------------------------------------------------------
// 
// 25.10.96 John Apostolakis, design and implementation 
// 25.03.97 John Apostolakis, adaptation for G4Transportation and cleanup
//
//  To create an object, must have 
//      an object that calculates the Curved paths 
//      the navigator to find (linear) intersections
//     and ?? also must know the value of the maximum displacement allowed
//

inline
G4PropagatorInField::G4PropagatorInField(G4Navigator    *theNavigator, 
		                         G4FieldManager *detectorFieldMgr)
  : fNavigator(theNavigator),
    fDetectorFieldMgr(detectorFieldMgr), 
    fmax_loop_count(10000),
    End_PointAndTangent(G4ThreeVector(0.,0.,0.),
			G4ThreeVector(0.,0.,0.),0.0,0.0),
    fDelta_One_Step_Value(fDefault_Delta_One_Step_Value),
    fDelta_Intersection_Val(fDefault_Delta_Intersection_Val),
    fVerboseLevel(0)
{
     // this->fChordFinder = new G4ChordFinder( (G4MagneticField*)0, 1e-6 );

     fNoZeroStep=0;                
     fThresholdNo_ZeroSteps= 2; 
     // fMidPoint_CurveLen_of_LastAttempt= -1;
     fFull_CurveLen_of_LastAttempt= -1; 
     fLast_ProposedStepLength= -1; 
}

inline
G4ChordFinder* G4PropagatorInField::GetChordFinder()
{
      // Now only the "Chord Finder" of the global Field Mgr is used
      //  ... 
      return fDetectorFieldMgr->GetChordFinder(); 
}

inline
void G4PropagatorInField::SetChargeMomentumMass( 
			G4double Charge,            // in e+ units
		        G4double Momentum,          // in GeV/c 
		        G4double Mass)              // in ? units
{
   GetChordFinder()->SetChargeMomentumMass(Charge, Momentum, Mass); 
}

//  Obtain the final space-point and velocity (normal) at the end of the Step
//
inline
G4ThreeVector  G4PropagatorInField::EndPosition() const
{
      return   End_PointAndTangent.Position(); 
}

inline
G4ThreeVector  G4PropagatorInField::EndMomentumDir() const
{
      return   End_PointAndTangent.GetMomentumDir(); 
}

inline
G4double G4PropagatorInField::GetEpsilonStep() const
{ 
      return fEpsilonStep; 
}

inline
void     G4PropagatorInField::SetEpsilonStep(G4double newEps)
{
      fEpsilonStep=newEps;
}

inline
G4bool   G4PropagatorInField::IsParticleLooping() const
{
      return fParticleIsLooping;
}

inline
G4int    G4PropagatorInField::GetMaxLoopCount() const
{
      return fmax_loop_count;
}

inline
void     G4PropagatorInField::SetMaxLoopCount(G4int new_max) 
{
      fmax_loop_count= new_max;
}

inline
G4double G4PropagatorInField::GetDeltaIntersection() const
{
  return fDelta_Intersection_Val;
} 

inline
G4double G4PropagatorInField::GetDeltaOneStep() const
{
  return fDelta_One_Step_Value;
}                                    

inline
void
G4PropagatorInField::SetAccuraciesWithDeltaOneStep(G4double valDeltaOneStep)
{ 
  fDelta_One_Step_Value= valDeltaOneStep;  
  fDelta_Intersection_Val = 0.4 * fDelta_One_Step_Value;
}

inline
void G4PropagatorInField::SetDeltaOneStep(G4double valDeltaOneStep)
{ 
  fDelta_One_Step_Value= valDeltaOneStep;  
}

inline
void G4PropagatorInField::SetDeltaIntersection(G4double valDeltaIntersection)
{
  fDelta_Intersection_Val = valDeltaIntersection;
}

inline
G4int G4PropagatorInField::SetVerboseLevel( G4int Verbose )
{
  return fVerboseLevel=Verbose;
}

inline
G4int G4PropagatorInField::Verbose() const
{
  return fVerboseLevel;
}

inline
G4FieldTrack G4PropagatorInField::GetEndState() const
{
  return End_PointAndTangent;
}
