//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
//
// $Id: G4GRSSolid.icc,v 1.8 2003-11-02 16:06:05 gcosmo Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
// 
// class G4GRSSolid inline implementation
// ----------------------------------------------------------------------

inline
G4GRSSolid::G4GRSSolid( G4VSolid *pSolid,
                  const G4RotationMatrix *pRot,
                  const G4ThreeVector &tlate )
  : G4VTouchable(),
    fsolid(pSolid),
    ftlate(tlate)
{
  if (pRot)
  {
    frot = new G4RotationMatrix(*pRot);
    if ( !frot )
    {
      G4Exception("G4GRSSolid::G4GRSSolid()","NullPointer",FatalException,
                  "Cannot allocate G4RotationMatrix, NULL pointer.");
    }
  }
  else
  {
    frot=0;
  }
}

inline
G4GRSSolid::G4GRSSolid( G4VSolid *pSolid,
                  const G4RotationMatrix &rot,
                  const G4ThreeVector &tlate )
  : G4VTouchable(),
    fsolid(pSolid),
    ftlate(tlate)
{
  frot = new G4RotationMatrix(rot);
  if ( !frot )
  {
    G4Exception("G4GRSSolid::G4GRSSolid()","NullPointer",FatalException,
                "Cannot allocate G4RotationMatrix, NULL pointer.");
  }
}

inline
G4VSolid* G4GRSSolid::GetSolid( G4int depth ) const
{
  if( depth != 0 )
  {
    G4Exception("G4GRSSolid::GetSolid()", "WrongArgumentValue",
                FatalException, "History depth in input must be 0 !");
  }
  return fsolid;
}

inline
const G4ThreeVector& G4GRSSolid::GetTranslation( G4int depth ) const
{
  if( depth != 0 )
  {
    G4Exception("G4GRSSolid::GetTranslation()", "WrongArgumentValue",
                FatalException, "History depth in input must be 0 !");
  }
  return ftlate;
}

inline
const G4RotationMatrix* G4GRSSolid::GetRotation( G4int depth ) const
{
  if( depth != 0 )
  {
    G4Exception("G4GRSSolid::GetRotation()", "WrongArgumentValue",
                FatalException, "History depth in input must be 0 !");
  }
  return frot;
}
