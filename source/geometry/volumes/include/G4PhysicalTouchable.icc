//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
//
// $Id: G4PhysicalTouchable.icc,v 1.1 2005-07-25 10:02:43 gcosmo Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
//
// class G4PhysicalTouchable Inline implementation
//
// ----------------------------------------------------------------------

inline
const G4VTouchable* G4PhysicalTouchable::GetParentTouchable() const
{
  return fpTouchable; 
}

inline
G4VPhysicalVolume* G4PhysicalTouchable::GetCurrentVolume()
{
  return fpPhysVol;
}

inline
const G4VPhysicalVolume* G4PhysicalTouchable::GetCurrentVolume() const
{
  return fpPhysVol;
}

inline
void G4PhysicalTouchable::SetCurrentVolume( G4VPhysicalVolume* pCurrentVol )
{
  if( pCurrentVol ){ fpPhysVol = pCurrentVol; }
  else
  { 
    G4Exception("G4PhysicalTouchable::SetCurrentVolume()", 
                "InvalidPhysicalVolumePointer", FatalException,
                "Cannot set physical-touchable's current pointer to NULL !"); 
  }
}

inline
void G4PhysicalTouchable::SetParentTouchable( const G4VTouchable* newParentT ) 
{
  if( fCreatedParentTouch )
  {
    delete fpTouchable; 
  }
  fpTouchable= newParentT; 
  fCreatedParentTouch= false; 
}

inline
G4int G4PhysicalTouchable::GetMultiplicity() const
{
  return fpPhysVol->GetMultiplicity();
}

inline
G4bool G4PhysicalTouchable::IsMany() const
{
  return fpPhysVol->IsMany();
}

inline
G4int G4PhysicalTouchable::GetCopyNo() const
{
  return fpPhysVol->GetCopyNo();
}

inline
void G4PhysicalTouchable::SetCopyNo(G4int CopyNo)
{
  fpPhysVol->SetCopyNo(CopyNo);
}

inline G4bool G4PhysicalTouchable::IsReplicated() const
{
  return fpPhysVol->IsReplicated();
}

inline G4bool G4PhysicalTouchable::IsParameterised() const
{
  return fpPhysVol->IsParameterised();
}

inline
G4VPVParameterisation* G4PhysicalTouchable::GetParameterisation() const
{
  return fpPhysVol->GetParameterisation();
}

inline
void G4PhysicalTouchable::GetReplicationData(EAxis& axis,
                                             G4int& nReplicas,
                                             G4double& width,
                                             G4double& offset,
                                             G4bool& consuming) const 
{
  fpPhysVol->GetReplicationData(axis, nReplicas, width, offset, consuming);
}
