//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
// $Id$
//
// 
// class G4TouchableHistory inline implementation
// ----------------------------------------------------------------------

#if defined G4GEOM_ALLOC_EXPORT
  extern G4DLLEXPORT G4ThreadLocal G4Allocator<G4TouchableHistory> *aTouchableHistoryAllocator_G4MT_TLS_;
#else
  extern G4DLLIMPORT G4ThreadLocal G4Allocator<G4TouchableHistory> *aTouchableHistoryAllocator_G4MT_TLS_;
#endif

inline
void  G4TouchableHistory::UpdateYourself( G4VPhysicalVolume*   pPhysVol,
                                    const G4NavigationHistory* pHistory ) 
{ if (!aTouchableHistoryAllocator_G4MT_TLS_) aTouchableHistoryAllocator_G4MT_TLS_ = new G4Allocator<G4TouchableHistory>  ;
  fhistory = *pHistory;  
  G4AffineTransform tf(fhistory.GetTopTransform().Inverse());
  if( pPhysVol == 0 )
  {
    // This means that the track has left the World Volume.
    // Since the Navigation History does not already reflect this,
    // we must correct this problem here.
    //
    fhistory.SetFirstEntry(pPhysVol);
  }
  ftlate = tf.NetTranslation();
  frot = tf.NetRotation();
}

inline
G4int G4TouchableHistory::CalculateHistoryIndex( G4int stackDepth ) const
{ if (!aTouchableHistoryAllocator_G4MT_TLS_) aTouchableHistoryAllocator_G4MT_TLS_ = new G4Allocator<G4TouchableHistory>  ;
  return (fhistory.GetDepth()-stackDepth); // was -1
}

inline
G4VPhysicalVolume* G4TouchableHistory::GetVolume( G4int depth ) const
{ if (!aTouchableHistoryAllocator_G4MT_TLS_) aTouchableHistoryAllocator_G4MT_TLS_ = new G4Allocator<G4TouchableHistory>  ;
  return fhistory.GetVolume(CalculateHistoryIndex(depth));
}

inline
G4VSolid* G4TouchableHistory::GetSolid( G4int depth ) const
{ if (!aTouchableHistoryAllocator_G4MT_TLS_) aTouchableHistoryAllocator_G4MT_TLS_ = new G4Allocator<G4TouchableHistory>  ;
  return fhistory.GetVolume(CalculateHistoryIndex(depth))
                            ->GetLogicalVolume()->GetSolid();
}

inline
G4int G4TouchableHistory::GetReplicaNumber( G4int depth ) const
{ if (!aTouchableHistoryAllocator_G4MT_TLS_) aTouchableHistoryAllocator_G4MT_TLS_ = new G4Allocator<G4TouchableHistory>  ;
  return fhistory.GetReplicaNo(CalculateHistoryIndex(depth));
}

inline
G4int G4TouchableHistory::GetHistoryDepth()  const
{ if (!aTouchableHistoryAllocator_G4MT_TLS_) aTouchableHistoryAllocator_G4MT_TLS_ = new G4Allocator<G4TouchableHistory>  ;
  return  fhistory.GetDepth();
}

inline
G4int G4TouchableHistory::MoveUpHistory( G4int num_levels )
{ if (!aTouchableHistoryAllocator_G4MT_TLS_) aTouchableHistoryAllocator_G4MT_TLS_ = new G4Allocator<G4TouchableHistory>  ;
  G4int maxLevelsMove = fhistory.GetDepth();
  G4int minLevelsMove = 0;              // Cannot redescend today!
                                        // Soon it will be possible
                                        // by adding a data member here
                                        //     fCurrentDepth;
  if( num_levels > maxLevelsMove )
  {
    num_levels = maxLevelsMove;
  }
  else if( num_levels < minLevelsMove )
  {
    num_levels = minLevelsMove;
  }
  fhistory.BackLevel( num_levels ); 

  return num_levels;
}

inline
const G4NavigationHistory* G4TouchableHistory::GetHistory() const
{ if (!aTouchableHistoryAllocator_G4MT_TLS_) aTouchableHistoryAllocator_G4MT_TLS_ = new G4Allocator<G4TouchableHistory>  ;
  return &fhistory;
}

// There is no provision in case this class is subclassed.
// If it is subclassed, this will fail and may not give errors!
//
inline
void* G4TouchableHistory::operator new(size_t)
{  ;;;   if (!aTouchableHistoryAllocator_G4MT_TLS_) aTouchableHistoryAllocator_G4MT_TLS_ = new G4Allocator<G4TouchableHistory>  ; G4Allocator<G4TouchableHistory> &aTouchableHistoryAllocator = *aTouchableHistoryAllocator_G4MT_TLS_;  ;;;  
  return (void *) aTouchableHistoryAllocator.MallocSingle();
}

inline
void G4TouchableHistory::operator delete(void *aTH)
{  ;;;   if (!aTouchableHistoryAllocator_G4MT_TLS_) aTouchableHistoryAllocator_G4MT_TLS_ = new G4Allocator<G4TouchableHistory>  ; G4Allocator<G4TouchableHistory> &aTouchableHistoryAllocator = *aTouchableHistoryAllocator_G4MT_TLS_;  ;;;  
  aTouchableHistoryAllocator.FreeSingle((G4TouchableHistory *) aTH);
}

