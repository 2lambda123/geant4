//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
// $Id$
//
//  1 October 1997 J.Apostolakis Initial version. 
//                        
// ----------------------------------------------------------------------

#if defined G4GEOM_ALLOC_EXPORT
  extern G4DLLEXPORT G4ThreadLocal G4Allocator<G4NavigationLevelRep> *aNavigLevelRepAllocator_G4MT_TLS_;
#else
  extern G4DLLIMPORT G4ThreadLocal G4Allocator<G4NavigationLevelRep> *aNavigLevelRepAllocator_G4MT_TLS_;
#endif

// Accessors
// --------------

inline
G4VPhysicalVolume*
G4NavigationLevelRep::GetPhysicalVolume()
{ if (!aNavigLevelRepAllocator_G4MT_TLS_) aNavigLevelRepAllocator_G4MT_TLS_ = new G4Allocator<G4NavigationLevelRep>  ; 
  return sPhysicalVolumePtr; 
}

inline
const G4AffineTransform&
G4NavigationLevelRep::GetTransform() const 
{ if (!aNavigLevelRepAllocator_G4MT_TLS_) aNavigLevelRepAllocator_G4MT_TLS_ = new G4Allocator<G4NavigationLevelRep>  ; 
  return sTransform; 
} 

inline
const G4AffineTransform*
G4NavigationLevelRep::GetTransformPtr() const 
{ if (!aNavigLevelRepAllocator_G4MT_TLS_) aNavigLevelRepAllocator_G4MT_TLS_ = new G4Allocator<G4NavigationLevelRep>  ; 
  return &sTransform; 
} 

inline
EVolume G4NavigationLevelRep::GetVolumeType() const 
{ if (!aNavigLevelRepAllocator_G4MT_TLS_) aNavigLevelRepAllocator_G4MT_TLS_ = new G4Allocator<G4NavigationLevelRep>  ; 
  return sVolumeType; 
}

inline
G4int G4NavigationLevelRep::GetReplicaNo() const 
{ if (!aNavigLevelRepAllocator_G4MT_TLS_) aNavigLevelRepAllocator_G4MT_TLS_ = new G4Allocator<G4NavigationLevelRep>  ; 
  return sReplicaNo; 
}

inline
void G4NavigationLevelRep::AddAReference() 
{ if (!aNavigLevelRepAllocator_G4MT_TLS_) aNavigLevelRepAllocator_G4MT_TLS_ = new G4Allocator<G4NavigationLevelRep>  ;
  fCountRef++; 
}

inline
G4bool G4NavigationLevelRep::RemoveAReference() 
{ if (!aNavigLevelRepAllocator_G4MT_TLS_) aNavigLevelRepAllocator_G4MT_TLS_ = new G4Allocator<G4NavigationLevelRep>  ;
  return( --fCountRef <= 0 ); 
}

// There is no provision that this class is subclassed.
// If it is subclassed & new data members are added then the
// following "new" & "delete" will fail and give errors. 
//
inline
void* G4NavigationLevelRep::operator new(size_t)
{  ;;;   if (!aNavigLevelRepAllocator_G4MT_TLS_) aNavigLevelRepAllocator_G4MT_TLS_ = new G4Allocator<G4NavigationLevelRep>  ; G4Allocator<G4NavigationLevelRep> &aNavigLevelRepAllocator = *aNavigLevelRepAllocator_G4MT_TLS_;  ;;;  
  return (void *) aNavigLevelRepAllocator.MallocSingle();
}

inline
void G4NavigationLevelRep::operator delete(void *aLevelRep)
{  ;;;   if (!aNavigLevelRepAllocator_G4MT_TLS_) aNavigLevelRepAllocator_G4MT_TLS_ = new G4Allocator<G4NavigationLevelRep>  ; G4Allocator<G4NavigationLevelRep> &aNavigLevelRepAllocator = *aNavigLevelRepAllocator_G4MT_TLS_;  ;;;  
  aNavigLevelRepAllocator.FreeSingle((G4NavigationLevelRep *) aLevelRep);
}
