
inline G4bool G4AuxiliaryNavServices::CheckPointOnSurface( const G4VSolid* sampleSolid, 
                                                           const G4ThreeVector& localPoint, 
                                                           const G4ThreeVector* globalDirection, 
                                                           const G4AffineTransform& sampleTransform,
                                                           const G4bool  locatedOnEdge)
{
  G4ThreeVector localDirection, sampleNormal;
  G4bool enter=false;

  if (sampleSolid->Inside(localPoint)!=kOutside) 
  {
     if(locatedOnEdge && (globalDirection!=0))
     {
        // We are probably located on an edge.
        localDirection= sampleTransform.TransformAxis(*globalDirection); 

        // Check whether we enter the volume
        // 
        sampleNormal= sampleSolid->SurfaceNormal(localPoint);
        if ( sampleNormal.dot(localDirection) <= 0 )
        {
           if( sampleNormal.dot(localDirection) == 0 )
           {
              // We can't decide yet, let's make sure we're entering the solid
              //
              // If by a confusion we entered the next solid we find out now that
              // whether to leave or to enter.
              // This happens when we're no the surface or edge shared by two solids
              //
              // This has been introduced in order to resolve the endless looping for
              // G4BREPSolidPolyhedra being hit directly on the edge shared by two
              // G4BREPSolidPolyhedra objects
              // See Bugzilla report No. 185
              G4double distanceToIn = sampleSolid->DistanceToIn( localPoint, localDirection );
              if( distanceToIn != kInfinity )
              {
                 enter = true;
              } 
           }
           else
           {
              enter= true;
           }
        }
     }
     else
     {
        enter= true;
     }
  }
  return enter;
}

