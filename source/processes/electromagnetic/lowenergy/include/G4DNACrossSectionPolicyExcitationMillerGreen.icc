// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// -------------------------------------------------------------------
// $Id: G4DNACrossSectionPolicyExcitationMillerGreen.icc,v 1.1 2007-10-08 09:18:42 sincerti Exp $
// -------------------------------------------------------------------
//

#ifdef   G4DNACrossSectionPolicyExcitationMillerGreen_HH

#include "Randomize.hh"
#include "G4DNACrossSectionPolicyExcitationEmfietzoglou.hh"
#include "G4LogLogInterpolation.hh"

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

G4double G4DNACrossSectionPolicyExcitationMillerGreen
::CrossSection
(const G4Track& track)
{
  const G4DynamicParticle* particle = track.GetDynamicParticle();
  G4double k = particle->GetKineticEnergy();
  const G4ParticleDefinition* myParticleDefinition = track.GetDefinition();

  if (myParticleDefinition == G4Proton::ProtonDefinition()) 
  {
    name = "ProtonCrossSectionExcitationMillerGreen";
    lowEnergyLimit = 10. * eV;
    highEnergyLimit = 500 * keV;
    zeroBelowLowEnergyLimit = true;
    zeroAboveHighEnergyLimit = true;

    kineticEnergyCorrection = 1.;

    slaterEffectiveCharge[0] = 0.;
    slaterEffectiveCharge[1] = 0.;
    slaterEffectiveCharge[2] = 0.;
    sCoefficient[0] = 0.;
    sCoefficient[1] = 0.;
    sCoefficient[2] = 0.;

  }

  G4DNAGenericIonsManager *instance;
  instance = G4DNAGenericIonsManager::Instance();

  if (myParticleDefinition == instance->GetIon("alpha++") ) 
  {
    name = "AlphaPlusPlusCrossSectionExcitationMillerGreen";
    lowEnergyLimit = 1. * keV;
    highEnergyLimit = 10 * MeV;
    zeroBelowLowEnergyLimit = true;
    zeroAboveHighEnergyLimit = true;

    kineticEnergyCorrection = 0.9382723/3.727417;

    slaterEffectiveCharge[0]=0.;
    slaterEffectiveCharge[1]=0.;
    slaterEffectiveCharge[2]=0.;
    sCoefficient[0]=0.;
    sCoefficient[1]=0.;
    sCoefficient[2]=0.;
  }

  if (myParticleDefinition == instance->GetIon("alpha+") ) 
  {
    name = "AlphaPlusCrossSectionExcitationMillerGreen";
    lowEnergyLimit = 1. * keV;
    highEnergyLimit = 10 * MeV;
    zeroBelowLowEnergyLimit = true;
    zeroAboveHighEnergyLimit = true;

    kineticEnergyCorrection = 0.9382723/3.727417;

    slaterEffectiveCharge[0]=2.0;
    slaterEffectiveCharge[1]=1.15;
    slaterEffectiveCharge[2]=1.15;
    sCoefficient[0]=0.7;
    sCoefficient[1]=0.15;
    sCoefficient[2]=0.15;
  }

  if (myParticleDefinition == instance->GetIon("helium") ) 
  {
    name = "HeliumCrossSectionExcitationMillerGreen";
    lowEnergyLimit = 1. * keV;
    highEnergyLimit = 10 * MeV;
    zeroBelowLowEnergyLimit = true;
    zeroAboveHighEnergyLimit = true;

    kineticEnergyCorrection = 0.9382723/3.727417;

    slaterEffectiveCharge[0]=1.7;
    slaterEffectiveCharge[1]=1.15;
    slaterEffectiveCharge[2]=1.15;
    sCoefficient[0]=0.5;
    sCoefficient[1]=0.25;
    sCoefficient[2]=0.25;
  }
  
  // Assume that the material is water; proper algorithm to calculate correctly for any material to be inserted here
  G4int z = 10;

  // Take into account 5 excitation levels (D. Emfietzoglou et al., NIM B 193, pp. 71-78, 2002.
  G4int i = 5;

  // Energy limits 
  if (k < lowEnergyLimit)
  {
   if (zeroBelowLowEnergyLimit)
    return 0;
  
   k=lowEnergyLimit;
  }
  else if (k > highEnergyLimit)
  {
   if (zeroAboveHighEnergyLimit)
    return 0;
    
   k=highEnergyLimit;
  }
  //

  G4double crossSection(0.);

  while (i>0)
    {
      i--;
      crossSection += PartialCrossSection(k,z,i,myParticleDefinition);
      
    }

   // add ONE or TWO electron-water excitation for alpha+ and helium
  
    if ( myParticleDefinition == instance->GetIon("alpha+") 
	       ||
	 myParticleDefinition == instance->GetIon("helium")
        ) 
      {
       G4double totalCrossSectionElectronExcitationEmfietzoglou = 0;
       G4DNACrossSectionPolicyExcitationEmfietzoglou* cross = 
         new G4DNACrossSectionPolicyExcitationEmfietzoglou;
       G4int i=5;
       while (i>0)
       {
         i--;
         totalCrossSectionElectronExcitationEmfietzoglou +=cross->PartialCrossSection(k*0.511/3728, i);
       }
       if ( myParticleDefinition == instance->GetIon("alpha+") ) 
           crossSection = crossSection +  totalCrossSectionElectronExcitationEmfietzoglou ;
       if ( myParticleDefinition == instance->GetIon("helium") ) 
           crossSection = crossSection + 2*totalCrossSectionElectronExcitationEmfietzoglou ;
       delete cross;
      }      
     
 return crossSection;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

G4double G4DNACrossSectionPolicyExcitationMillerGreen
::PartialCrossSection
(G4double k, G4int z, G4int excitationLevel,const G4ParticleDefinition* particle)
{
   //                               ( ( z * aj ) ^ omegaj ) * ( t - ej ) ^ nu
  // sigma(t) = zEff^2 * sigma0 * --------------------------------------------
  //                               jj ^ ( omegaj + nu ) + t ^ ( omegaj + nu )
  //
  // where t is the kinetic energy corrected by Helium mass over proton mass for Helium ions
  //
  // zEff is:
  //  1 for protons
  //  2 for alpha++
  //  and  2 - c1 S_1s - c2 S_2s - c3 S_2p for alpha+ and He
  //
  // Dingfelder et al., RPC 59, 255-275, 2000 from Miller and Green (1973)
  // Formula (34) and Table 2
  
  const G4double sigma0(1.E+8 * barn);
  const G4double nu(1.);
  const G4double aj[]={876.*eV, 2084.* eV, 1373.*eV, 692.*eV, 900.*eV};
  const G4double jj[]={19820.*eV, 23490.*eV, 27770.*eV, 30830.*eV, 33080.*eV};
  const G4double omegaj[]={0.85, 0.88, 0.88, 0.78, 0.78};
  
  G4double tCorrected;
  tCorrected = k * kineticEnergyCorrection;

  G4double numerator;
  numerator = std::pow(z * aj[excitationLevel], omegaj[excitationLevel]) * 
    std::pow(tCorrected - EnergyConstant(excitationLevel), nu);

  G4double power;
  power = omegaj[excitationLevel] + nu;

  G4double denominator;
  denominator = std::pow(jj[excitationLevel], power) + std::pow(tCorrected, power);

  G4double zEff = particle->GetPDGCharge() / eplus + particle->GetLeptonNumber();
  

  zEff -= ( sCoefficient[0] * S_1s(k, EnergyConstant(excitationLevel), slaterEffectiveCharge[0], 1.) +
	    sCoefficient[1] * S_2s(k, EnergyConstant(excitationLevel), slaterEffectiveCharge[1], 2.) +
	    sCoefficient[2] * S_2p(k, EnergyConstant(excitationLevel), slaterEffectiveCharge[2], 2.) );

  G4double cross = sigma0 * zEff * zEff * numerator / denominator;

  return cross;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

G4int G4DNACrossSectionPolicyExcitationMillerGreen
::RandomizePartialCrossSection
(G4double k, G4int z, const G4ParticleDefinition* particle)
 {
  G4int i(5);
  G4double values[5];
  G4double value(0);

  G4DNAGenericIonsManager *instance;
  instance = G4DNAGenericIonsManager::Instance();

  // ALPHA++

  if ( particle == instance->GetIon("alpha++"))
  { 
    while (i>0)
    {
     i--;
     values[i]=PartialCrossSection(k, z, i, particle);
     value+=values[i];
    }
  
    value*=G4UniformRand();
  
    i=5;
    while (i>0)
    {
     i--;
   
     if (values[i]>value)
      return i;
  
     value-=values[i];
    }
  }
 
 // add ONE or TWO electron-water excitation for alpha+ and helium
   
    if ( particle == instance->GetIon("alpha+") 
	       ||
	 particle == instance->GetIon("helium")
        ) 
      {
       G4DNACrossSectionPolicyExcitationEmfietzoglou* cross 
          = new G4DNACrossSectionPolicyExcitationEmfietzoglou;

       while (i>0)
       {
         i--;
         if (particle == instance->GetIon("alpha+")) 
	 	values[i]=PartialCrossSection(k, z, i, particle)+cross->PartialCrossSection(k*0.511/3728, i);
         if (particle == instance->GetIon("helium")) 
	 	values[i]=PartialCrossSection(k, z, i, particle)+2*cross->PartialCrossSection(k*0.511/3728, i);
         value+=values[i];
       }
  
       value*=G4UniformRand();
  
       i=5;
       while (i>0)
       {
         i--;
   
         if (values[i]>value)
         { delete cross; return i;}
  
         value-=values[i];
       }
      }      
   
  return 0;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

G4double G4DNACrossSectionPolicyExcitationMillerGreen
::S_1s
(G4double t,G4double energyTransferred,G4double slaterEffectiveCharge,G4double shellNumber)
{
  // 1 - e^(-2r) * ( 1 + 2 r + 2 r^2)
  // Dingfelder, in Chattanooga 2005 proceedings, formula (7)
 
  G4double r = R(t, energyTransferred, slaterEffectiveCharge, shellNumber);
  G4double value = 1. - std::exp(-2 * r) * ( ( 2. * r + 2. ) * r + 1. );
  
  return value;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

G4double G4DNACrossSectionPolicyExcitationMillerGreen
::S_2s
(G4double t,G4double energyTransferred,G4double slaterEffectiveCharge,G4double shellNumber)
{
  // 1 - e^(-2 r) * ( 1 + 2 r + 2 r^2 + 2 r^4)
  // Dingfelder, in Chattanooga 2005 proceedings, formula (8)

  G4double r = R(t, energyTransferred, slaterEffectiveCharge, shellNumber);
  G4double value =  1. - std::exp(-2 * r) * (((2. * r * r + 2.) * r + 2.) * r + 1.);

  return value;
 
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

G4double G4DNACrossSectionPolicyExcitationMillerGreen
::S_2p
(G4double t,G4double energyTransferred,G4double slaterEffectiveCharge,G4double shellNumber)
{
  // 1 - e^(-2 r) * ( 1 + 2 r + 2 r^2 + 4/3 r^3 + 2/3 r^4)
  // Dingfelder, in Chattanooga 2005 proceedings, formula (9)

  G4double r = R(t, energyTransferred, slaterEffectiveCharge, shellNumber);
  G4double value =  1. - std::exp(-2 * r) * (((( 2./3. * r + 4./3.) * r + 2.) * r + 2.) * r  + 1.);

  return value;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

G4double G4DNACrossSectionPolicyExcitationMillerGreen
::R
(G4double t,G4double energyTransferred,G4double slaterEffectiveCharge,G4double shellNumber) 
{
  // tElectron = m_electron / m_alpha * t
  // Hardcoded in Riccardo's implementation; to be corrected
  // Dingfelder, in Chattanooga 2005 proceedings, p 4

  G4double tElectron = 0.511/3728. * t;
  G4double value = 2. * tElectron * slaterEffectiveCharge / (energyTransferred * shellNumber);
  
  return value;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

G4double G4DNACrossSectionPolicyExcitationMillerGreen
::EnergyConstant
(G4int excitationLevel)
{
  // Dingfelder et al., RPC 59, 255-275, 2000 from Miller and Green (1973)
  // Formula (33) and Table 2

  const G4double ej[]={8.17*eV, 10.13*eV, 11.31*eV, 12.91*eV, 14.50*eV};

  // The numbers above are inconsistent with the equivalent in electron ExcitationEmfietzoglou
  // listed below; this difference must be clarified
  //  const G4double ej[] ={ 8.22*eV, 10.00*eV, 11.24*eV, 12.61*eV, 13.77*eV};

  G4double e = ej[excitationLevel];
  
  return e;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

#endif

