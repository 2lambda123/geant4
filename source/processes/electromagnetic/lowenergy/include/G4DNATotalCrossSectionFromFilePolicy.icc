//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
//
// $Id: G4DNATotalCrossSectionFromFilePolicy.icc,v 1.3 2005-09-10 09:34:33 capra Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//

#ifdef   G4DNATOTALCROSSSECTIONFROMFILEPOLICY_HH
 #include "G4Electron.hh"

 #include "Randomize.hh"

 template <typename IncomingParticlePolicy, typename DataFilePolicy, typename InterpolationAlgorithmPolicy>
                                        G4DNATotalCrossSectionFromFilePolicy<IncomingParticlePolicy, DataFilePolicy, InterpolationAlgorithmPolicy> :: G4DNATotalCrossSectionFromFilePolicy()
 :
  dataset(0),
  valuesBuffer(0)
 {
 }
 
 template <typename IncomingParticlePolicy, typename DataFilePolicy, typename InterpolationAlgorithmPolicy>
                                        G4DNATotalCrossSectionFromFilePolicy<IncomingParticlePolicy, DataFilePolicy, InterpolationAlgorithmPolicy> :: ~G4DNATotalCrossSectionFromFilePolicy()
 {
  Free();
 }

 template <typename IncomingParticlePolicy, typename DataFilePolicy, typename InterpolationAlgorithmPolicy>
 G4double                               G4DNATotalCrossSectionFromFilePolicy<IncomingParticlePolicy, DataFilePolicy, InterpolationAlgorithmPolicy> :: TotalCrossSection(G4double k, G4int /* z */) const
 {
  if (!dataset)
  {
   G4Exception("G4DNATotalCrossSectionFromFilePolicy<>::TotalCrossSection: dataset not loaded");
   return 0;
  }
 
  if (k < dataFilePolicy.lowEnergyLimit)
  {
   if (dataFilePolicy.zeroBelowLowEnergyLimit)
    return 0;
  
   k=dataFilePolicy.lowEnergyLimit;
  }
  else if (k > dataFilePolicy.highEnergyLimit)
  {
   if (dataFilePolicy.zeroAboveHighEnergyLimit)
    return 0;
    
   k=dataFilePolicy.highEnergyLimit;
  }

  return dataset->FindValue(k);
 }
 
 template <typename IncomingParticlePolicy, typename DataFilePolicy, typename InterpolationAlgorithmPolicy>
 G4int                                  G4DNATotalCrossSectionFromFilePolicy<IncomingParticlePolicy, DataFilePolicy, InterpolationAlgorithmPolicy> :: RandomizePartialCrossSection(G4double k, G4int /* z */)
 {
  if (!dataset)
  {
   G4Exception("G4DNATotalCrossSectionFromFilePolicy<>::RandomizePartialCrossSection: dataset not loaded");
   return 0;
  }
  
  const size_t n(dataset->NumberOfComponents());
  size_t i(n);
  G4double value(0);
  
  while (i>0)
  {
   i--;
   valuesBuffer[i]=dataset->GetComponent(i)->FindValue(k);
   value+=valuesBuffer[i];
  }
  
  value*=G4UniformRand();
  
  i=n;
  
  while (i>0)
  {
   i--;
   
   if (valuesBuffer[i]>value)
    return i;
  
   value-=valuesBuffer[i];
  }
  
  return 0;
 }
 
 template <typename IncomingParticlePolicy, typename DataFilePolicy, typename InterpolationAlgorithmPolicy>
 G4int                                  G4DNATotalCrossSectionFromFilePolicy<IncomingParticlePolicy, DataFilePolicy, InterpolationAlgorithmPolicy> :: NumberOfPartialCrossSections(void)
 {
  if (!dataset)
  {
   G4Exception("G4DNATotalCrossSectionFromFilePolicy<>::NumberOfPartialCrossSections: dataset not loaded");
   return 0;
  }
  
  return dataset->NumberOfComponents();
 }

 template <typename IncomingParticlePolicy, typename DataFilePolicy, typename InterpolationAlgorithmPolicy>
 void                                   G4DNATotalCrossSectionFromFilePolicy<IncomingParticlePolicy, DataFilePolicy, InterpolationAlgorithmPolicy> :: BuildTotalCrossSection(void)
 {
  Free();
  
  dataset=new G4DNACrossSectionDataSet(new InterpolationAlgorithmPolicy, dataFilePolicy.dataFileEnergyUnit, dataFilePolicy.dataFileCrossSectionUnit);
  dataset->LoadData(dataFilePolicy.dataFileName);
  
  valuesBuffer=new G4double[dataset->NumberOfComponents()];
 }

 template <typename IncomingParticlePolicy, typename DataFilePolicy, typename InterpolationAlgorithmPolicy>
 void                                   G4DNATotalCrossSectionFromFilePolicy<IncomingParticlePolicy, DataFilePolicy, InterpolationAlgorithmPolicy> :: Free(void)
 {
  if (dataset)
   delete dataset;
   
  if (valuesBuffer)
   delete[] valuesBuffer;
 }
#endif /* G4DNATOTALCROSSSECTIONFROMFILEPOLICY_HH */
