//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
//
// $Id: G4DNAProtonChargeDecreaseTotalCrossSectionPolicy.icc,v 1.1 2005-09-15 09:04:21 zfrancis Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//

#ifdef   G4DNAPROTONCHARGEDECREASETOTALCROSSSECTIONPOLICY_HH
 #include "Randomize.hh"

 template <typename IncomingParticlePolicy, typename EnergyLimitsPolicy>
 G4double                               G4DNAProtonChargeDecreaseTotalCrossSectionPolicy<IncomingParticlePolicy, EnergyLimitsPolicy> :: TotalCrossSection(G4double k, G4int z ) const
 {
  if (k < EnergyLimitsPolicy::lowEnergyLimit)
  {
   if (EnergyLimitsPolicy::zeroBelowLowEnergyLimit)
    return 0;
  
   k=EnergyLimitsPolicy::lowEnergyLimit;
  }
  else if (k > EnergyLimitsPolicy::highEnergyLimit)
  {
   if (EnergyLimitsPolicy::zeroAboveHighEnergyLimit)
    return 0;
    
   k=EnergyLimitsPolicy::highEnergyLimit;
  }

  G4int dummy;
  dummy=z*1; //Warning dummy
  
  G4double totalCrossSection(0.);
  G4double a[]={-0.180, -3.600};
  G4double b[]={-18.22, -1.997};
  G4double c[]={0.215, 3.450};
  G4double d[]={3.550, 5.251}; 
  G4double x = log10(k/eV);
  G4double y;

  if(x<c[1]) y= (a[0]*x +b[0])*StepFunction(d[1]-x) + (a[1]*x+b[1])*StepFunction(x-d[1]);
  else if(x>=c[1]) y= (a[0]*x +b[0]-c[0]*pow(x-c[1],d[0]))*StepFunction(d[1]-x) + (a[1]*x+b[1])*StepFunction(x-d[1]);  
  totalCrossSection = pow(10,y)*m*m; 

 return totalCrossSection;
 }
 
 template <typename IncomingParticlePolicy, typename EnergyLimitsPolicy>
 G4int                                  G4DNAProtonChargeDecreaseTotalCrossSectionPolicy<IncomingParticlePolicy, EnergyLimitsPolicy> :: StepFunction(G4double x) const
 {
   if(x<0.) return(0);
   else return(1);
 }
 
 
 template <typename IncomingParticlePolicy, typename EnergyLimitsPolicy>
 G4int                                  G4DNAProtonChargeDecreaseTotalCrossSectionPolicy<IncomingParticlePolicy, EnergyLimitsPolicy> :: RandomizePartialCrossSection(G4double k) const
 {
  G4double dummy;
  dummy = k; // Warning Dummy
  
  G4double probability[] = {0.38, 0.29, 0.24, 0.08}; // Kshell is neglected
  G4double randValue = G4UniformRand();              // and the 4th Shell is not considered for the moment
  G4double value;
    for(G4int i=0; i<3; i++)                         // So Only the three Valence Shells of water molecule 
    {                                                // are to be considered here as a first approach
    if(randValue<probability[i]+value) {return(i);}
    value+=probability[i];
    }
 return 0;
 }
 
 template <typename IncomingParticlePolicy, typename EnergyLimitsPolicy>
 G4double                               G4DNAProtonChargeDecreaseTotalCrossSectionPolicy<IncomingParticlePolicy, EnergyLimitsPolicy> :: WaterBindingEnergy(G4int levelIndex) const
 {
  const G4double ej[]={10.73*eV, 13.39*eV, 16.05*eV, 32.30*eV, 539.*eV};
  return ej[levelIndex];
 }

#endif /* G4DNAMILLERANDGREENEXCITATIONTOTALCROSSSECTIONPOLICY_HH */
