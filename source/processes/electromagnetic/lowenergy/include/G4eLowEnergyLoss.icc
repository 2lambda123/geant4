//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
//
// $Id: G4eLowEnergyLoss.icc,v 1.4 2002-03-28 11:48:58 vnivanch Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
// ---------------------------------------------------------------
//      GEANT 4 class inlined methods file 
//
//      History: based on object model of
//      2nd December 1995, G.Cosmo
//      ------------ G4eLowEnergyLoss physics process ------------
//                  by Laszlo Urban, 20 March 1997
// ***************************************************************
// It is the first implementation of the NEW UNIFIED ENERGY LOSS PROCESS.               
// It calculates the energy loss of e+/e-.
// -------------------------------------------------------------
//
// 08-09-98: cleanup
// 28-03-02  V.Ivanchenko add fluorescence flag
//
// ---------------------------------------------------------------

inline G4double G4eLowEnergyLoss::GetConstraints(
                                      const G4DynamicParticle* aParticle,
                                            G4Material* aMaterial)
{
  G4double StepLimit;
  // returns the Step limit
  // dRoverRange is the max. allowed relative range loss in one Step
  // it calculates dEdx and the range as well....

  const G4ParticleDefinition* ParticleType=aParticle->GetDefinition();

  Charge = aParticle->GetDefinition()->GetPDGCharge();
  if(Charge != lastCharge)
  {
    lastCharge = Charge ;

  }

  G4double KineticEnergy = aParticle->GetKineticEnergy();

  fdEdx = G4EnergyLossTables::GetDEDX(ParticleType,KineticEnergy,aMaterial);
  fRangeNow =
           G4EnergyLossTables::GetRange(ParticleType,KineticEnergy,aMaterial);

  // compute the (random) Step limit
  if (fRangeNow>finalRange)
  {
    StepLimit = c1lim*fRangeNow+c2lim+c3lim/fRangeNow;
    //randomise this value
    if (rndmStepFlag) StepLimit = finalRange +
                          (StepLimit-finalRange)*G4UniformRand();
    if (StepLimit > fRangeNow) StepLimit = fRangeNow;
  }
  else StepLimit = fRangeNow;

  return StepLimit;
}

//    

inline G4double G4eLowEnergyLoss::GetContinuousStepLimit(
                                               const G4Track& track,
                                               G4double,
                                               G4double currentMinimumStep,
                                               G4double&)
{
 
  G4double Step =
    GetConstraints(track.GetDynamicParticle(),track.GetMaterial());

  if ((Step>0.0)&&(Step<currentMinimumStep)) currentMinimumStep = Step;

  return Step ;
}

//    
inline G4bool G4eLowEnergyLoss::IsApplicable(const G4ParticleDefinition&
                                                     particle)
{
  return(   (&particle == G4Electron::Electron())
           ||(&particle == G4Positron::Positron()) );
}

inline void G4eLowEnergyLoss::ActivateFluorescence(G4bool val)
{
  theFluo = val; 
}

inline G4bool G4eLowEnergyLoss::Fluorescence() const
{
  return theFluo;
}

//    

