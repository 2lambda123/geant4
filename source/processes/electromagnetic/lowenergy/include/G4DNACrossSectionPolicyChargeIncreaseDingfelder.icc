// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// -------------------------------------------------------------------
// $Id: G4DNACrossSectionPolicyChargeIncreaseDingfelder.icc,v 1.1 2007-10-08 09:18:42 sincerti Exp $
// -------------------------------------------------------------------
//

#ifdef G4DNACrossSectionPolicyChargeIncreaseDingfelder_HH

#include "Randomize.hh"

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

G4double G4DNACrossSectionPolicyChargeIncreaseDingfelder
::CrossSection
(const G4Track& track)
{
  const G4DynamicParticle* particle = track.GetDynamicParticle();
  G4double k = particle->GetKineticEnergy();
  const G4ParticleDefinition* myParticleDefinition = track.GetDefinition();

  G4DNAGenericIonsManager *instance;
  instance = G4DNAGenericIonsManager::Instance();

  if (myParticleDefinition == instance->GetIon("hydrogen"))
  {
   lowEnergyLimit = 1 * keV;
   highEnergyLimit = 10 * MeV;
   zeroBelowLowEnergyLimit = true ;
   zeroAboveHighEnergyLimit = true ;
  }

  if (myParticleDefinition == instance->GetIon("alpha+"))
  {
   lowEnergyLimit = 1 * keV;
   highEnergyLimit = 10 * MeV;
   zeroBelowLowEnergyLimit = true ;
   zeroAboveHighEnergyLimit = true ;

   f0[0]=1.;
   a0[0]=2.25;
   a1[0]=-0.75;
   b0[0]=-32.10;
   c0[0]=0.600;
   d0[0]=2.40;
   x0[0]=4.60;

   x1[0]=-1.;
   b1[0]=-1.;
   
   NumberOfPartialCrossSections=1;
  }

  if (myParticleDefinition == instance->GetIon("helium"))
  {
   lowEnergyLimit = 1 * keV;
   highEnergyLimit = 10 * MeV;
   zeroBelowLowEnergyLimit = true ;
   zeroAboveHighEnergyLimit = true ;

   f0[0]=1.;
   a0[0]=2.25;
   a1[0]=-0.75;
   b0[0]=-30.93;
   c0[0]=0.590;
   d0[0]=2.35;
   x0[0]=4.29;

   f0[1]=1.;
   a0[1]=2.25;
   a1[1]=-0.75;
   b0[1]=-32.61;
   c0[1]=0.435;
   d0[1]=2.70;
   x0[1]=4.45;

   x1[0]=-1.;
   b1[0]=-1.;

   x1[1]=-1.;
   b1[1]=-1.;

   NumberOfPartialCrossSections=2;
  }

    if (k < lowEnergyLimit)
  {
   if (zeroBelowLowEnergyLimit)
    return 0;
  
   k=lowEnergyLimit;
  }
  else if (k > highEnergyLimit)
  {
   if (zeroAboveHighEnergyLimit)
    return 0;
    
   k=highEnergyLimit;
  }

  if (myParticleDefinition == instance->GetIon("hydrogen"))
  {
   G4double totalCrossSection(0.);
   const  G4double aa=2.835;
   const  G4double bb=0.310;
   const  G4double cc=2.100;
   const  G4double dd=0.760;
   const  G4double fac=1.0e-18;
   const  G4double rr=13.606*eV;  
 
   G4double t = k / (proton_mass_c2/electron_mass_c2); 
   G4double x = t / rr; 
   G4double sigmal = 4.0*pi*Bohr_radius/nm*Bohr_radius/nm*fac*cc*(pow(x,dd));
   G4double sigmah = 4.0*pi*Bohr_radius/nm*Bohr_radius/nm*fac*(aa*log(1.0+x)+bb)/x;
   totalCrossSection = 1.0/(1.0/sigmal + 1.0/sigmah);

   return totalCrossSection*m*m;  
  }

  G4int i(NumberOfPartialCrossSections);
  G4double totalCrossSection(0.);
  
  while (i>0)
  {
   i--;
   totalCrossSection+=PartialCrossSection(k, i);
  }

  return totalCrossSection;
}
 
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

G4int G4DNACrossSectionPolicyChargeIncreaseDingfelder
::RandomizePartialCrossSection
(G4double k)
{
  const G4int n(NumberOfPartialCrossSections);
  G4double * values(new G4double[n]);
  G4double value(0);
  G4int i(n);
  
  while (i>0)
  {
   i--;
   values[i]=PartialCrossSection(k, i);
   value+=values[i];
  }
  
  value*=G4UniformRand();
  
  i=n;
  while (i>0)
  {
   i--;
   
   if (values[i]>value)
    break;
  
   value-=values[i];
  }
  
  delete[] values;
  
  return i;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

G4double G4DNACrossSectionPolicyChargeIncreaseDingfelder
::PartialCrossSection
(G4double k, G4int index)
 {
  //
  // sigma(T) = f0 10 ^ y(log10(T/eV))
  //
  //         /  a0 x + b0                    x < x0
  //         |
  // y(x) = <   a0 x + b0 - c0 (x - x0)^d0   x0 <= x < x1
  //         |
  //         \  a1 x + b1                    x >= x1
  //
  //
  // f0, a0, a1, b0, b1, c0, d0, x0, x1 are parameters that change for protons and helium (0, +, ++)
  //
  // f0 has been added to the code in order to manage partial (shell-dependent) cross sections (if no shell dependence is present. f0=1. Sum of f0 over the considered shells should give 1)
  //
  // From Rad. Phys. and Chem. 59 (2000) 255-275, M. Dingfelder et al.
  // Inelastic-collision cross sections of liquid water for interactions of energetic proton
  //
  
  if (x1[index]<x0[index])
  {
   //
   // if x1 < x0 means that x1 and b1 will be calculated with the following formula (this piece of code is run on all alphas and not on protons)
   //
   // x1 = x0 + ((a0 - a1)/(c0 * d0)) ^ (1 / (d0 - 1))
   //
   // b1 = (a0 - a1) * x1 + b0 - c0 * (x1 - x0) ^ d0
   //
 
   x1[index]=x0[index] + std::pow((a0[index] - a1[index]) / (c0[index] * d0[index]), 1. / (d0[index] - 1.));
   b1[index]=(a0[index] - a1[index]) * x1[index] + b0[index] - c0[index] * std::pow(x1[index] - x0[index], d0[index]);
  }

  G4double x(std::log10(k/eV));
  G4double y;
  
  if (x<x0[index])
   y=a0[index] * x + b0[index];
  else if (x<x1[index])
   y=a0[index] * x + b0[index] - c0[index] * std::pow(x - x0[index], d0[index]);
  else
   y=a1[index] * x + b1[index];

  return f0[index] * std::pow(10., y)*m*m;

}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....
  
#endif
