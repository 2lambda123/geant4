// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// -------------------------------------------------------------------
// $Id: G4DNACrossSectionPolicyExcitationBorn.icc,v 1.1 2007-10-08 09:18:42 sincerti Exp $
// -------------------------------------------------------------------
//

#ifdef G4DNACrossSectionPolicyExcitationBorn_HH

#include "Randomize.hh"
#include "G4LogLogInterpolation.hh"

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

G4double  G4DNACrossSectionPolicyExcitationBorn
::CrossSection
(const G4Track& track)
{
  dataset = 0;
  valuesBuffer = 0;
  
  const G4DynamicParticle* particle = track.GetDynamicParticle();
  G4double k = particle->GetKineticEnergy();

  BuildTotalCrossSection(track.GetDefinition());
  
  if (!dataset)
  {
   G4Exception("G4DNACrossSectionPolicyExcitationBorn::CrossSection: dataset not loaded");
   return 0;
  }
 
  if (k < lowEnergyLimit)
  {
   if (zeroBelowLowEnergyLimit)
    {Free(); return 0;}
  
   k=lowEnergyLimit;
  }
  else if (k > highEnergyLimit)
  {
   if (zeroAboveHighEnergyLimit)
    {Free(); return 0;}
    
   k=highEnergyLimit;
  }

  G4double result = dataset->FindValue(k); // no electron interaction
  Free();
  return result;
 }

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

G4int G4DNACrossSectionPolicyExcitationBorn
::RandomizePartialCrossSection
(G4double k, G4int /*z*/, const G4ParticleDefinition* particle)
{
  if (!dataset)
  {
   G4Exception("G4DNACrossSectionPolicyExcitationBorn::RandomizePartialCrossSection: dataset not loaded");
   return 0;
  }
  
  dataset = 0;
  valuesBuffer = 0;
  BuildTotalCrossSection(particle);
  
  const size_t n(dataset->NumberOfComponents());
  size_t i(n);
  G4double value(0);
  
  while (i>0)
  {
   i--;
   valuesBuffer[i]=dataset->GetComponent(i)->FindValue(k);
   value+=valuesBuffer[i];
  }
  
  value*=G4UniformRand();
  
  i=n;
  
  while (i>0)
  {
   i--;
   
   if (valuesBuffer[i]>value)
    {Free(); return i;}
  
   value-=valuesBuffer[i];
  }
  
  return 0;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

G4int G4DNACrossSectionPolicyExcitationBorn
::NumberOfPartialCrossSections
(void)
{
  if (!dataset)
  {
   G4Exception("G4DNACrossSectionPolicyExcitationBorn::NumberOfPartialCrossSections : dataset not loaded");
   return 0;
  }
  
  return dataset->NumberOfComponents();
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

void G4DNACrossSectionPolicyExcitationBorn
::BuildTotalCrossSection
(const G4ParticleDefinition* particle)
{
  Free();
  
  if (particle == G4Proton::ProtonDefinition()) 
  {
    name = "pCrossSectionPolicyExcitationBorn";
    lowEnergyLimit = 500. * keV;
    highEnergyLimit = 10 * MeV;
    zeroBelowLowEnergyLimit = true;
    zeroAboveHighEnergyLimit = true;
    dataset=new G4DNACrossSectionDataSet(new G4LogLogInterpolation, eV,
    (1e-22/3.343)*m*m );
    dataset->LoadData("ProtonCrossSectionExcitationBorn");
    valuesBuffer=new G4double[dataset->NumberOfComponents()];
  }
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

G4double G4DNACrossSectionPolicyExcitationBorn
::EnergyConstant
(G4int excitationLevelIndex)
{
 const G4double excitationEnergy[]={8.22*eV, 10.00*eV, 11.24*eV, 12.61*eV, 13.77*eV};

 return(excitationEnergy[excitationLevelIndex]);
}
 
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

void G4DNACrossSectionPolicyExcitationBorn
::Free
(void)
{

  if (dataset)
   delete dataset;

  if (valuesBuffer)
   delete[] valuesBuffer;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....
 
#endif
