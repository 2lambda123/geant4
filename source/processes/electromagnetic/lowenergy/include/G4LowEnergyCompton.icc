// This code implementation is the intellectual property of
// the RD44 GEANT4 collaboration.
//
// By copying, distributing or modifying the Program (or any work
// based on the Program) you indicate your acceptance of this statement,
// and all its terms.
//
// $Id: G4LowEnergyCompton.icc,v 1.5 1999-06-04 12:55:04 aforti Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
// 
// ---------------------------------------------------------------
//      GEANT 4 class inlined methods file
//
//      For information related to this code contact:
//      CERN, CN Division, ASD group
//      History: first implementation, based on object model of
//      2nd December 1995, G.Cosmo
//      ------------ G4LowEnergyCompton physics process ---------
//                   by Michel Maire, April 1996
// ***************************************************************

inline G4bool 
G4LowEnergyCompton::IsApplicable(const G4ParticleDefinition& particle){

   return ( &particle == G4Gamma::Gamma() ); 
}

inline G4int G4LowEnergyCompton::FindBinLocation(const G4double arg, 
						 const G4PhysicsVector* vec){

  if(!vec){

    G4Exception("G4LowEnergy: FindBinLocation: Vector Empty "
        "probably the program hasn't found data files or data files are empty");
   }
	
  G4int numberOfBin = vec->GetVectorLength();
  G4int lowerBound = 0;
  G4int upperBound = numberOfBin-1;

  do {

    G4int midBin = (lowerBound + upperBound)/2;

    if( arg < vec->GetLowEdgeEnergy(midBin) )
       upperBound = midBin-1;
    else

       lowerBound = midBin+1;
  } while (lowerBound <= upperBound); 

  return upperBound;
}

inline G4double 
G4LowEnergyCompton::DataLogInterpolation(const G4double Argument, 
					 const G4double TableIndex, 
					 const G4PhysicsTable* Table){


  G4PhysicsVector* theVec = 0;
  theVec = (*Table)(TableIndex);

  G4int theLoc = FindBinLocation(Argument, theVec); 

  G4double val1 = (*theVec)(theLoc), val2 = (*theVec)(theLoc+1);
  G4double arg1 = theVec->GetLowEdgeEnergy(theLoc), arg2 = theVec->GetLowEdgeEnergy(theLoc+1);

  if(arg1 == 0.0) arg1 = 1e-17;	if(val1 == 0.0) val1 = 1e-17;

  G4double theVal = (log10(val1)*log10(arg2/Argument)
		     +log10(val2)*log10(Argument/arg1))/log10(arg2/arg1);
  
  theVal = pow(10,theVal);
  return theVal;
}

inline G4double 
G4LowEnergyCompton::GetMeanFreePath(const G4Track& aTrack, G4double, G4ForceCondition*){

  // returns the gamma mean free path in GEANT4 internal units
  const G4DynamicParticle* aDynamicGamma = aTrack.GetDynamicParticle();
  G4double GammaEnergy = aDynamicGamma->GetKineticEnergy();
  G4Material* aMaterial = aTrack.GetMaterial();

  G4bool isOutRange ;
  
  if(GammaEnergy > HighestEnergyLimit){
    MeanFreePath = DBL_MAX;

  }
  else {

    if (GammaEnergy < LowestEnergyLimit) GammaEnergy = LowestEnergyLimit;   
    MeanFreePath = DataLogInterpolation(GammaEnergy, aMaterial->GetIndex(), theMeanFreePathTable);	

  }                                     
  
  return MeanFreePath;
}

