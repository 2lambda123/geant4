// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// -------------------------------------------------------------------
// $Id: G4DNACrossSectionPolicyExcitationEmfietzoglou.icc,v 1.1 2007-10-08 09:18:42 sincerti Exp $
// -------------------------------------------------------------------
//

#ifdef G4DNACrossSectionPolicyExcitationEmfietzoglou_HH

#include "Randomize.hh"
#include "G4LogLogInterpolation.hh"

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

G4double G4DNACrossSectionPolicyExcitationEmfietzoglou
::CrossSection
(const G4Track& track)
{
  name = "eCrossSectionPolicyExcitationEmfietzoglou";
  lowEnergyLimit = 7. * eV;
  highEnergyLimit = 10 * keV;
  zeroBelowLowEnergyLimit = true ;
  zeroAboveHighEnergyLimit = true ;

  const G4DynamicParticle* particle = track.GetDynamicParticle();
  G4double k = particle->GetKineticEnergy();

  if (k < lowEnergyLimit)
  {
   if (zeroBelowLowEnergyLimit)
    return 0;

   k=lowEnergyLimit;
  }
  else if (k > highEnergyLimit)
  {
   if (zeroAboveHighEnergyLimit)
    return 0;

   k=highEnergyLimit;
  }

  G4int i(5);
  G4double totalCrossSection(0.);

  while (i>0)
  {
   i--;
   totalCrossSection+=PartialCrossSection(k, i);
  }
  return totalCrossSection;

}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

G4double G4DNACrossSectionPolicyExcitationEmfietzoglou
::PartialCrossSection
(G4double t, G4int excitationLevelIndex)
{
  //                 Aj                        T
  // sigma(T) = ------------- (Bj /  T) ln(Cj ---) [1 - Bj / T]^Pj
  //             2 pi alpha0                   R
  //
  // T      is the incoming electron kinetic energy
  // alpha0 is the Bohr Radius (Bohr_radius)
  // Aj, Bj, Cj & Pj are parameters that can be found in Emfietzoglou's papers
  //
  //
  // From Phys. Med. Biol. 48 (2003) 2355-2371, D.Emfietzoglou,
  // Monte Carlo Simulation of the energy loss of low energy electrons in liquid Water
  //

  const G4double sigma0((10./3.343e22)*cm2);
  const G4double aj[]={0.0205, 0.0209, 0.0130, 0.0026, 0.0025};
  const G4double cj[]={4.9801, 3.3850, 2.8095, 1.9242, 3.4624};
  const G4double pj[]={0.4757, 0.3483, 0.4443, 0.3429, 0.4379};
  const G4double r(13.6*eV) ;

  if(t<EnergyConstant(excitationLevelIndex)) return(0.); 
  
  G4double excSigma = ( aj[excitationLevelIndex] / (2.*pi*Bohr_radius)) * (EnergyConstant(excitationLevelIndex) / t) * log(cj[excitationLevelIndex]*(t/r)) * pow((1.- (EnergyConstant(excitationLevelIndex)/t)), pj[excitationLevelIndex]);
  return(excSigma * sigma0);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

G4int G4DNACrossSectionPolicyExcitationEmfietzoglou
::RandomizePartialCrossSection
(G4double k, G4int /*z*/, const G4ParticleDefinition* /*particle*/)
{
  G4int i(5);
  G4double values[5];
  G4double value(0);

  while (i>0)
  {
   i--;
   values[i]=PartialCrossSection(k,i);
   value+=values[i];
  }

  value*=G4UniformRand();

  i=5;
  while (i>0)
  {
   i--;

   if (values[i]>value)
    return i;

   value-=values[i];
  }

  return 0;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

G4double G4DNACrossSectionPolicyExcitationEmfietzoglou
::EnergyConstant
(G4int excitationLevelIndex)
{
  const G4double ej[]={8.22*eV, 10.00*eV, 11.24*eV, 12.61*eV, 13.77*eV};
  
  return ej[excitationLevelIndex];
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....
 
#endif
