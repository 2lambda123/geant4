//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
//
// $Id: G4DNAElectronElasticScatteringInWater.icc,v 1.2 2006-05-25 17:57:10 pia Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//

#ifdef    G4DNAELECTRONELASTICSCATTERINGINWATER_HH
 template<typename TotalCrossSectionPolicy, typename FinalStatesPolicy>
 G4VParticleChange *                      G4DNAElectronElasticScatteringInWater<TotalCrossSectionPolicy, FinalStatesPolicy> :: PostStepDoIt(const G4Track & aTrack, const G4Step & aStep)
 {
  this->aParticleChange.Initialize(aTrack);
  
  G4double k;
  k=aTrack.GetDynamicParticle()->GetKineticEnergy();
 
  G4double cosTheta;
  const G4int z(10); // H2O number of electrons
  
  cosTheta=FinalStatesPolicy::RandomizeCosTheta(k, z);
 
  G4double phi;
  phi=2*pi*G4UniformRand();
  
  G4ThreeVector zVers(aTrack.GetDynamicParticle()->GetMomentumDirection());
  G4ThreeVector xVers(zVers.orthogonal());
  G4ThreeVector yVers(zVers.cross(xVers));
  
  G4double xDir;
  G4double yDir;
  
  xDir=std::sqrt(1-cosTheta*cosTheta);
  yDir=xDir;
  xDir*=cos(phi);
  yDir*=sin(phi);
  
  G4ThreeVector zPrimeVers((xDir*xVers + yDir*yVers + cosTheta*zVers).unit());
 
  this->aParticleChange.ProposeEnergy(k);
  this->aParticleChange.ProposeMomentumDirection(zPrimeVers);
  this->aParticleChange.SetNumberOfSecondaries(0);
  
  return G4VDNAProcessInWater<TotalCrossSectionPolicy, FinalStatesPolicy>::PostStepDoIt(aTrack, aStep);
 }
#endif /* G4DNAELECTRONELASTICSCATTERINGINWATER_HH */
