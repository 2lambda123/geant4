//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
//
// $Id: G4LowEnergyGammaConversion.icc,v 1.13 2001-09-23 20:06:59 pia Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
// 
// ---------------------------------------------------------------
//      GEANT 4 class inlined methods file
//
//      ------------ G4LowEnergyGammaConversion physics process ---------
//                   by A.Forti 1999/03/02
// ***************************************************************

inline G4bool G4LowEnergyOldGammaConversion::IsApplicable(const G4ParticleDefinition& particle)
{
   return ( &particle == G4Gamma::Gamma() ); 
}

inline G4double 
G4LowEnergyOldGammaConversion::GetMeanFreePath(const G4Track& aTrack, G4double, G4ForceCondition*){

  // returns the gamma mean free path in GEANT4 internal units
  const G4DynamicParticle* aDynamicGamma = aTrack.GetDynamicParticle();
  G4double GammaEnergy = aDynamicGamma->GetKineticEnergy();
  G4Material* aMaterial = aTrack.GetMaterial();

  //  G4bool isOutRange ;
  
  if (GammaEnergy < lowestEnergyLimit){
    MeanFreePath = DBL_MAX;

  }
  else {
    if(GammaEnergy > highestEnergyLimit) GammaEnergy = 0.99*highestEnergyLimit;   
    MeanFreePath = util.DataLogInterpolation(GammaEnergy, aMaterial->GetIndex(), theMeanFreePathTable);	

  }                                     
  
  return MeanFreePath;
}

inline G4double 
G4LowEnergyOldGammaConversion::ScreenFunction1(G4double ScreenVariable)

// compute the value of the screening function 3*PHI1 - PHI2

{
   G4double screenVal;

   if (ScreenVariable > 1.)
     screenVal = 42.24 - 8.368*log(ScreenVariable+0.952);
   else
     screenVal = 42.392 - ScreenVariable* (7.796 - 1.961*ScreenVariable);

   return screenVal;
} 

inline G4double 
G4LowEnergyOldGammaConversion::ScreenFunction2(G4double ScreenVariable)

// compute the value of the screening function 1.5*PHI1 - 0.5*PHI2
{
   G4double screenVal;

   if (ScreenVariable > 1.)
     screenVal = 42.24 - 8.368*log(ScreenVariable+0.952);
   else
     screenVal = 41.405 - ScreenVariable* (5.828 - 0.8945*ScreenVariable);

   return screenVal;
} 



