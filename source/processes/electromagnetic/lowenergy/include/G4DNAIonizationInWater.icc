// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// -------------------------------------------------------------------
// $Id: G4DNAIonizationInWater.icc,v 1.5 2007-10-08 09:18:43 sincerti Exp $
// -------------------------------------------------------------------
//

#ifdef G4DNAIonizationInWater_HH

#include "G4Electron.hh"

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

template<typename CrossSectionPolicy, typename FinalStatesPolicy>
G4VParticleChange* G4DNAIonizationInWater<CrossSectionPolicy, FinalStatesPolicy>
::PostStepDoIt
(const G4Track& aTrack, const G4Step& aStep)
 {
  this->aParticleChange.Initialize(aTrack);

  const G4DynamicParticle* aDynamicParticle = aTrack.GetDynamicParticle();
  G4double k = aDynamicParticle->GetKineticEnergy();
  G4ParticleMomentum primaryDirection = aDynamicParticle->GetMomentumDirection();
  G4double particleMass = aDynamicParticle->GetDefinition()->GetPDGMass();
  G4double TotalEnergy = k + particleMass;
  G4double Psquare = k*(TotalEnergy+particleMass);
  G4double TotalMomentum = sqrt(Psquare);
  G4int ionizationShell(CrossSectionPolicy::RandomizePartialCrossSection(aTrack,k));
  G4double secondaryKinetic(FinalStatesPolicy::RandomizeEjectedElectronEnergy(aTrack,k,ionizationShell));
  G4double bindingEnergy(FinalStatesPolicy::EnergyConstant(ionizationShell));
 
  //Direction of the secondary electron
  G4double cosTheta = 0.;
  G4double phi = 0.; 
  FinalStatesPolicy::RandomizeEjectedElectronDirection(aTrack.GetDefinition(), k,secondaryKinetic, cosTheta, phi);
  G4double sinTheta = sqrt(1.-cosTheta*cosTheta);
  G4double dirx = sinTheta*cos(phi),diry = sinTheta*sin(phi),dirz = cosTheta;
  G4ThreeVector DeltaDirection(dirx,diry,dirz);
  DeltaDirection.rotateUz(primaryDirection);

  G4double DeltaTotalMomentum = sqrt(secondaryKinetic*(secondaryKinetic +
                                                     2.*electron_mass_c2 ));

  //Primary Particle Direction
  G4double finalPx = TotalMomentum*primaryDirection.x()
                        - DeltaTotalMomentum*DeltaDirection.x();
  G4double finalPy = TotalMomentum*primaryDirection.y()
                        - DeltaTotalMomentum*DeltaDirection.y();
  G4double finalPz = TotalMomentum*primaryDirection.z()
                        - DeltaTotalMomentum*DeltaDirection.z();
  G4double finalMomentum =
                sqrt(finalPx*finalPx+finalPy*finalPy+finalPz*finalPz);
  finalPx /= finalMomentum;
  finalPy /= finalMomentum;
  finalPz /= finalMomentum;

  this->aParticleChange.ProposeMomentumDirection( finalPx,finalPy,finalPz );
  this->aParticleChange.ProposeEnergy(k-bindingEnergy-secondaryKinetic);
  this->aParticleChange.ProposeLocalEnergyDeposit(bindingEnergy);
  this->aParticleChange.SetNumberOfSecondaries(1);

  G4DynamicParticle* aElectron = new G4DynamicParticle(G4Electron::Electron(),DeltaDirection,secondaryKinetic);
  this->aParticleChange.AddSecondary(aElectron);

  return G4VDNAProcessInWater<CrossSectionPolicy, FinalStatesPolicy>::PostStepDoIt(aTrack, aStep);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

template<typename CrossSectionPolicy, typename FinalStatesPolicy> 
G4bool                                  
G4DNAIonizationInWater<CrossSectionPolicy, FinalStatesPolicy>
::IsApplicable
(const G4ParticleDefinition & /*aParticleDefinition*/)
{
  return true;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

#endif 

