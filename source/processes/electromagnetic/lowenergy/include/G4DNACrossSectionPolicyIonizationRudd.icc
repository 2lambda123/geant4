// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// -------------------------------------------------------------------
// $Id: G4DNACrossSectionPolicyIonizationRudd.icc,v 1.1 2007-10-08 09:18:43 sincerti Exp $
// -------------------------------------------------------------------
//

#ifdef G4DNACrossSectionPolicyIonizationRudd_HH
#include "Randomize.hh"

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

G4double G4DNACrossSectionPolicyIonizationRudd
::CrossSection
(const G4Track& track)
{
  dataset = 0;
  valuesBuffer = 0;
  
  const G4DynamicParticle* particle = track.GetDynamicParticle();
  G4double k = particle->GetKineticEnergy();
  const G4ParticleDefinition* myParticleDefinition = track.GetDefinition();

  if (myParticleDefinition == G4Proton::ProtonDefinition()) 
  {
  lowEnergyLimit = 100 * eV;
  highEnergyLimit = 500 * keV;
  zeroBelowLowEnergyLimit = true ;
  zeroAboveHighEnergyLimit = true ;
  dataFileEnergyUnit = eV;
  dataFileCrossSectionUnit =(1.*m*m);
  dataFileName = "ProtonCrossSectionIonizationRudd";
  }

  G4DNAGenericIonsManager *instance;
  instance = G4DNAGenericIonsManager::Instance();

  if (myParticleDefinition == instance->GetIon("hydrogen") ) 
  {
  lowEnergyLimit = 100 * eV;
  highEnergyLimit = 100 * MeV;
  zeroBelowLowEnergyLimit = true ;
  zeroAboveHighEnergyLimit = true ;
  dataFileEnergyUnit = eV;
  dataFileCrossSectionUnit =(1.*m*m);
  dataFileName = "HydrogenCrossSectionIonizationRudd";
  }

  if (myParticleDefinition == instance->GetIon("alpha++") ) 
  {
  lowEnergyLimit = 1 * keV;
  highEnergyLimit = 10 * MeV;
  zeroBelowLowEnergyLimit = true ;
  zeroAboveHighEnergyLimit = true ;
  dataFileEnergyUnit = eV;
  dataFileCrossSectionUnit =(1.*m*m);
  dataFileName = "AlphaPlusPlusCrossSectionIonizationRudd";
  }
  
  if (myParticleDefinition == instance->GetIon("alpha+") ) 
  {
  lowEnergyLimit = 1 * keV;
  highEnergyLimit = 10 * MeV;
  zeroBelowLowEnergyLimit = true ;
  zeroAboveHighEnergyLimit = true ;
  dataFileEnergyUnit = eV;
  dataFileCrossSectionUnit =(1.*m*m);
  dataFileName = "AlphaPlusCrossSectionIonizationRudd";
  }
  
  if (myParticleDefinition == instance->GetIon("helium") ) 
  {
  lowEnergyLimit = 1 * keV;
  highEnergyLimit = 10 * MeV;
  zeroBelowLowEnergyLimit = true ;
  zeroAboveHighEnergyLimit = true ;
  dataFileEnergyUnit = eV;
  dataFileCrossSectionUnit =(1.*m*m);
  dataFileName = "HeliumCrossSectionIonizationRudd";
  }
  
  
  // Build table 
  BuildTotalCrossSection();
  
  if (!dataset)
  {
   G4Exception("G4DNACrossSectionPolicyIonizationRudd::CrossSection: dataset not loaded");
   return 0;
  }
 
  if (k < lowEnergyLimit)
  {
   if (zeroBelowLowEnergyLimit)
    {Free(); return 0;}
  
   k=lowEnergyLimit;
  }
  else if (k > highEnergyLimit)
  {
   if (zeroAboveHighEnergyLimit)
    {Free(); return 0;}
    
   k=highEnergyLimit;
  }

   // add ONE or TWO electron-water excitation for alpha+ and helium
   
    if ( myParticleDefinition == instance->GetIon("alpha+") 
	       ||
	 myParticleDefinition == instance->GetIon("helium")
        ) 
      {
      
       G4DNACrossSectionDataSet * ElectronDataset = new G4DNACrossSectionDataSet 
          (new G4LogLogInterpolation, eV, (1./3.343e22)*m*m);
       
       ElectronDataset->LoadData("ElectronCrossSectionIonizationBorn");

       G4double kElectron = k * 0.511/3728;

       if ( myParticleDefinition == instance->GetIon("alpha+") ) 
          {
	    G4double tmp1 = dataset->FindValue(k) + ElectronDataset->FindValue(kElectron);
	    Free();
	    return tmp1;
	  }

       if ( myParticleDefinition == instance->GetIon("helium") ) 
          {
	    G4double tmp2 = dataset->FindValue(k) +  2*ElectronDataset->FindValue(kElectron);
	    Free();
	    return tmp2;
	  }
	  
       delete ElectronDataset;
      }      
  
  //
  G4double result = dataset->FindValue(k); // no electron interaction
  Free();
  return result;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

G4int G4DNACrossSectionPolicyIonizationRudd
::RandomizePartialCrossSection
(const G4Track& track, G4double k)
{
  if (!dataset)
  {
   G4Exception("G4DNACrossSectionPolicyIonizationRudd::RandomizePartialCrossSection: dataset not loaded");
   return 0;
  }
 
  // add ONE or TWO electron-water excitation for alpha+ and helium
   
  G4DNAGenericIonsManager *instance;
  instance = G4DNAGenericIonsManager::Instance();
  G4double kElectron(0);
  G4DNACrossSectionDataSet * ElectronDataset = new G4DNACrossSectionDataSet (new G4LogLogInterpolation, eV, (1./3.343e22)*m*m);
 
  if ( track.GetDefinition() == instance->GetIon("alpha+") 
	       ||
	 track.GetDefinition() == instance->GetIon("helium")
        ) 
  {     
       ElectronDataset->LoadData("ElectronCrossSectionIonizationBorn");

       kElectron = k * 0.511/3728;
  }      
  
//
  dataset = 0;
  valuesBuffer = 0;
  BuildTotalCrossSection();
  
  const size_t n(dataset->NumberOfComponents());
  size_t i(n);
  G4double value(0);
  
  while (i>0)
  {
   i--;
   
   valuesBuffer[i]=dataset->GetComponent(i)->FindValue(k);
   
   if (track.GetDefinition() == instance->GetIon("alpha+")) 
     {valuesBuffer[i]=dataset->GetComponent(i)->FindValue(k) + ElectronDataset->FindValue(kElectron);}
     
   if (track.GetDefinition() == instance->GetIon("helium")) 
     {valuesBuffer[i]=dataset->GetComponent(i)->FindValue(k) + 2*ElectronDataset->FindValue(kElectron);}
      
   value+=valuesBuffer[i];
  }
  delete ElectronDataset;

  value*=G4UniformRand();
  
  i=n;
  
  while (i>0)
  {
   i--;
   
   if (valuesBuffer[i]>value)
    {Free(); return i;}
  
   value-=valuesBuffer[i];
  }
    
  return 0;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

G4int  G4DNACrossSectionPolicyIonizationRudd
::NumberOfPartialCrossSections
(void)
{
  if (!dataset)
  {
   G4Exception("G4DNACrossSectionPolicyIonizationRudd::NumberOfPartialCrossSections: dataset not loaded");
   return 0;
  }
  
  return dataset->NumberOfComponents();
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

void G4DNACrossSectionPolicyIonizationRudd
::BuildTotalCrossSection
(void)
{
  Free();
  
  dataset=new G4DNACrossSectionDataSet(new G4LogLogInterpolation, dataFileEnergyUnit, dataFileCrossSectionUnit);
  dataset->LoadData(dataFileName);
  
  valuesBuffer=new G4double[dataset->NumberOfComponents()];
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

void G4DNACrossSectionPolicyIonizationRudd
::Free
(void)
{
  if (dataset)
   delete dataset;
   
  if (valuesBuffer)
   delete[] valuesBuffer;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....
  
#endif
