//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
//
// $Id: G4DNAExcitationInWater.icc,v 1.1 2005-07-20 10:01:54 capra Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//

#ifdef    G4DNAEXCITATIONINWATER_HH
 template<typename TotalCrossSectionPolicy, typename FinalStatesPolicy>
 G4VParticleChange *                      G4DNAExcitationInWater<TotalCrossSectionPolicy, FinalStatesPolicy> :: PostStepDoIt(const G4Track & aTrack, const G4Step & aStep)
 {
  const G4int z(10); // H2O number of electrons
  
  aParticleChange.Initialize(aTrack);
  
  G4double k;
  k=aTrack.GetDynamicParticle()->GetKineticEnergy();
  
  G4int excitationLevel(RandomizePartialCrossSection(k, z));
  G4double excitationEnergy(EnergyConstant(excitationLevel));
  
  aParticleChange.ProposeEnergy(k-excitationEnergy);
  aParticleChange.ProposeLocalEnergyDeposit(excitationEnergy);
  aParticleChange.ProposeMomentumDirection(aTrack.GetDynamicParticle()->GetMomentumDirection());
  aParticleChange.SetNumberOfSecondaries(0);
  
  return G4VDNAProcessInWater<TotalCrossSectionPolicy, FinalStatesPolicy>::PostStepDoIt(aTrack, aStep);
 }
#endif /* G4DNAEXCITATIONINWATER_HH */
