//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
//
// $Id: G4DNARutherfordTotalCrossSectionPolicy.icc,v 1.1 2005-06-24 10:07:13 capra Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//

#ifdef    G4DNARUTHERFORDTOTALCROSSSECTIONPOLICY_HH
 #include "G4Electron.hh"

 template <typename EnergyLimitsPolicy>
 const G4ParticleDefinition            *G4DNARutherfordTotalCrossSectionPolicy<EnergyLimitsPolicy> :: IncomingParticleDefinition(void) const
 {
  return G4Electron::Electron();
 }
 
 
 
 template <typename EnergyLimitsPolicy>
 G4double                               G4DNARutherfordTotalCrossSectionPolicy<EnergyLimitsPolicy> :: TotalCrossSection(G4double k, G4int z) const
 {
  //                pi * sigma_Ruth(K)
  // sigma_el(K) = --------------------
  //                n(K) * (n(K) + 1)
  //
  // Where K is the electron non-relativistic kinetic energy
  // Cross section per water molecule

  if (k < EnergyLimitsPolicy::lowEnergyLimit)
  {
   if (EnergyLimitsPolicy::zeroBelowLowEnergyLimit)
    return 0;
  
   k=EnergyLimitsPolicy::lowEnergyLimit;
  }
  else if (k > EnergyLimitsPolicy::highEnergyLimit)
  {
   if (EnergyLimitsPolicy::zeroAboveHighEnergyLimit)
    return 0;
    
   k=EnergyLimitsPolicy::highEnergyLimit;
  }

  G4double n=ScreeningFactor(k,z);

  return (pi * RutherfordTotalCrossSection(k, z))/(n*(n+1.));
 }





 template <typename EnergyLimitsPolicy>
 G4double                               G4DNARutherfordTotalCrossSectionPolicy<EnergyLimitsPolicy> :: RutherfordTotalCrossSection(G4double k, G4int z) const
 {
  //                                  e^4         /      K + m_e c^2      \^2
  // sigma_Ruth(K) = Z (Z+1) -------------------- | --------------------- |
  //                          (4 pi epsilon_0)^2  \  K * (K + 2 m_e c^2)  /
  //
  // Where K is the electron non-relativistic kinetic energy
  // 
  // Nucl. Instr. Meth. 155 (1978) 145-156

  G4double length;
  length=(e_squared*(k+electron_mass_c2))/(4*pi*epsilon0*k*(k+2*electron_mass_c2));

  return static_cast<G4double>(z*(z+1))*length*length;
 }
 
 
 
 template <typename EnergyLimitsPolicy>
 G4double                               G4DNARutherfordTotalCrossSectionPolicy<EnergyLimitsPolicy> :: ScreeningFactor(G4double k, G4int z) const
 {
  //
  //         alpha_1 + beta_1 ln(K/eV)   constK Z^(2/3)
  // n(T) = -------------------------- -----------------
  //              K/(m_e c^2)            2 + K/(m_e c^2)
  //
  // Where K is the electron non-relativistic kinetic energy
  //
  // n(T) > 0 for T < ~ 400 MeV
  // 
  // Nucl. Instr. Meth. 155 (1978) 145-156

  const G4double alpha_1(1.64);
  const G4double beta_1(-0.0825);
  const G4double constK(1.7E-5);

  G4double numerator;
  numerator=(alpha_1+beta_1*std::log(k/eV))*constK*std::pow(static_cast<double>(z), 2./3.);

  k/=electron_mass_c2;

  G4double denominator;
  denominator=k*(2+k);

  return numerator/denominator;
 }

#endif /* G4DNARUTHERFORDTOTALCROSSSECTIONPOLICY_HH */
