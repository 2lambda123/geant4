// This code implementation is the intellectual property of
// the RD44 GEANT4 collaboration.
//
// By copying, distributing or modifying the Program (or any work
// based on the Program) you indicate your acceptance of this statement,
// and all its terms.
//
// $Id: G4LowEnergyRayleigh.icc,v 1.1 1999-03-02 17:16:30 aforti Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
// 
// ---------------------------------------------------------------
//      GEANT 4 class inlined methods file
//
//      For information related to this code contact:
//      CERN, CN Division, ASD group
//      History: first implementation, based on object model of
//      2nd December 1995, G.Cosmo
//      ------------ G4LowEnergyRayleigh physics process ---------
//                   by Michel Maire, April 1996
// ***************************************************************
// 10-06-96, updated by M.Maire
// 06-01-97, crossection table + meanfreepath table, M.Maire
// 12-03-97, new Physics scheme
// 21-11-97, change for lowest energy limit default action
// ---------------------------------------------------------------

inline G4bool G4LowEnergyRayleigh::IsApplicable(const G4ParticleDefinition& particle){
   return ( &particle == G4Gamma::Gamma() ); 	
}

inline G4double G4LowEnergyRayleigh::GetMeanFreePath(const G4Track& aTrack, G4double, G4ForceCondition*){

// returns the gamma mean free path in GEANT4 internal units
   const G4DynamicParticle* aDynamicGamma = aTrack.GetDynamicParticle();
   G4double GammaEnergy = aDynamicGamma->GetKineticEnergy();
   G4Material* aMaterial = aTrack.GetMaterial();

   G4bool isOutRange ;

   if (GammaEnergy > HighestEnergyLimit){
     MeanFreePath = DBL_MAX;
}	
   else {

     if(GammaEnergy < LowestEnergyLimit) GammaEnergy = LowestEnergyLimit;   

       MeanFreePath = DataLogInterpolation(GammaEnergy, 
	                                   aMaterial->GetIndex(), 
                                           theMeanFreePathTable);	
   }	

   return MeanFreePath;
}

inline G4double G4LowEnergyRayleigh::DataLogInterpolation(G4double Argument, G4double AtomicNumber, G4PhysicsTable* Table){

  G4PhysicsVector* theVec = (*Table)(AtomicNumber);
  G4int theLoc = FindBinLocation(Argument, theVec); 

  G4double arg1 = (*theVec)(theLoc), arg2 = (*theVec)(theLoc+1);
  G4double val1 = theVec->GetLowEdgeEnergy(theLoc), val2 = theVec->GetLowEdgeEnergy(theLoc+1);

  G4double theVal = (log10(val1)*log10(arg2/Argument)
		     +log10(val2)*log10(Argument/arg1))/log10(arg2/arg1);
  
  theVal = exp(theVal);

  return theVal;
}

inline G4int G4LowEnergyRayleigh::FindBinLocation(G4double arg, G4PhysicsVector* vec){

  G4int numberOfBin = vec->GetVectorLength();
  G4int lowerBound = 0;
  G4int upperBound = numberOfBin-1;

  do {
    G4int midBin = (lowerBound + upperBound)/2;
    if( arg > (*vec)(midBin))

       upperBound = midBin-1;
    else

       lowerBound = midBin+1;
  } while (lowerBound <= upperBound); 

  return upperBound;
}






