// This code implementation is the intellectual property of
// the RD44 GEANT4 collaboration.
//
// By copying, distributing or modifying the Program (or any work
// based on the Program) you indicate your acceptance of this statement,
// and all its terms.
//
// $Id: G4LowEnergyIonisation.icc,v 1.1 1999-06-01 18:17:47 aforti Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
// 
// ---------------------------------------------------------------
//      GEANT 4 class inlined methods file 
//
//      For information related to this code contact:
//      CERN, IT Division, ASD group
//      ------------ G4LowEnergyIonisation physics process ------------
//                  by Laszlo Urban, 20 March 1997
// ***************************************************************
// It is the first implementation of the NEW IONISATION PROCESS.               
// It calculates the ionisation of e+/e-.
// ***************************************************************
//
// 24-11-97: correction on MeanFreePath for KinEnergy > HighestLimit
//
// ---------------------------------------------------------------

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

inline G4bool G4LowEnergyIonisation::IsApplicable(
                            const G4ParticleDefinition& particle)
{
   return(  (&particle == G4Electron::Electron())
          ||(&particle == G4Positron::Positron()) );
}
         
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

inline G4double G4LowEnergyIonisation::GetMeanFreePath(
                                               const G4Track& track,
                                               G4double,
                                               G4ForceCondition*) 
{
   const G4DynamicParticle* aParticle = track.GetDynamicParticle();
   G4double KineticEnergy = aParticle->GetKineticEnergy();
   const G4Material* aMaterial  = track.GetMaterial();
   
   G4bool isOutRange ;

   if( KineticEnergy < LowestKineticEnergy )
     MeanFreePath = DBL_MAX;
   else {
     if (KineticEnergy > HighestKineticEnergy) KineticEnergy = HighestKineticEnergy;

     const	
     G4ElementVector* theElementVector = aMaterial->GetElementVector();
     const
     G4double* theAtomicNumDensityVector = aMaterial->GetAtomicNumDensityVector();

     const
     G4int NumberOfElements = aMaterial->GetNumberOfElements() ;
     G4double SIGMA = 0;
     for(G4int iel=0; iel<NumberOfElements; iel++ ){

       G4double Cs = ComputeCrossSection((*theElementVector)(iel)->GetZ(), KineticEnergy)*barn;
       SIGMA += theAtomicNumDensityVector[iel]*Cs;
     }	
       
     // mean free path = 1./macroscopic cross section
     MeanFreePath = SIGMA > DBL_MIN ? 1./SIGMA : DBL_MAX;     
  }

  return MeanFreePath ;
}

inline G4double G4LowEnergyIonisation::DataLogInterpolation(const G4double Argument, 
                                                               const G4Data& argVec, 
                                                               const G4Data& valVec){

  G4int theLoc = FindBinLocation(Argument, argVec); 

  if(theLoc == argVec.length()-1){
    return valVec[theLoc];
  }

  G4double val1 = valVec[theLoc], val2 = valVec[theLoc+1];
  G4double arg1 = argVec[theLoc], arg2 = argVec[theLoc+1];

  G4double theVal = (log10(val1)*log10(arg2/Argument)
                     +log10(val2)*log10(Argument/arg1))/log10(arg2/arg1);
  
//  cout<<"theLoc: "<<theLoc<<" val1: "<<val1<<" arg1: "<<arg1<<endl;
//  cout<<"theLoc+1: "<<theLoc+1<<" val2: "<<val2<<" arg2: "<<arg2<<endl;
//  cout<<"theVal: "<<theVal<<endl;

  theVal = pow(10,theVal);

//  cout<<"theVal real: "<<theVal<<endl;
  return theVal;
}

inline G4double G4LowEnergyIonisation::DataSemiLogInterpolation(const G4double Argument, 
                                                                const G4Data& argVec, 
                                                                const G4Data& valVec){

  G4int theLoc = FindBinLocation(Argument, argVec); 

  if(theLoc == argVec.length()-1){
    return valVec[theLoc];
  }

  G4double val1 = valVec[theLoc], val2 = valVec[theLoc+1];
  G4double arg1 = argVec[theLoc], arg2 = argVec[theLoc+1];

  G4double theVal = (val1*log10(arg2/Argument)
                     +val2*log10(Argument/arg1))/log10(arg2/arg1);
  
//  cout<<"theLoc: "<<theLoc<<" val1: "<<val1<<" arg1: "<<arg1<<endl;
//  cout<<"theLoc+1: "<<theLoc+1<<" val2: "<<val2<<" arg2: "<<arg2<<endl;
//  cout<<"theVal: "<<theVal<<endl;

 //  theVal = pow(10,theVal);

//  cout<<"theVal real: "<<theVal<<endl;
  return theVal;
}

inline G4int G4LowEnergyIonisation::FindBinLocation(const G4double arg, const G4Data& vec){

  G4int numberOfBin = vec.length();
  G4int lowerBound = 0;
  G4int upperBound = numberOfBin-1;

  do {

    G4int midBin = (lowerBound + upperBound)/2;

    if( arg < vec[midBin] )

       upperBound = midBin-1;
    else

       lowerBound = midBin+1;

  } while (lowerBound <= upperBound); 

  return upperBound;
}




