// This code implementation is the intellectual property of
// the RD44 GEANT4 collaboration.
//
// By copying, distributing or modifying the Program (or any work
// based on the Program) you indicate your acceptance of this statement,
// and all its terms.
//
// $Id: G4LowEnergyIonisation.icc,v 1.5 1999-07-05 14:31:18 aforti Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
// 
// ---------------------------------------------------------------
//      GEANT 4 class inlined methods file 
//
//      For information related to this code contact:
//      CERN, IT Division, ASD group
//      ------------ G4LowEnergyIonisation physics process ------------
//                  by Laszlo Urban, 20 March 1997
// ***************************************************************
// It is the first implementation of the NEW IONISATION PROCESS.               
// It calculates the ionisation of e+/e-.
// ***************************************************************
//
// 24-11-97: correction on MeanFreePath for KinEnergy > HighestLimit
//
// ---------------------------------------------------------------

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

inline G4bool G4LowEnergyIonisation::IsApplicable(
                            const G4ParticleDefinition& particle)
{
   return(  (&particle == G4Electron::Electron())
          ||(&particle == G4Positron::Positron()) );
}
         
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

inline G4double G4LowEnergyIonisation::GetMeanFreePath(
                                               const G4Track& track,
                                               G4double,
                                               G4ForceCondition*){

   const G4DynamicParticle* aParticle = track.GetDynamicParticle();
   G4double KineticEnergy = aParticle->GetKineticEnergy();
   const G4Material* aMaterial  = track.GetMaterial();
   
   G4bool isOutRange ;

   if( KineticEnergy < LowestKineticEnergy )
     MeanFreePath = DBL_MAX;
   else {
     if (KineticEnergy > HighestKineticEnergy) KineticEnergy = HighestKineticEnergy;

     const	
     G4ElementVector* theElementVector = aMaterial->GetElementVector();
     const
     G4double* theAtomicNumDensityVector = aMaterial->GetAtomicNumDensityVector();

     const
     G4int NumberOfElements = aMaterial->GetNumberOfElements() ;
     G4double SIGMA = 0;
     for(G4int iel=0; iel<NumberOfElements; iel++ ){

       G4double Cs = ComputeCrossSection((*theElementVector)(iel)->GetZ(), KineticEnergy)*barn;

       SIGMA += theAtomicNumDensityVector[iel]*Cs;
     }	
       
     // mean free path = 1./macroscopic cross section
     MeanFreePath = SIGMA > DBL_MIN ? 1./SIGMA : DBL_MAX;     
  }

  return MeanFreePath ;
}

inline G4double G4LowEnergyIonisation::GetContinuousStepLimit(
                                               const G4Track& track,
                                               G4double,
                                               G4double currentMinimumStep,
                                               G4double&)
{
 
  G4double kinEn = track.GetDynamicParticle()->GetKineticEnergy();
  G4double Step;
	
  if(kinEn <= 250*eV){

    Step = 0.1*nanometer;

  }
  else{

    Step = DBL_MAX;
  }

  if ((Step>0.0)&&(Step<currentMinimumStep)) currentMinimumStep = Step;
  return Step ;
}








