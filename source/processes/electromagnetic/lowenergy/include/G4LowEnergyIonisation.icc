// This code implementation is the intellectual property of
// the GEANT4 collaboration.
//
// By copying, distributing or modifying the Program (or any work
// based on the Program) you indicate your acceptance of this statement,
// and all its terms.
//
// $Id: G4LowEnergyIonisation.icc,v 1.12 2001-05-07 23:32:08 pia Exp $
//
// 
// ---------------------------------------------------------------
//      GEANT 4 class inlined methods file 
//
//      For information related to this code contact:
//      CERN, IT Division, ASD group
//      ------------ G4LowEnergyIonisation physics process ------------
//
//                  by Alessandra Forti , July 1999
// ***************************************************************
//
//   07.04.2000 Veronique Lefebure + Laszlo Urban
// - First implemention of continuous energy loss
// 14/07/99: corrections by L. Urban
// ---------------------------------------------------------------

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

inline G4bool G4LowEnergyIonisation::IsApplicable(
                            const G4ParticleDefinition& particle)
{
   return(  (&particle == G4Electron::Electron())
        /////////////////||(&particle == G4Positron::Positron()) 
	  );
}
         
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

inline G4double G4LowEnergyIonisation::GetMeanFreePath(
                                               const G4Track& track,
                                               G4double,
                                               G4ForceCondition*){

   const G4DynamicParticle* aParticle = track.GetDynamicParticle();
   G4double KineticEnergy = aParticle->GetKineticEnergy();
   const G4Material* aMaterial  = track.GetMaterial();
   const G4ElementVector* theElementVector = aMaterial->GetElementVector();
   const G4double* theAtomicNumDensityVector = aMaterial->GetAtomicNumDensityVector();
   const G4int NumberOfElements = aMaterial->GetNumberOfElements() ;
   G4double* DeltaCutInKineticEnergy = G4Electron::Electron()->GetCutsInEnergy() ;
   G4double DeltaThreshold = DeltaCutInKineticEnergy[aMaterial->GetIndex()] ;
 
   // G4bool isOutRange ;
   G4double SIGMA = 0.;

   if( KineticEnergy < LowestKineticEnergy )
     MeanFreePath = DBL_MAX;
   else {
     if (KineticEnergy > HighestKineticEnergy) KineticEnergy = HighestKineticEnergy;
     ///don't use table for now 
     ///MeanFreePath = ((*theMeanFreePathTable)(aMaterial->GetIndex()))->
     ///               GetValue( KineticEnergy, isOutRange);
        SIGMA = 0.;
	G4int iel;           
        for (iel=0; iel<NumberOfElements; iel++ ){
             SIGMA += theAtomicNumDensityVector[iel]*
                      ComputeCrossSectionWithCut( (*theElementVector)(iel)->GetZ(),
			                           KineticEnergy,
                                                   DeltaThreshold);
        }
        MeanFreePath = SIGMA > DBL_MIN ? 1./SIGMA : DBL_MAX;     
   }
  return MeanFreePath ;
}








