//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
// $Id: G4hIonisation52.icc,v 1.2 2006-06-29 19:52:32 gunter Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
// 
//------------------ G4hIonisation52 physics process -----------------------------
//                   by Laszlo Urban, 30 May 1997
//------------------------------------------------------------------------------
//
// 24/09/97: corrected by L.Urban
// 20/11/97: correction on MeanFreePath for KineticEnergy > HighestLimit
// 14-08-01: 'cleanup' of GetMeanFreePath (mma)
// 09-04-02: e+- are not applicable (V.Ivanchenko)
// 15-01-03: Migrade to cut per region (V.Ivanchenko)
// 16-06-03: ShortLived are not applicable any more (V.Ivanchenko)
// 08-08-03: This class is frozen at the release 5.2 (V.Ivanchenko)
//
//------------------------------------------------------------------------------

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

inline G4bool G4hIonisation52::IsApplicable(
                            const G4ParticleDefinition& particle)
{
   return(particle.GetPDGCharge() != 0. && 
          particle.GetPDGMass() > 10.*MeV &&
         !particle.IsShortLived());
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

inline G4double G4hIonisation52::GetMeanFreePath(const G4Track& track, G4double,
                                               G4ForceCondition*)
{
 const G4DynamicParticle* dynParticle = track.GetDynamicParticle();
 G4double kinEnergy = (dynParticle->GetKineticEnergy())*initialMass/(dynParticle->GetMass());
 G4double q = dynParticle->GetCharge()/eplus;
 G4double currentChargeSquare = q*q;
 const G4MaterialCutsCouple* couple  = track.GetMaterialCutsCouple();

 G4double MeanFreePath;
 G4bool isOut;

 if(kinEnergy > UpperBoundLambda) kinEnergy = UpperBoundLambda;
 if(kinEnergy > LowerBoundLambda)
         MeanFreePath = (((*theMeanFreePathTable)(couple->GetIndex()))->
                        GetValue(kinEnergy, isOut))/currentChargeSquare;
 else    MeanFreePath = DBL_MAX;

 return MeanFreePath;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

inline G4double G4hIonisation52::SecondaryEnergyThreshold(size_t index)
{
  return std::max((*secondaryEnergyCuts)[index],Tmincut);
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

