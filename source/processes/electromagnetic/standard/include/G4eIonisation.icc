//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
//
// $Id: G4eIonisation.icc,v 1.6 2001-08-06 11:48:48 maire Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
// 
//      ------------ G4eIonisation physics process ------------
//                  by Laszlo Urban, 20 March 1997
// ---------------------------------------------------------------
//
// 24-11-97: correction on MeanFreePath for KinEnergy > HighestLimit
// 28-05-01: V.Ivanchenko minor changes to provide ANSI -wall compilation 
//
// ---------------------------------------------------------------

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

inline G4bool G4eIonisation::IsApplicable(
                            const G4ParticleDefinition& particle)
{
   return(  (&particle == G4Electron::Electron())
          ||(&particle == G4Positron::Positron()) );
}
         
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

inline G4double G4eIonisation::GetMeanFreePath(
                                               const G4Track& track,
                                               G4double,
                                               G4ForceCondition*) 
{
   const G4DynamicParticle* aParticle = track.GetDynamicParticle();
   G4double KineticEnergy = aParticle->GetKineticEnergy();
   G4Material* aMaterial  = track.GetMaterial();
   
   G4double MeanFreePath;
   G4bool isOutRange ;

   if( KineticEnergy < LowestKineticEnergy )
     MeanFreePath = DBL_MAX;
   else {
     if (KineticEnergy > HighestKineticEnergy) KineticEnergy = HighestKineticEnergy;
     MeanFreePath = ((*theMeanFreePathTable)(aMaterial->GetIndex()))->
                    GetValue( KineticEnergy, isOutRange);
     }
   
   return MeanFreePath ;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

inline G4double G4eIonisation::GetLambda(
                              G4double KineticEnergy,
                              G4Material* material)
{
  G4bool isOut;
  //const G4MaterialTable* theMaterialTable = G4Material::GetMaterialTable() ;
 
  G4double lambda = (*theMeanFreePathTable)
                    [material->GetIndex()]->
                    GetValue(KineticEnergy,isOut);
  return lambda;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....
