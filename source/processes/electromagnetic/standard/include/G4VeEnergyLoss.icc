//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
// $Id: G4VeEnergyLoss.icc,v 1.14 2006-06-29 19:51:50 gunter Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
// 
// 18/11/98 L. Urban
//          It is a modified version of G4VeEnergyLoss:
//          continuous energy loss with generation of subcutoff delta rays
// 08-11-01 Charge,lastCharge not data members, L.Urban
// 15-01-03 Migrade to cut per region (V.Ivanchenko)
// 08-04-03 finalRange is region aware (V.Ivanchenko)
//
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

inline G4double G4VeEnergyLoss::GetConstraints(
                                 const G4DynamicParticle* aParticle,
                                 const G4MaterialCutsCouple* couple)
{
  // returns the Step limit
  // dRoverRange is the max. allowed relative range loss in one Step
  // it calculates dEdx and the range as well....

  G4double StepLimit;
  const G4ParticleDefinition* ParticleType=aParticle->GetDefinition();

  G4double KineticEnergy = aParticle->GetKineticEnergy();

  fdEdx = G4EnergyLossTables::GetDEDX(ParticleType,KineticEnergy,couple);
  fRangeNow =
           G4EnergyLossTables::GetRange(ParticleType,KineticEnergy,couple);

  // compute the Step limit
  G4double r = std::min(finalRange, couple->GetProductionCuts()
                 ->GetProductionCut(idxG4ElectronCut));
  if (fRangeNow>r)
  {
    StepLimit = dRoverRange*fRangeNow + r*(1.0 - dRoverRange)*(2.0 - r/fRangeNow);
    //randomise this value
    if (rndmStepFlag) StepLimit = r + (StepLimit-r)*G4UniformRand();
    if (StepLimit > fRangeNow) StepLimit = fRangeNow;
  }
  else StepLimit = fRangeNow;

  return StepLimit;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

inline G4double G4VeEnergyLoss::GetContinuousStepLimit(
                                               const G4Track& track,
                                               G4double,
                                               G4double currentMinimumStep,
                                               G4double&)
{

  G4double Step =
    GetConstraints(track.GetDynamicParticle(),track.GetMaterialCutsCouple());

  if ((Step>0.0)&&(Step<currentMinimumStep)) currentMinimumStep = Step;

  return Step ;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

inline G4bool G4VeEnergyLoss::IsApplicable(const G4ParticleDefinition&
                                                     particle)
{
   return(   (&particle == G4Electron::Electron())
           ||(&particle == G4Positron::Positron()) );
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
