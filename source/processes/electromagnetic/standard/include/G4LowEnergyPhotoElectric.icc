// This code implementation is the intellectual property of
// the RD44 GEANT4 collaboration.
//
// By copying, distributing or modifying the Program (or any work
// based on the Program) you indicate your acceptance of this statement,
// and all its terms.
//
// $Id: G4LowEnergyPhotoElectric.icc,v 1.1 1999-01-08 14:16:21 gunter Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
// 
// ---------------------------------------------------------------
//      GEANT 4 class inlined methods file
//
//      For information related to this code contact:
//      CERN, CN Division, ASD group
//      History: first implementation, based on object model of
//      2nd December 1995, G.Cosmo
//      ------------ G4LowEnergyPhotoElectric physics process ---------
//                   by Michel Maire, April 1996
// ***************************************************************
// 12-06-96, update by M.Maire
// 17-09-96, PartialSumSigma(i)
//           split ComputeBinbingEnergy(), M.Maire
// 08-01-97, crossection table + meanfreepath table , M.Maire
// 13-03-97, adapted for the new physics scheme, M.Maire
// 20-11-97, change for lowest energy limit default action
// ---------------------------------------------------------------

inline G4double G4LowEnergyPhotoElectric::ComputeKBindingEnergy (G4double Z)
 
// Calculates the binding energy of the K electronic shell, as a function
// of the Atomic Number, from a parametrized formula of L. Urban.
// (The coefficients are initialized in the constructor)

{
  return (*(*theBindingEnergyTable)(Z-1))(0);		
}

inline G4double G4LowEnergyPhotoElectric::ComputeL1BindingEnergy (G4double Z)
 
// Calculates the binding energy of the L1 electronic shell, as a function
// of the Atomic Number, from a parametrized formula of L. Urban.
// (The coefficients are initialized in the constructor)

{
  if(Z>2)  return (*(*theBindingEnergyTable)(Z-1))(1);		
  else return 0;
}

inline G4double G4LowEnergyPhotoElectric::ComputeL2BindingEnergy (G4double Z)
 
// Calculates the binding energy of the L2 electronic shell, as a function
// of the Atomic Number, from a parametrized formula of L. Urban.
// (The coefficients are initialized in the constructor)

{
    if(Z>4)  return (*(*theBindingEnergyTable)(Z-1))(2);		
    else return 0;
}

inline G4double 
G4LowEnergyPhotoElectric::GetMeanFreePath(const G4Track& aTrack, G4double, G4ForceCondition*){

  // returns the gamma mean free path in GEANT4 internal units
  const G4DynamicParticle* aDynamicGamma = aTrack.GetDynamicParticle();
  G4double GammaEnergy = aDynamicGamma->GetKineticEnergy();
  G4Material* aMaterial = aTrack.GetMaterial();
  
  G4double MeanFreePath;
  G4bool isOutRange ;

  if (GammaEnergy > HighestEnergyLimit)
    MeanFreePath = DBL_MAX;
  else {
    if (GammaEnergy < LowestEnergyLimit) GammaEnergy = LowestEnergyLimit;   
    MeanFreePath = (*theMeanFreePathTable)(aMaterial->GetIndex())->GetValue(GammaEnergy, isOutRange);
  }                                     
  
  return MeanFreePath;
}