//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
//
//
//
// R&D since 1996: Vladimir.Grichine@cern.ch
//
// 
// 29.04.03 V.Grichine, corrections for cuts per region
// 12.07.00 V.Grichine, GetFreePath and GetdEdx were added
// 11.07.00 V.Grichine, modifications in GetMeanFreePath
// 06.01.00 V.Grichine, modifications in GetConstraints and GetMenaFreePath
// corrected by L.Urban on 24/09/97


////////////////////////////////////////////////////////////////////
//
//

inline G4double
 G4PAIonisation::GetConstraints(const G4DynamicParticle *,
                                              G4Material *aMaterial    ) 
{  
  size_t index = aMaterial->GetIndex() ;

//  G4cout<<"G4PAIonisation::GetConstraints is called"<<G4endl ;

  if(index != fMatIndex)
  {
    return DBL_MAX ;
  } 
  else
  {
    if(aMaterial->GetState() == kStateGas) 
    {
      return 100*mm ;
    }
    else
    {
      return 0.1*mm ;
    }
  }
}



//////////////////////////////////////////////////////////////////////////
//
//

inline G4double 
G4PAIonisation::GetContinuousStepLimit( const G4Track& track ,
                                              G4double ,
                                              G4double currentMinimumStep ,
                                              G4double&                     )
{
 
  G4double Step =
    GetConstraints(track.GetDynamicParticle(),track.GetMaterial()) ;

  if( (Step > 0.0) && (Step < currentMinimumStep) ) currentMinimumStep = Step ;

  return Step ;
}

//////////////////////////////////////////////////////////////////////
//
//

inline G4bool G4PAIonisation::IsApplicable(
                            const G4ParticleDefinition& particle)
{
   return( particle.GetPDGCharge() != 0. && 
           particle.GetPDGMass()    > 0.     );
}

//////////////////////////////////////////////////////////////////////////
//
//         

inline
G4double G4PAIonisation::GetSandiaPhotoAbsCof(G4int i, G4int j) const 
{
   if(i < 0 || i >= fSandiaIntervalNumber || j < 0 || j > 4)
   {
      G4Exception("Invalid arguments in G4Material::GetSandiaPhotoAbsCof") ;
   }
   return fSandiaPhotoAbsCof[i][j] ;
}


//
//
/////////////////////////////////////////////////////////////////////////
