// This code implementation is the intellectual property of
// the RD44 GEANT4 collaboration.
//
// By copying, distributing or modifying the Program (or any work
// based on the Program) you indicate your acceptance of this statement,
// and all its terms.
//
// $Id: G4PAIenergyLoss.icc,v 1.2 1999-04-16 09:06:03 grichine Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
// $Id: 
// ---------------------------------------------------------------
//      GEANT 4 class inlined methods file 
//
//      For information related to this code contact:
//      CERN, IT Division, ASD group
//      History: based on object model of
//      2nd December 1995, G.Cosmo
//      ------------ G4PAIenergyLoss physics process ------------
//                  by Laszlo Urban, 30 May 1997
// ***************************************************************
// It is the first implementation of the NEW UNIFIED ENERGY LOSS PROCESS.               
// It calculates the energy loss of charged hadrons.
// ***************************************************************
// corrected by L.Urban on 24/09/97
//
//

////////////////////////////////////////////////////////////////////
//
// returns the Step limit 
// dToverTini is the max. allowed relative range loss in one Step
// it calculates dEdx and the range as well....
//

inline G4double
 G4PAIenergyLoss::GetConstraints(const G4DynamicParticle *aParticle,
                                              G4Material *aMaterial    ) 
{
  G4double KineticEnergy,ScaledKineticEnergy,StepLimit; 
  const G4double BigStep = DBL_MAX , SmallStep = DBL_MIN ;
  G4bool isOutRange ;
  G4int index,bin ;  
//  G4cout<<"G4PAIenergyLoss::GetConstraints is called"<<endl ; 
  return   2*mm ;  //DBL_MAX ;

  G4double Charge = aParticle->GetDefinition()->GetPDGCharge() ;
  G4double Chargesquare = Charge*Charge ;
  G4double MassRatio = proton_mass_c2/aParticle->GetDefinition()->GetPDGMass();

 
  G4PhysicsTable* theRangeTable;
  G4PhysicsTable* theRangeCoeffATable;
  G4PhysicsTable* theRangeCoeffBTable;
  G4PhysicsTable* theRangeCoeffCTable;
  if(Charge>0.)
  {
    theDEDXTable = theDEDXpTable ;
    theRangeTable = theRangepTable ;
    theRangeCoeffATable=thepRangeCoeffATable ;
    theRangeCoeffBTable=thepRangeCoeffBTable ;
    theRangeCoeffCTable=thepRangeCoeffCTable ;
  }
  else
  {
    theDEDXTable = theDEDXpbarTable ;
    theRangeTable = theRangepbarTable ;
    theRangeCoeffATable=thepbarRangeCoeffATable ;
    theRangeCoeffBTable=thepbarRangeCoeffBTable ;
    theRangeCoeffCTable=thepbarRangeCoeffCTable ;
  }


  // min.stepsize = p*CutInRange at energy , where range=p*CutInRange
  //  random steplimit

  const G4double p=1. , cc=p*CutInRange ;
  const G4double c1=dToverTini , c2=(1.-2.*dToverTini)*cc ,
                 c3=dToverTini*cc*cc ;
  const G4double rangelim=1.5*cc ;
  const G4double alfa = 0.05 , alfa1 = 1.-alfa , alfa2 = 2.*alfa ;

 //  SCALED kin.energy =protonmass*KineticEnergy/particlemass)!!!!!!

  KineticEnergy = aParticle->GetKineticEnergy();
  ScaledKineticEnergy = KineticEnergy*MassRatio ;
  bin = G4int(log(ScaledKineticEnergy/LowestKineticEnergy)/LOGRTable) ;
  EnergyBinNumber = bin ;
  index = aMaterial->GetIndex() ;
 
  if( ScaledKineticEnergy < LowestKineticEnergy )
     StepLimit = SmallStep ;
  else
    {
      if ( ScaledKineticEnergy > HighestKineticEnergy )
         StepLimit = BigStep ;
      else
      {
    
         fdEdx = (*theDEDXTable)(index)->
                            GetValue(ScaledKineticEnergy,isOutRange)*Chargesquare ;
     
  
         RangeCoeffA = (*(*theRangeCoeffATable)(index))(EnergyBinNumber) ;
         RangeCoeffB = (*(*theRangeCoeffBTable)(index))(EnergyBinNumber) ;
         RangeCoeffC = (*(*theRangeCoeffCTable)(index))(EnergyBinNumber) ;

         fRangeNow = ((RangeCoeffA*ScaledKineticEnergy+RangeCoeffB)
                    *ScaledKineticEnergy+RangeCoeffC)/Chargesquare ;         
 
  //  vacuum ?
    if(fRangeNow>=BigStep)
     StepLimit = BigStep ;
    else  
    {
  //  new method to compute the (random) Step limit ..............
       if(fRangeNow>cc)
       {
         StepLimit = (c1*fRangeNow+c2+c3/fRangeNow)/(Chargesquare*MassRatio) ;

        //  randomise this value
            StepLimit = cc + (StepLimit-cc)*G4UniformRand() ;
            if(StepLimit > fRangeNow) StepLimit = fRangeNow ;
       }
       else
         StepLimit = fRangeNow ;
      }
     }  
    }   

  return StepLimit ;
 
}

//////////////////////////////////////////////////////////////////////////
//
//

/* ***********************************************************************

inline G4double G4PAIenergyLoss::GetContinuousStepLimit(
                                               const G4Track& track,
                                               G4double,
                                               G4double currentMinimumStep,
                                               G4double&)
{
 
  G4double Step =
    GetConstraints(track.GetDynamicParticle(),track.GetMaterial()) ;

  if( (Step > 0.0) && (Step < currentMinimumStep) ) currentMinimumStep = Step ;

  return Step ;
}

*********************************************************** */

inline G4bool G4PAIenergyLoss::IsApplicable(const G4ParticleDefinition&
                                                     particle)
{
   return(particle.GetPDGCharge()!= 0.);
}
         
