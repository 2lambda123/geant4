//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
//
// $Id: G4MuPairProduction.icc,v 1.10 2003-05-26 16:21:54 vnivanch Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
//--------------- G4MuPairProduction physics process ------------------
//                by Laszlo Urban, May 1998  
//------------------------------------------------------------------------------
//
// Modified:
//
// 17-09-01 migration of Materials to pure STL (mma) 
// 29.05.01 V.Ivanchenko minor changes to provide ANSI -wall compilation
// 28-09-01 suppression of theMuonPlus ..etc..data members (mma) 
// 16-01-03 Migrade to cut per region (V.Ivanchenko)
//
//------------------------------------------------------------------------------

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

inline G4double G4MuPairProduction::GetMeanFreePath(const G4Track& trackData,
                                                    G4double,
                                                    G4ForceCondition* condition)
{
   const G4DynamicParticle* aDynamicParticle;
   G4double MeanFreePath;
   G4bool isOutRange ;

   *condition = NotForced ;

   aDynamicParticle = trackData.GetDynamicParticle();
   const G4MaterialCutsCouple* couple = trackData.GetMaterialCutsCouple();
   G4double KineticEnergy = aDynamicParticle->GetKineticEnergy();

   if (KineticEnergy <  LowestKineticEnergy)
     MeanFreePath = DBL_MAX ;
   else {
     if (KineticEnergy > HighestKineticEnergy)
                             KineticEnergy = 0.99*HighestKineticEnergy ;
     MeanFreePath = (*theMeanFreePathTable)(couple->GetIndex())->
                    GetValue( KineticEnergy, isOutRange );
   }
   return MeanFreePath;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

inline G4double G4MuPairProduction::ComputeMeanFreePath(
                                     const G4ParticleDefinition* ParticleType,
                                           G4double KineticEnergy,
                                     const G4MaterialCutsCouple* couple)
{
  const G4Material* aMaterial = couple->GetMaterial();
  const G4ElementVector* theElementVector = aMaterial->GetElementVector();
  const G4double* theAtomNumDensityVector =
                                      aMaterial->GetAtomicNumDensityVector();
  size_t index = couple->GetIndex();
  G4double ElectronEnergyCut = (*electronEnergyCuts)[index];
  G4double PositronEnergyCut = (*positronEnergyCuts)[index];

  G4double SIGMA = 0;
  for ( size_t i=0 ; i < aMaterial->GetNumberOfElements() ; i++ )
      {
            SIGMA += theAtomNumDensityVector[i] *
                  ComputeMicroscopicCrossSection( ParticleType, KineticEnergy,
                                         (*theElementVector)[i]->GetZ(),
                                         ElectronEnergyCut,PositronEnergyCut );
      }

  return SIGMA > 0. ? 1./SIGMA : DBL_MAX;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

inline G4bool G4MuPairProduction::IsApplicable(
                            const G4ParticleDefinition& particle)
{
   return ((&particle == G4MuonPlus::MuonPlus()  ) ||
           (&particle == G4MuonMinus::MuonMinus()) );
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

inline G4double G4MuPairProduction::SecondaryEnergyThreshold(size_t index)
{
  return (*electronEnergyCuts)[index] + (*positronEnergyCuts)[index]
          + 2.*electron_mass_c2;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
