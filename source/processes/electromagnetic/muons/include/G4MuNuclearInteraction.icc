// This code implementation is the intellectual property of
// the RD44 GEANT4 collaboration.
//
// By copying, distributing or modifying the Program (or any work
// based on the Program) you indicate your acceptance of this statement,
// and all its terms.
//
// $Id: G4MuNuclearInteraction.icc,v 1.1 1999-01-07 16:11:05 gunter Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
// $Id: 
// ---------------------------------------------------------------
//      GEANT 4 class inlined methods file 
//
//      For information related to this code contact:
//      CERN, CN Division, ASD group
//      History: first implementation, based on object model of
//      2nd December 1995, G.Cosmo
//      -------- G4MuNuclearInteraction physics process ---------
//                by Laszlo Urban, May 1998
// ***************************************************************

inline G4double G4MuNuclearInteraction::GetMeanFreePath( 
                                                    const G4Track& trackData,
                                                    G4double previousStepSize,
                                                    G4ForceCondition* condition)
{
   const G4DynamicParticle* aDynamicParticle;
   G4Material* aMaterial;
   G4double MeanFreePath;
   G4bool isOutRange ;
 
   *condition = NotForced ;

   aDynamicParticle = trackData.GetDynamicParticle();
   aMaterial = trackData.GetMaterial();

   G4double KineticEnergy = aDynamicParticle->GetKineticEnergy();

   if (KineticEnergy <  LowestKineticEnergy)
     MeanFreePath = DBL_MAX ;
   else {
     if (KineticEnergy > HighestKineticEnergy) 
                                 KineticEnergy = 0.99*HighestKineticEnergy ;
     MeanFreePath = (*theMeanFreePathTable)(aMaterial->GetIndex())->
                                 GetValue( KineticEnergy, isOutRange );
   }
   return MeanFreePath; 
} 

inline G4double G4MuNuclearInteraction::ComputeMeanFreePath(
                                     const G4ParticleDefinition* ParticleType,
                                           G4double KineticEnergy,
                                           const G4Material* aMaterial)
{
  const G4ElementVector* theElementVector = aMaterial->GetElementVector() ;
  const G4double* theAtomNumDensityVector = 
                                      aMaterial->GetAtomicNumDensityVector();

  G4double SIGMA = 0 ;

  for ( G4int i=0 ; i < aMaterial->GetNumberOfElements() ; i++ )
  {             
    SIGMA += theAtomNumDensityVector[i] * 
             ComputeMicroscopicCrossSection( ParticleType, KineticEnergy,
                                          (*theElementVector)(i)->GetZ(),
                                          (*theElementVector)(i)->GetA()) ;
  }       

  return SIGMA<=0.0 ? DBL_MAX : 1./SIGMA ;
}


inline G4bool G4MuNuclearInteraction::IsApplicable(
                            const G4ParticleDefinition& particle)
{
   return(   (&particle == (const G4ParticleDefinition *)theMuonMinus)
           ||(&particle == (const G4ParticleDefinition *)theMuonPlus)
         ) ;
}
