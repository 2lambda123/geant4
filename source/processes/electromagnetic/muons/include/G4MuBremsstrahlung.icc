//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
//
// $Id: G4MuBremsstrahlung.icc,v 1.8 2001-10-24 16:36:40 maire Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
//--------------- G4MuBremsstrahlung physics process ------------------
//                by Laszlo Urban, September 1997
//------------------------------------------------------------------------------
//
// Modified:
//
// 17-09-01 migration of Materials to pure STL (mma) 
// 29.05.01 V.Ivanchenko minor changes to provide ANSI -wall compilation
// 28-09-01 suppression of theMuonPlus ..etc..data members (mma) 
//
//------------------------------------------------------------------------------

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
 
inline G4double G4MuBremsstrahlung::GetMeanFreePath(const G4Track& trackData,
                                                    G4double previousStepSize,
                                                    G4ForceCondition* condition)
{
   const G4DynamicParticle* aDynamicParticle;
   G4Material* aMaterial;
   G4double MeanFreePath;
   G4bool isOutRange ;
 
   *condition = NotForced ;

   aDynamicParticle = trackData.GetDynamicParticle();
   aMaterial = trackData.GetMaterial();
   G4double KineticEnergy = aDynamicParticle->GetKineticEnergy();

   if (KineticEnergy <  LowestKineticEnergy)
     MeanFreePath = DBL_MAX ;
   else {
     if (KineticEnergy > HighestKineticEnergy) 
                                KineticEnergy = 0.99*HighestKineticEnergy ;
     MeanFreePath = (*theMeanFreePathTable)(aMaterial->GetIndex())->
                                      GetValue( KineticEnergy, isOutRange );
   }
   return MeanFreePath; 
} 

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
 
inline G4double G4MuBremsstrahlung::ComputeMeanFreePath(
                                     const G4ParticleDefinition* ParticleType,
                                           G4double KineticEnergy,
                                           const G4Material* aMaterial)
{
  const G4ElementVector* theElementVector = aMaterial->GetElementVector() ;
  const G4double* theAtomNumDensityVector = 
                                     aMaterial->GetAtomicNumDensityVector();
  G4double GammaEnergyCut = (G4Gamma::Gamma())->GetEnergyThreshold(aMaterial);
  G4double SIGMA = 0 ;
  for ( size_t i=0 ; i < aMaterial->GetNumberOfElements() ; i++ )
      {             
            SIGMA += theAtomNumDensityVector[i] * 
                     ComputeMicroscopicCrossSection(
                                            ParticleType, KineticEnergy,
                                            (*theElementVector)[i]->GetZ(), 
                                            (*theElementVector)[i]->GetA(), 
                                                     GammaEnergyCut );
      }       

  return SIGMA > 0. ? 1./SIGMA : DBL_MAX;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
 
inline G4bool G4MuBremsstrahlung::IsApplicable(
                            const G4ParticleDefinition& particle)
{
   return ((&particle == G4MuonPlus::MuonPlus()  ) ||
           (&particle == G4MuonMinus::MuonMinus()) );
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
 
