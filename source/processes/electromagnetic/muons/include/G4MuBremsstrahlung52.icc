//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
// $Id: G4MuBremsstrahlung52.icc,v 1.2 2006-06-29 19:49:12 gunter Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
//--------------- G4MuBremsstrahlung52 physics process ------------------
//                by Laszlo Urban, September 1997
//------------------------------------------------------------------------------
//
// Modified:
//
// 17-09-01 migration of Materials to pure STL (mma) 
// 29.05.01 V.Ivanchenko minor changes to provide ANSI -wall compilation
// 28-09-01 suppression of theMuonPlus ..etc..data members (mma) 
// 16-01-03 Migrade to cut per region (V.Ivanchenko)
// 08-08-03 This class is frozen at the release 5.2 (V.Ivanchenko)
//
//------------------------------------------------------------------------------

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......
 
inline G4double G4MuBremsstrahlung52::GetMeanFreePath(const G4Track& trackData,
                                                    G4double,
                                                    G4ForceCondition* condition)
{
   const G4DynamicParticle* aDynamicParticle;
   G4double MeanFreePath;
   G4bool isOutRange ;

   *condition = NotForced ;

   aDynamicParticle = trackData.GetDynamicParticle();
   const G4MaterialCutsCouple* couple = trackData.GetMaterialCutsCouple();
   G4double KineticEnergy = aDynamicParticle->GetKineticEnergy();

   if (KineticEnergy <  LowestKineticEnergy)
     MeanFreePath = DBL_MAX ;
   else {
     if (KineticEnergy > HighestKineticEnergy)
                                KineticEnergy = 0.99*HighestKineticEnergy ;
     MeanFreePath = (*theMeanFreePathTable)(couple->GetIndex())->
                                      GetValue( KineticEnergy, isOutRange );
   }
   return MeanFreePath;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

inline G4double G4MuBremsstrahlung52::ComputeMeanFreePath(
                                     const G4ParticleDefinition* ParticleType,
                                           G4double KineticEnergy,
                                     const G4MaterialCutsCouple* couple)
{
  const G4Material* aMaterial = couple->GetMaterial();
  const G4ElementVector* theElementVector = aMaterial->GetElementVector() ;
  const G4double* theAtomNumDensityVector =
                                     aMaterial->GetAtomicNumDensityVector();
  G4double GammaEnergyCut = SecondaryEnergyThreshold(couple->GetIndex());
  G4double SIGMA = 0 ;
  for ( size_t i=0 ; i < aMaterial->GetNumberOfElements() ; i++ )
      {
            SIGMA += theAtomNumDensityVector[i] *
                     ComputeMicroscopicCrossSection(
                                            ParticleType, KineticEnergy,
                                            (*theElementVector)[i]->GetZ(),
                                            (*theElementVector)[i]->GetA(),
                                                     GammaEnergyCut );
      }

  return SIGMA > 0. ? 1./SIGMA : DBL_MAX;
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

inline G4bool G4MuBremsstrahlung52::IsApplicable(
                            const G4ParticleDefinition& particle)
{
   return ((&particle == G4MuonPlus::MuonPlus()  ) ||
           (&particle == G4MuonMinus::MuonMinus()) );
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

inline G4double G4MuBremsstrahlung52::SecondaryEnergyThreshold(size_t index)
{
  return (*secondaryEnergyCuts)[index];
}

//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo......

