+OPT,MAPASM.
+ASM,23.
+USE,DOUBLE.
+USE,GCDES.
+USE,P=TESTEM5,T=EXE.
+USE,unix.
+EXE,CRA*.
+PAM,11,T=CARD,T=ATTACH.   /cern/pro/src/car/geant321.car
+PATCH,TESTEM5.
+DECK,BLANKDECK.
+KEEP,EDEPO.
      COMMON/EDEPO/EDEP,SEDEP,SEDEP2
     +            ,DEEM,STMA,STMI,RMAX
     +            ,anbstep,sstep,s2step,anch,anne
     +            ,anele,anpos,sanele,sanpos
     +            ,sanch,sanch2,sanne,sanne2 
     +            ,tra,ref,stra,sref
     +            ,nth0
     +            ,HIS1(2),HIS2(2),HIS3(2),HIS4(2),HIS5(2)
     +            ,HIS6(2),HIS7(2),HIS8(2),HIS9(2),HIS10(2)
     +            ,NHI1,NHI2,NHI3,NHI4,NHI5
     +            ,NHI6,NHI7,NHI8,NHI9,NHI10
      COMMON/PLOTS/NAME
      CHARACTER*25 NAME
      COMMON/GEOMAT/ZWORLD,RWORLD,MATWLD
     +            ,ZABS,RABS,MATABS,ZPOSAB
     +            ,ZSTART,ZEND 
     +            ,XVERT,YVERT,ZVERT

+DECK,main.
      PROGRAM main

      PARAMETER (NG=200000,NH=10000)
      COMMON/GCBANK/Q(NG)
      COMMON/PAWC/H(NH)
C     ALLOCATE MEMORY FOR ZEBRA/HBOOK
C
      CALL GZEBRA(NG)
      CALL HLIMIT(-NH)
C
      CALL HPLINT(0)
C
C     INITIALISATION
C
      CALL UGINIT
C
C     PROCESSING
C
      CALL GRUN
C
C     TERMINATION
C
      CALL UGLAST
C
      STOP
      END
+DECK,UGINIT.
      SUBROUTINE UGINIT
C
+SEQ,GCUNIT
+SEQ,GCLIST
+SEQ,GCKINE
+SEQ,EDEPO
      CHARACTER*25 filnam
      CHARACTER*25 HF
      CHARACTER*4 KEY
      CHARACTER*2 SPACES 
      DATA HF/'testem5.histo'/
C
C     INITIALIZE GEANT STRUCTURES
C
      CALL GINIT
*
C     default values (sizes,materials,)
      ZABDEF=1.
      RABDEF=1.
      ZABS  =ZABDEF
      RABS  =RABDEF
      MATABS=23
      ZWORLD=2.*ZABS
      RWORLD=2.*RABS
      ZWDDEF=ZWORLD
      RWDDEF=RWORLD
      MATWLD=30
      ZPOSAB=0.
      XVERT=0.
      YVERT=0.
      ZVERT=-0.5*ZWORLD
      XVDEF=XVERT
      YVDEF=YVERT
      ZVDEF=ZVERT
      NAME=HF  
C
C     DEFINE DATA CARDS
C
      CALL FFKEY('ZWLD',ZWORLD,1,'REAL')  
      CALL FFKEY('RWLD',RWORLD,1,'REAL')  
      CALL FFKEY('MATW',MATWLD,1,'INTEGER')
      CALL FFKEY('ZABS',ZABS,1,'REAL')  
      CALL FFKEY('RABS',RABS,1,'REAL')  
      CALL FFKEY('MATA',MATABS,1,'INTEGER')
      CALL FFKEY('ZPOS',ZPOSAB,1,'REAL')  
      CALL FFKEY('XVER',XVERT,1,'REAL')  
      CALL FFKEY('YVER',YVERT,1,'REAL')  
      CALL FFKEY('ZVER',ZVERT,1,'REAL')  
*
      CALL FFKEY('NH1 ',NHI1 ,1,'INTEGER')
      CALL FFKEY('NH2 ',NHI2 ,1,'INTEGER')
      CALL FFKEY('NH3 ',NHI3 ,1,'INTEGER')
      CALL FFKEY('NH4 ',NHI4 ,1,'INTEGER')
      CALL FFKEY('NH5 ',NHI5 ,1,'INTEGER')
      CALL FFKEY('NH6 ',NHI6 ,1,'INTEGER')
      CALL FFKEY('NH7 ',NHI7 ,1,'INTEGER')
      CALL FFKEY('NH8 ',NHI8 ,1,'INTEGER')
      CALL FFKEY('NH9 ',NHI9 ,1,'INTEGER')
      CALL FFKEY('NH10',NHI10,1,'INTEGER')
      CALL FFKEY('HI1 ',HIS1 ,2,'REAL')
      CALL FFKEY('HI2 ',HIS2 ,2,'REAL')
      CALL FFKEY('HI3 ',HIS3 ,2,'REAL')
      CALL FFKEY('HI4 ',HIS4 ,2,'REAL')
      CALL FFKEY('HI5 ',HIS5 ,2,'REAL')
      CALL FFKEY('HI6 ',HIS6 ,2,'REAL')
      CALL FFKEY('HI7 ',HIS7 ,2,'REAL')
      CALL FFKEY('HI8 ',HIS8 ,2,'REAL')
      CALL FFKEY('HI9 ',HIS9 ,2,'REAL')
      CALL FFKEY('HI10',HIS10,2,'REAL')
*
      CALL FFKEY('DEEM',DEEM,  1,'REAL')
      CALL FFKEY('STMA',STMA  ,1,'REAL')
      CALL FFKEY('STMI',STMI ,1,'REAL')
*
* *** read data cards
      PRINT *, 'G3 > gives the filename of the data cards to be read:'
      READ (*,'(A)') filnam
      IF (filnam.EQ.' ') filnam = 'testem5.dat'
      OPEN (unit=5,file=filnam,status='unknown',form='formatted')
*
*     filename should be 1st data card !
      READ(5,98)KEY,SPACES,NAME
98    FORMAT(A4,A2,A25)
*
      CALL GFFGO
*
        write(6,99) NAME
99      FORMAT(/,15x,'histogram file --> NAME:',A25)
C
C     INITIALIZE ZEBRA STRUCTURES
C
      CALL GZINIT
C
C     DEFINE STANDARD PARTICLES AND MATERIALS
C
      CALL GPART
      CALL GMATE
C
C     DEFINE GEOMETRY
C
      CALL UGEOM
      CALL GGCLOS
C
C     COMPUTE CROSS SECTIONS/ENERGY LOSSES
C
      CALL GPHYSI
C
C     PRINT MATERIALS,MEDIA,VOLUMES
C
      CALL GLOOK('MATE',LPRIN,NPRIN,IM)
      CALL GLOOK('TMED',LPRIN,NPRIN,IT)
      CALL GLOOK('VOLU',LPRIN,NPRIN,IV)
      IF(IM.NE.0) CALL GPRINT('MATE',0)
      IF(IT.NE.0) CALL GPRINT('TMED',0)
      IF(IV.NE.0) CALL GPRINT('VOLU',0)
C
C     DEFINE HISTOGRAMS
C
      CALL UHINIT
C
C     SOME MORE INITIALISATION
C
      SEDEP=0.
      SEDEP2=0.
      sanch=0.
      sanch2=0.
      sanne=0.
      sanne2=0.
      sanele=0.
      sanpos=0.
      sstep=0.
      s2step=0.
      stra=0.
      sref=0.
      nth0=0
*
      ZSTART=ZPOSAB-0.5*ZABS
      ZEND  =ZPOSAB+.5*ZABS
      if (((zworld.eq.zwddef).and.(rworld.eq.rwddef))
     + .and.((zabs.ne.zabdef).or.(rabs.ne.rabdef))) then 
       ZWORLD=2.*ZABS 
       RWORLD=2.*RABS 
       if((xvert.eq.xvdef).and.(yvert.eq.yvdef).and.(zvert.eq.zvdef))       
     +   then
        XVERT=0.
        YVERT=0.
        ZVERT=-0.5*ZWORLD
       endif
      endif
*
      END
+DECK,UGEOM.
      SUBROUTINE UGEOM
C
+SEQ,GCBANK
+SEQ,GCKINE
+SEQ,GCUNIT
+SEQ,GCTRAK
+SEQ,EDEPO
C
      DIMENSION AWAT(2),ZWAT(2),WWAT(2)
      DIMENSION AAIR(2),ZAIR(2),WAIR(2)
      DIMENSION PALL(3),PVOL(3)
C
C     COMPOUND/MIXTURE PARAMETERS
C
      DATA AWAT/1.01,16.00/
      DATA ZWAT/1.,8./
      DATA WWAT/2.,1./
      DATA AAIR/14.01,16.00/
      DATA ZAIR/7.,8./
      DATA WAIR/0.7,0.3/
C
C     DEFINE  MATERIALS
C
      CALL GSMATE(21,'BERYLLIUM$',9.010,4.,1.848,35.30,0.,0,0)
      CALL GSMATE(22,'ALUMINIUM$',26.98,13.,2.70,8.900,0.,0,0)
      CALL GSMATE(23,'SILICON$',28.09,14.,2.33,9.36,45.49,0,0)
      CALL GSMATE(24,'LIQUID ARGON$',39.95,18.,1.4,14.,83.71,0,0)
      CALL GSMATE(25,'IRON$',55.85,26.,7.87,1.760,0.,0,0)
      CALL GSMATE(26,'COPPER$',63.54,29.,8.96,1.430,0.,0,0)
      CALL GSMATE(27,'GOLD$',196.967,79.,19.32,0.33,0.,0,0)
      CALL GSMATE(28,'LEAD$',207.190,82.,11.35,0.560,0.,0,0)
C
      CALL GSMIXT(29,'WATER$',AWAT,ZWAT,1.00,-2,WWAT)
      CALL GSMIXT(30,'AIR$',AAIR,ZAIR,1.205E-3,+2,WAIR)
C
C     DEFINE MEDIA
C
      FIELDM=0.
      IFIELD=0
      TMAXFD=10.
      STEMAX=1.E+10
      DEEMAX=0.20
      EPSIL=0.0001
      STMIN=0.0010
C
      CALL GSTMED(99,'WORLD$',MATWLD,0,IFIELD,
     *            FIELDM,TMAXFD,STEMAX,DEEMAX,EPSIL,STMIN,0,0)
C
      IF(IGAUTO.LE.0) THEN
        DEEMAX=DEEM
        STMIN=STMI
        STEMAX=STMA
      ENDIF
      CALL GSTMED(1,'ABSORBER$',MATABS,0,IFIELD,
     *            FIELDM,TMAXFD,STEMAX,DEEMAX,EPSIL,STMIN,0,0)
C
C
C     DEFINE VOLUMES (WORLD+ABSORBER)
      PALL(1)=0.   
      PALL(2)=RWORLD     
      PALL(3)=0.5*ZWORLD
      CALL GSVOLU('ALL ','TUBE',99,PALL,3,IVOL)
C
      PVOL(1)=0.
      PVOL(2)=RABS
      PVOL(3)=.5*ZABS 
      CALL GSVOLU('DET ','TUBE',1,PVOL,3,IVOL)
C
C
C     BUILD  GEOMETRY
C
      CALL GSPOS('DET ',1,'ALL ',0.,0.,ZPOSAB,0,'ONLY')
C
C
      END
+DECK,UGLAST.
      SUBROUTINE UGLAST
C
+SEQ,GCBANK
+SEQ,GCFLAG
+SEQ,GCUNIT
+SEQ,GCONST
+SEQ,EDEPO
+SEQ,GCKINE.
      COMMON/KINLOC/TK,PARMAS,IPRIM
C
      CALL GLAST
C
      IF(IEVENT.GT.0) THEN
        AEV=FLOAT(IEVENT)
        SEDEP=SEDEP/AEV
        SE2=SEDEP2/AEV-SEDEP**2
        SEDEP2=0.
        IF(SE2.GT.0.) SEDEP2=SQRT(SE2/AEV)
*
        WRITE(CHMAIL,1002)SEDEP,SEDEP2
        CALL GMAIL(0,0)
        sstep=sstep/aev
        s2step=s2step/aev-sstep*sstep
        sigst=0.
        if(s2step.gt.0.) sigst=sqrt(s2step/aev)
        write(6,122)sstep,sigst
122     format(/,'  mean number of steps=',f15.3,' +- ',f15.3) 
        sanch=sanch/aev
        sigch2=sanch2/aev-sanch*sanch
        sigch=0.
        if(sigch2.gt.0.) sigch=sqrt(sigch2/aev)
        sanne=sanne/aev
        signe2=sanne2/aev-sanne*sanne
        signe=0.
        if(signe2.gt.0.) signe=sqrt(signe2/aev)
        write(6,123) sanch,sigch,sanne,signe
123     format(/,'  mean nb of charged secondaries=',f15.4,' +- ',f15.4, 
     +         /,'  mean nb of neutral secondaries=',f15.4,' +- ',f15.4) 
        sanele=sanele/aev
        sanpos=sanpos/aev
        write(6,124)sanele,sanpos
124     format(/,'  mean nb of e-s = ',f15.4,'  and e+s=',f15.4)
        stra=stra/aev
        sref=sref/aev
        write(6,125)stra,sref
125     format(/,'  (number) transmission coeff=',e12.4,
     +           '  reflexion coeff=',e12.4)
        write(6,126) nth0
126     format(/,'  nb of (theta<0.001*bin) events=',i6)
*
        CALL HISTDO
        CALL HPLEND
*
        CALL HRPUT(0,NAME,'N')
C
      ENDIF
C
1002  FORMAT(5X,'energy deposit=',E12.4,' +- ',E12.4)
C
      END
+DECK,UHINIT.
      SUBROUTINE UHINIT
C
+SEQ,GCBANK
+SEQ,GCKINE
+SEQ,EDEPO
      COMMON/KINLOC/TK,PARMAS,IPRIM
C
      IF(NHI1.GT.0) THEN
        CALL HBOOK1(1,'number of steps/event$'
     +               ,NHI1,HIS1(1),HIS1(2),0.)
      ENDIF
      IF(NHI2.GT.0) THEN
        CALL HBOOK1(2,'energy deposit in absorber (MeV)$'
     +  ,NHI2,HIS2(1),HIS2(2),0.)
      ENDIF
      IF(NHI3.GT.0) THEN
        CALL HBOOK1(3,'angle distribution at exit(deg)$'
     +  ,NHI3,HIS3(1),HIS3(2),0.)
      ENDIF
      IF(NHI4.GT.0) THEN
        CALL HBOOK1(4,'lateral distribution at exit(mm)$'
     +  ,NHI4,HIS4(1),HIS4(2),0.)
      ENDIF
      IF(NHI5.GT.0) THEN
        CALL HBOOK1(5,'kinetic energy of the primary at exit(MeV)$'
     +  ,NHI5,HIS5(1),HIS5(2),0.)
      ENDIF
      IF(NHI6.GT.0) THEN
        CALL HBOOK1(6,'angle distr. of backscattered primaries(deg)$'
     +  ,NHI6,HIS6(1),HIS6(2),0.)
      ENDIF
      IF(NHI7.GT.0) THEN
        CALL HBOOK1(7,'kinetic energy of backscattered primaries(deg)$'
     +  ,NHI7,HIS7(1),HIS7(2),0.)
      ENDIF
      IF(NHI8.GT.0) THEN
        CALL HBOOK1(8,'kinetic energy of the charged secondaries(deg)$'
     +  ,NHI8,HIS8(1),HIS8(2),0.)
      ENDIF
      IF(NHI9.GT.0) THEN
        CALL HBOOK1(9,'z of secondary charged vertices (mm)$'
     +  ,NHI9,HIS9(1),HIS9(2),0.)
      ENDIF
      IF(NHI10.GT.0) THEN
        CALL HBOOK1(10,'energy of gammas escaping the absorber(MeV)$'
*    +  ,NHI10,HIS10(1),HIS10(2),0.)
     +  ,NHI10,log10(HIS10(1)),log10(HIS10(2)),0.)
      ENDIF
*
      CALL HIDOPT(0,'STAT')
*
      END
+DECK,GUKINE.
      SUBROUTINE GUKINE
C
+SEQ,GCBANK
+SEQ,GCFLAG
+SEQ,GCKINE
+SEQ,GCONST
+SEQ,EDEPO
      COMMON/KINLOC/TK,PARMAS,IPRIM
C
      DIMENSION VERTEX(3),PLAB(3)
      SAVE VERTEX,PLAB
      DATA VERTEX/3*0./
      DATA PLAB/3*0./
      DATA IFIRST/0/
C  
      anbstep=1.e-6
      anch=0.
      anne=0.
      anele=0.
      anpos=0.
      EDEP=0.
      tra=0.
      ref=0.
C
      VERTEX(1)=XVERT     
      VERTEX(2)=YVERT     
      VERTEX(3)=ZVERT     
C
      IF(IFIRST.EQ.0) THEN
        IFIRST=1
        IPRIM=IKINE
        TK=PKINE(1)
        write(6,2255) tk
2255    format(//,5x,'tkin=',f12.6,/)
        PARMAS=PKINE(4)
        PKINE(1)=SQRT(TK*(TK+2.*PARMAS))
      ENDIF
C
      THETA=PKINE(2)*DEGRAD
      PHI=PKINE(3)*DEGRAD
C
      PLAB(1)=PKINE(1)*SIN(THETA)*COS(PHI)
      PLAB(2)=PKINE(1)*SIN(THETA)*SIN(PHI)
      PLAB(3)=PKINE(1)*COS(THETA)
C
      CALL GSVERT(VERTEX,0,0,0,0,NVERT)
      CALL GSKINE(PLAB,IKINE,NVERT,0,0,NT)
C
      IF(IDEBUG.EQ.1) THEN
        IF(ISWIT(1).EQ.1) THEN
          CALL GPRINT('VERT',0)
          CALL GPRINT('KINE',0)
        ENDIF
      ENDIF
C
      END
+DECK6,GUSTEP.
      SUBROUTINE GUSTEP
C
+SEQ,GCBANK
+SEQ,GCTMED
+SEQ,GCKINE
+SEQ,GCKING
+SEQ,GCFLAG
+SEQ,GCTRAK
+SEQ,GCVOLU
+SEQ,GCCUTS
+SEQ,GCONST
+SEQ,GCUNIT
+SEQ,EDEPO
      COMMON/KINLOC/TK,PARMAS,IPRIM
C
      parameter ( facdeg=180./3.1415927 )
      DATA IEVOLD/0/
C
*   
      IF(IEVOLD.NE.IEVENT) THEN
        IEVOLD=IEVENT
        ITOLD=0
        NMOLD=0
        ZO=VERT(3)
        RO=sqrt(vect(1)**2+vect(2)**2)
      ENDIF
C
C     TRACK FLAG
C
      ITFL=ISTAK+10000*ITRA+100000*IVERT
      IF(ITOLD.NE.IEVENT) THEN
        ZO=VERT(3)
        RO=sqrt(vect(1)**2+vect(2)**2)
      ENDIF
C     
      Z=VECT(3)
C
      IF(NGKINE.GT.0) THEN
        do 10 i=1,ngkine
        itypa=gkin(5,i)
*       all the charged secondaries
        if(itypa.ne.1)  call hfill(9,10.*GPOS(3,i),0.,1.)
*       in absorber only !
        if(NUMED.EQ.1) then
          if(itypa.eq.1) then
             anne=anne+1.
          else
             anch=anch+1.
             if(itypa.eq.2) anpos=anpos+1.
             if(itypa.eq.3) anele=anele+1.
             tsec=1000.*(GKIN(4,i)-510.999e-6)
             call hfill(8,tsec,0.,1.)
          endif 
        endif 
        CALL GSKING(I)
10      continue
      ENDIF
*
      R=SQRT(VECT(1)**2+VECT(2)**2)
      if((r.le.rabs).and.(zo.lt.zend).and.(z.ge.zend)) then
       if(vect(6).gt.0.) then
        if(ipart.eq.1) call hfill(10,log10(1000.*gekin),0.,1.)
        if(ipart.eq.iprim) then
          tra=1.
          call hfill(5,1000.*gekin,0.,1.)
          if((1-vect(6)).gt.1.e-6) then
            theta=acos(vect(6))
          else
            theta=sqrt(2.*(1.-vect(6)))
          endif
          if(nhi3.gt.0) then
            h1=his3(1)/facdeg
            h2=his3(2)/facdeg
            dth=(h2-h1)/float(nhi3)
            ibin=int((theta-h1)/dth)+1
            if((ibin.le.0).or.(ibin.gt.nhi3)) then
              w=1.
            else
              th=ibin*dth
              if(theta.GT.0.001*dth) then
                w=PI/(64800.*dth*sin(theta))
              else
                nth0=nth0+1
                if(nth0.le.10) then
                thdeg=theta*facdeg
                write(6,997) thdeg
997    format('theta<0.001*dth (from plot excluded)'
     +                 ,' theta=',e12.4,' deg') 
                endif
                w=0.
              endif
            endif
            theta = facdeg*theta
            call hfill(3,theta,0.,w)
          endif
          call hfill(4,10.*R,0.,1.)
        endif
       endif
      endif
      if((r.le.rabs).and.(zo.gt.zstart).and.(z.le.zstart)) then
       if(vect(6).lt.0.) then
        if(ipart.eq.iprim) then
          ref=1.
          call hfill(7,1000.*gekin,0.,1.)
          if((1.+vect(6)).gt.1.e-6) then
            theta=acos(vect(6))-PIBY2
          else
            theta=sqrt(2.*(1.+vect(6)))
          endif
          if(nhi6.gt.0) then
            h1=his6(1)/facdeg
            h2=his6(2)/facdeg
            dth=(h2-h1)/float(nhi6)
            ibin=int((theta-h1)/dth)+1
            if((ibin.le.0).or.(ibin.gt.nhi6)) then
              w=0.
            else
              th=ibin*dth
              if(theta.GT.0.001*dth) then
                w=PI/(64800.*dth*sin(theta))
              else
                thdeg=theta*facdeg
                write(6,997) thdeg
                w=0.
              endif
              theta = facdeg*theta
              call hfill(6,theta,0.,w)
            endif
          endif
        endif
       endif
      endif
         
      if((r.le.rabs).and.(z.ge.zstart).and.(z.le.zend)) then
       if((ro.le.rabs).and.(zo.ge.zstart).and.(zo.le.zend)) then
        IF(NUMED.EQ.1) THEN
          anbstep=anbstep+1.
          EDEP = EDEP+DESTEP
        ENDIF
       endif
      endif
C
      ITOLD=IEVENT
      ZO=Z
      RO=R
C
      END
+DECK,GUOUT.
      SUBROUTINE GUOUT
C
+SEQ,GCBANK
+SEQ,GCFLAG
+SEQ,GCUNIT
+SEQ,EDEPO
+SEQ,GCONST
      COMMON/KINLOC/TK,PARMAS,IPRIM
*
      call hfill(1,anbstep,0.,1.)
      sstep=sstep+anbstep
      s2step=s2step+anbstep*anbstep
      sanch = sanch+anch
      sanch2=sanch2+anch*anch
      sanne = sanne+anne
      sanne2=sanne2+anne*anne
      sanele=sanele+anele
      sanpos=sanpos+anpos
        SEDEP=SEDEP+EDEP
        SEDEP2=SEDEP2+EDEP**2
      stra=stra+tra
      sref=sref+ref
*     detector noise,first edep in keV
      eein=1000.*EDEP
      CALL HFILL(2,eein,0.,1.0)
C
      END
+DECK,GRUN.
      SUBROUTINE GRUN
*.
*.    ******************************************************************
*.    *                                                                *
*.    *       Steering routine to process all the events               *
*.    *                                                                *
*.    *    ==>Called by : <USER>, main program                         *
*.    *       Author    R.Brun  *********                              *
*.    *                                                                *
*.    ******************************************************************
*.
+SEQ,GCBANK
+SEQ,GCFLAG
+SEQ,GCUNIT
+SEQ,GCTIME
      SAVE IFIRST
      DATA IFIRST/0/
*.
*.    ------------------------------------------------------------------
*.
*             Keep starting time
*
      IF(IFIRST.EQ.0)THEN
         IFIRST=1
         CALL TIMEL(TIMINT)
      ENDIF
*
   10 IF(IEVENT.LT.NEVENT) THEN
         IEVENT=IEVENT+1
*
*             Initialises event partition
         LOUT=9
         CALL GTRIGI
         LOUT=6
*             Process one event (trigger)
*
         CALL GTRIG
*
*             Clear event partition
*
         CALL GTRIGC
*
         IF(IEORUN.EQ.0) THEN
*
*             Check time left
*
            IF(ITIME.LE.0)GO TO 10
            IF(MOD(IEVENT,ITIME).NE.0)GO TO 10
            CALL TIMEL(TIMNOW)
            IF(TIMNOW.GT.TIMEND)GO TO 10
            WRITE(CHMAIL,10000)TIMEND
            CALL GMAIL(0,2)
            IEORUN = 1
         ENDIF
      ENDIF
*
10000 FORMAT(5X,'***** THE JOB STOPS NOW BECAUSE THE TIME LEFT IS LESS',
     +' THAN     ',F8.3,' SECONDS *****')
      END
+DECK,GTRIGI
*CMZ :  3.15/01 28/10/91  13.35.29  by  Federico Carminati
*-- Author :
      SUBROUTINE GTRIGI
C.
C.    ******************************************************************
C.    *                                                                *
C.    *       Initialises event partition                              *
C.    *    ==>Called by : GRUN ,<GXINT> GINC4                          *
C.    *       Author    R.Brun  *********                              *
C.    *                                                                *
C.    ******************************************************************
C.
+SEQ,GCBANK
+SEQ,GCNUM
+SEQ,GCFLAG
+SEQ,GCUNIT
+SEQ,GCTRAK
C.
C.    ------------------------------------------------------------------
C.
      IEOTRI=0
      NTRACK=0
      NVERTX=0
      IDEBUG=0
      TOFG  =0.
C
C               Print event number and random number generator
C
      CALL GRNDMQ(NRNDM(1),NRNDM(2),0,'G')
C
C               Create event header bank
C
      CALL MZBOOK(IXDIV,JHEAD,JHEAD,1,'HEAD', 1, 1,NHEAD,2,0)
      IDEVT=IDEVT+1
      IQ(JHEAD+1)=IDRUN
      IQ(JHEAD+2)=IDEVT
      IQ(JHEAD+3)=NRNDM(1)
      IQ(JHEAD+4)=NRNDM(2)
C
      IF(ITEST.GT.0)THEN
         IF(MOD(IEVENT,ITEST).EQ.0)THEN
*           WRITE (CHMAIL,1000) IEVENT,IDEVT,(NRNDM(I),I = 1,2)
*           CALL GMAIL(0,0)
         ENDIF
      ENDIF
C
      IF(IEVENT.GE.IDEMIN.AND.IEVENT.LE.IDEMAX)IDEBUG=1
C
 1000 FORMAT(' **** GTRIGI: IEVENT=',I7,' IDEVT=',I7,
     +' Random Seeds = ',I10,2X,I10)
  99  RETURN
      END
+DECK,ffread,T=data.
FILE  geant3.siplots 
LIST
TRIGGERS 100000
DEBUG    1  1  1
SWIT     1
ANNI     1
BREM     1
COMP     1
DRAY     1
MULS     1
PAIR     1
PHOT     1
LOSS     1
RAYL     0
HADR     0
PRINT  'MATE'  'VOLU'  'TMED'
MATA   23   
ZABS   0.0530
RABS   10.0
TIME   2=5.
KINE  1=3 2=0.001000  3=0.0  4=0.0  5=0.000511
CUTS 10.0e-6  10.0e-6  10.0e-6  10.0e-6  10.0e-6  10.0e-6
AUTO   1
ABAN   0
NH1  50
HI1  0.     50.
NH2  60.
HI2  0.     1.2
NH3  90
HI3  0.    90.
NH4  50
HI4  0.   2.5
NH5  50
HI5  0.    1.
NH6  90
HI6  0.    90.
NH7  50
HI7  0.    1.
NH8  50
HI8  0.0    0.5
NH9  100
HI9  -0.5   0.5
NH10  80.
HI10  0.01  1.     
END
+QUIT.
