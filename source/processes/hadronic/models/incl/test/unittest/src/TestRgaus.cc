//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
// $Id: TestRgaus.cc,v 1.1 2007-05-23 09:56:26 miheikki Exp $ 
// Translation of INCL4.2/ABLA V3 
// Pekka Kaitaniemi, HIP (translation)
// Christelle Schmidt, IPNL (fission code)
// Alain Boudard, CEA (contact person INCL/ABLA)
// Aatos Heikkinen, HIP (project coordination)

// Author: Pekka Kaitaniemi <mailto:pekka.kaitaniemi@helsinki.fi>

#include "TestRgaus.hh"

#include "InclAblaTestDifferencePlotter.hh"

#include "TH1D.h"
#include "TCanvas.h"
#include "TGraph.h"

//#include "InclAblaFunctions.hh"
#include "functionwrapper.hh"
#include "commonwrapper.hh"

#ifndef __CINT__
#include "G4Incl.hh"
#include "G4InclDataDefs.hh"
#endif

#include <iostream>

ClassImp(TestRgaus)

  ///////////////////////////////////////////////////////////////////////////////////
  /* BEGIN_HTML
     <h1>Gaussian random number generator test</h1>

     <p>
     This class tests INCL built-in gaussian random number generator.
     </p>
     <p>
     <h3>Comparison between C++ and FORTRAN implementations</h3>

     <img src="plots/TestRgaus.png"/>
     </p>
     END_HTML */
  
  TestRgaus::TestRgaus()
{
  setUnitName("G4Incl::gaussianRandom");
  setOriginalUnitName("rgaus");
  setPlotFileName("htmldoc/plots/TestRgaus.png");
  setLogFileName("htmldoc/logs/TestRgaus.log");
  setLinesOfCode(8);
  setTestStatus(false);
}

TestRgaus::~TestRgaus()
{

}

void TestRgaus::runMe()
{
  // This handles the actual testing.
	
  G4Incl *incl = new G4Incl();

  const Int_t VerboseLevel = 0;
  const Int_t collectNumbers = 100000;

  // Set the error marginal:
  const Float_t errorMarginal = 1e-9;

  // Allocate the data structure containing the input for Gaussian generator.
  G4Hazard *hazard = (G4Hazard*) malloc(sizeof(G4Hazard));

  // Set random seeds:
  int seed = 38457;
  int igraineseed = 177833;

  // Used by C++ code
  hazard->ial = seed;
  hazard->igraine[10] = igraineseed;

  incl->setHazardData(hazard);
	
  // Used by FORTRAN code
  gHazard->ial = seed;
  gHazard->IY[10] = igraineseed;

  // Output variables
  double rndm;
  float frndm;

  // Histogram for random numbers generated by C++ code:
  TH1D *cpprndm = new TH1D("cpprndm", "Subroutine rgauss", 100, -4.0, 4.0);
  // Histogram for random numbers generated by FORTRAN code:
  TH1D *fortrndm = new TH1D("fortrndm", "Subroutine rgauss", 100, -4.0, 4.0);

  // Collect the random numbers into histograms:
  for(Int_t i = 0; i < collectNumbers; i++) {
    incl->gaussianRandom(&rndm);
    rgauss_(&frndm);
    cpprndm->Fill(rndm);
    fortrndm->Fill(frndm);
  }

  // Calculate the integral over the difference of the histograms:
  Int_t integral = 0;
  Int_t diff = 0;
  TGraph *relDiff = new TGraph(cpprndm->GetNbinsX());
  for(Int_t i = 0; i < cpprndm->GetNbinsX(); i++) {
    diff = abs(cpprndm->GetBinContent(i) - fortrndm->GetBinContent(i));
    integral = integral + diff;
		
    if(fortrndm->GetBinContent(i) != 0) {
      relDiff->SetPoint(i, cpprndm->GetBinLowEdge(i), 100.0*(cpprndm->GetBinContent(i) - fortrndm->GetBinContent(i))/fortrndm->GetBinContent(i));
    }
    else {
      relDiff->SetPoint(i, cpprndm->GetBinLowEdge(i), 0.0);
    }

    if(diff != 0 && VerboseLevel > 0) {
      std::cout <<"Possible problem:" << std::endl;
      std::cout <<"Diff: " << diff << std::endl;
      std::cout <<"Bin: " << i << std::endl;
      std::cout <<"BinContents: " << std::endl;
      std::cout <<"C++: " << cpprndm->GetBinContent(i) << std::endl;
      std::cout <<"Fortran: " << fortrndm->GetBinContent(i) << std::endl;
      diff = 0;
    }
  }

  std::cout <<"Integral of histogram differences: " << integral << std::endl;

  TCanvas *c1 = new TCanvas();
  c1->Divide(2,2);

  // Draw the random number distributions:
  c1->cd(1);
  cpprndm->Draw();
  fortrndm->Draw("P, same");

  c1->cd(4);
  relDiff->SetTitle("Relative difference C++/FORTRAN");
  relDiff->GetXaxis()->SetTitle("Random number");
  relDiff->GetYaxis()->SetTitle("Relative difference (%)");
  relDiff->Draw("ap");

  c1->SaveAs(getPlotFileName());
  
  delete c1;
  delete cpprndm;
  delete fortrndm;
  delete relDiff;

  // If the integral is smaller than our errorMarginal the test is passed.
  if(integral < errorMarginal) {
    // Passed
    setTestStatus(true);
  }
  else {
    // Failed
    setTestStatus(false);
  }
}
