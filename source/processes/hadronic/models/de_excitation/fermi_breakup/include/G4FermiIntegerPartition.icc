//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
//
// Hadronic Process: Nuclear De-excitations
// by V. Lara

inline G4FermiIntegerPartition::G4FermiIntegerPartition()
  : total(0), enableNull(false)
{
}

inline G4FermiIntegerPartition::~G4FermiIntegerPartition()
{
}

inline G4FermiIntegerPartition::G4FermiIntegerPartition(const G4FermiIntegerPartition& right)
  : total(right.total), enableNull(right.enableNull), partition(right.partition)
{
}


inline const G4FermiIntegerPartition&
G4FermiIntegerPartition::operator=(const G4FermiIntegerPartition& right)
{
  total=right.total;
  enableNull=right.enableNull;
  partition=right.partition;
  return *this;
}

inline G4bool G4FermiIntegerPartition::
operator==(const G4FermiIntegerPartition& right)
{
  return (total == right.total &&
	  enableNull == enableNull &&
	  partition == right.partition);
}

inline G4bool G4FermiIntegerPartition::
operator!=(const G4FermiIntegerPartition& right)
{
  return (total != right.total ||
	  enableNull != right.enableNull ||
	  partition != right.partition);
}

inline std::vector<G4int> G4FermiIntegerPartition::
GetPartition() const
{
  return partition;
}

inline void G4FermiIntegerPartition::
EnableNull(const G4bool v)
{
  enableNull=v;
  return;
}

#ifdef G4FermiIntegerPartition_debug

inline G4int G4FermiIntegerPartition::GetSum()
{
  return std::accumulate(partition.begin(), partition.end(), 0);
}

#endif

