//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
inline void G4PreCompoundEmission::Initialize(const G4Fragment & aFragment) 
{
  theFragmentsVector->Initialize(aFragment);
  return;
}


inline G4double G4PreCompoundEmission::GetTotalProbability(const G4Fragment & aFragment) 
{
  return theFragmentsVector->CalculateProbabilities(aFragment);
}

inline void G4PreCompoundEmission::SetUp(const G4Fragment & aFragment)
{
  // This should be the projectile energy. If I would know which is the projectile (proton, neutron)
  // I could remove the binding energy. But, what happens if INC precedes precompound? This approximation
  // seems to work well enough
  ProjEnergy = aFragment.GetExcitationEnergy();
  theIncidentDirection = aFragment.GetMomentum().vect().unit();
  theFragmentsVector->ResetStage();
  return;
}
