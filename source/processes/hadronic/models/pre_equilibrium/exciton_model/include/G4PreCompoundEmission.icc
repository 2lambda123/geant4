//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
inline void G4PreCompoundEmission::Initialize(const G4Fragment & aFragment) 
{
  theFragmentsVector->Initialize(aFragment);
  return;
}


inline G4double G4PreCompoundEmission::GetTotalProbability(const G4Fragment & aFragment) 
{
  return theFragmentsVector->CalculateProbabilities(aFragment);
}

inline void G4PreCompoundEmission::SetUp(const G4Fragment & aFragment)
{
  // This should be the projectile energy. If I would know which is the projectile (proton, neutron)
  // I could remove the binding energy. But, what happens if INC precedes precompound? This approximation
  // seems to work well enough
  ProjEnergy = aFragment.GetExcitationEnergy();
  theIncidentDirection = aFragment.GetMomentum().vect().unit();
  theFragmentsVector->ResetStage();
  return;
}
