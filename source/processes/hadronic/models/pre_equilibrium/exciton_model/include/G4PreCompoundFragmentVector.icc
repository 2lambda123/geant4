//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
//
// $Id: G4PreCompoundFragmentVector.icc,v 1.1 2003-08-26 18:54:17 lara Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
// Hadronic Process: Nuclear Preequilibrium
// by V. Lara 


inline G4PreCompoundFragmentVector::G4PreCompoundFragmentVector(pcfvector * avector) :
  theChannels(avector), TotalEmissionProbability(0.0)
{
}


inline G4PreCompoundFragmentVector::~G4PreCompoundFragmentVector()
{
}

inline void G4PreCompoundFragmentVector::SetVector(pcfvector * avector)
{
  theChannels = avector;
}

inline void 
G4PreCompoundFragmentVector::
Initialize(const G4Fragment & aFragment)
{
    TotalEmissionProbability = 0.0;
    for (pcfvector::iterator i=theChannels->begin(); 
	 i != theChannels->end(); i++) (*i)->Initialize(aFragment);
    return;
}

inline void G4PreCompoundFragmentVector::
ResetStage()
{
  for (pcfvector::iterator i=theChannels->begin(); i != theChannels->end(); i++)
    (*i)->ResetStage();
  return;
}
