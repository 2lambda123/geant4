//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
// $Id: G4PreCompoundFragmentVector.icc,v 1.3 2006-06-29 20:58:20 gunter Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
// Hadronic Process: Nuclear Preequilibrium
// by V. Lara 


inline G4PreCompoundFragmentVector::G4PreCompoundFragmentVector(pcfvector * avector) :
  theChannels(avector), TotalEmissionProbability(0.0)
{
}


inline G4PreCompoundFragmentVector::~G4PreCompoundFragmentVector()
{
}

inline void G4PreCompoundFragmentVector::SetVector(pcfvector * avector)
{
  theChannels = avector;
}

inline void 
G4PreCompoundFragmentVector::
Initialize(const G4Fragment & aFragment)
{
    TotalEmissionProbability = 0.0;
    for (pcfvector::iterator i=theChannels->begin(); 
	 i != theChannels->end(); i++) (*i)->Initialize(aFragment);
    return;
}

inline void G4PreCompoundFragmentVector::
ResetStage()
{
  for (pcfvector::iterator i=theChannels->begin(); i != theChannels->end(); i++)
    (*i)->ResetStage();
  return;
}
