//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
//
// $Id: G4VPreCompoundFragment.icc,v 1.2 2005-06-04 13:48:42 jwellisc Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
// by V. Lara


inline const G4double G4VPreCompoundFragment::
GetA() const 
{ 
  return theA;
}

inline const G4double G4VPreCompoundFragment::    
GetZ() const 
{ 
  return theZ;
}

inline const G4double G4VPreCompoundFragment::    
GetRestA() const 
{ 
  return theRestNucleusA;
}
    
inline const G4double G4VPreCompoundFragment::
GetRestZ() const 
{ 
  return theRestNucleusZ;
}
    
inline const G4double G4VPreCompoundFragment::
GetCoulombBarrier() const 
{
  return theCoulombBarrier;
}
    
inline const G4double G4VPreCompoundFragment::
GetBindingEnergy() const 
{
  return theBindingEnergy;
}

inline const G4double G4VPreCompoundFragment::
GetMaximalKineticEnergy() const 
{ 
  return theMaximalKineticEnergy;
}

inline const G4double G4VPreCompoundFragment::
GetEnergyThreshold() const 
{ 
  return theMaximalKineticEnergy - theCoulombBarrier;
}
    
inline const G4double G4VPreCompoundFragment::
GetEmissionProbability() const 
{ 
  return theEmissionProbability;
}

inline const G4double G4VPreCompoundFragment::
GetNuclearMass(void) const 
{
  return G4ParticleTable::GetParticleTable()->
      GetIonTable()->GetIonMass(static_cast<G4int>(theZ),static_cast<G4int>(theA));
}



inline const G4double G4VPreCompoundFragment::
GetRestNuclearMass() const 
{
  return G4ParticleTable::GetParticleTable()->GetIonTable()->
    GetIonMass(static_cast<G4int>(theRestNucleusZ),static_cast<G4int>(theRestNucleusA));
}



inline const G4double G4VPreCompoundFragment::
GetReducedMass() const 
{
  return GetRestNuclearMass()*GetNuclearMass()/
    (GetNuclearMass()+GetRestNuclearMass());
}

inline const G4LorentzVector G4VPreCompoundFragment::
GetMomentum() const 
{ 
  return theMomentum;
}
    
inline void G4VPreCompoundFragment::
SetMomentum(const G4LorentzVector & value) 
{ 
  theMomentum = value;
}
    
inline void G4VPreCompoundFragment::
SetFragmentName(const G4String& aName) 
{ 
  theFragmentName = aName; 
}

inline const G4String G4VPreCompoundFragment::
GetName() const 
{ 
  return theFragmentName; 
}
    
inline void G4VPreCompoundFragment::ResetStage()
{
  theStage = 1;
}

inline G4int G4VPreCompoundFragment::GetStage() const
{
  return theStage;
}

inline void G4VPreCompoundFragment::IncrementStage()
{
  theStage++;
}

