//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
// -*- C++ -*-
// AID-GENERATED
// =========================================================================
// This class was generated by AID - Abstract Interface Definition          
// DO NOT MODIFY, but use the org.freehep.aid.Aid utility to regenerate it. 
// =========================================================================
#ifndef AIDA_IDATAPOINTSETFACTORY_H
#define AIDA_IDATAPOINTSETFACTORY_H 1

//  This file is part of the AIDA library
//  Copyright (C) 2002 by the AIDA team.  All rights reserved.
//  This library is free software and under the terms of the
//  GNU Library General Public License described in the LGPL.txt 

#include <string>

namespace AIDA {

class ICloud1D;
class ICloud2D;
class ICloud3D;
class IDataPointSet;
class IHistogram1D;
class IHistogram2D;
class IHistogram3D;
class IProfile1D;
class IProfile2D;

/**
 * Basic user-level interface for creating a factory
 * of IDataPointSet.
 * 
 * @author The AIDA team (http://aida.freehep.org/)
 *
 */

class IDataPointSetFactory {

public: 
    /// Destructor.
    virtual ~IDataPointSetFactory() { /* nop */; }

    /**
     * Create an empty IDataPointSet.
     * @param name        The name of the IDataPointSet.
     * @param title       The title of the IDataPointSet.
     * @param dimOfPoints The dimension of the IDataPoints that can be stored in the set.
     * @return            The newly created IDataPointSet.
     *
     */
    virtual IDataPointSet * create(const std::string & name, const std::string & title, int dimOfPoints) = 0;

    /**
     * Create an empty IDataPointSet.
     * @param nameAndTitle The name and the title of the IDataPointSet.
     * @param dimOfPoints  The dimension of the IDataPoints that can be stored in the set.
     * @return             The newly created IDataPointSet.
     *
     */
    virtual IDataPointSet * create(const std::string & nameAndTitle, int dimOfPoints) = 0;

    /**
     * Make a copy of a given IDataPointSet.
     * @param name         The name of the copy IDataPointSet.
     * @param dataPointSet The IDataPointSet to be copied.
     * @return             The copy of the given IDataPointSet.
     *
     */
    virtual IDataPointSet * createCopy(const std::string & name, const IDataPointSet & dataPointSet) = 0;

    /**
     * Destroy a given IDataPointSet.
     * @param dataPointSet The IDataPointSet to be destroyed.
     * @return false If dataPointSet cannot be destroyed.
     *
     */
    virtual bool destroy(IDataPointSet * dataPointSet) = 0;

    /**
     * Create an IDataPointSet from an IHistogram1D.
     * @param name The name of the IDataPointSet.
     * @param hist The IHistogram1D from which the data is taken.
     * @return     The newly created IDataPointSet.
     *
     */
    virtual IDataPointSet * create(const std::string & name, const IHistogram1D & hist) = 0;

    /**
     * Create an IDataPointSet from an IHistogram2D.
     * @param name The name of the IDataPointSet.
     * @param hist The IHistogram2D from which the data is taken.
     * @return     The newly created IDataPointSet.
     *
     */
    virtual IDataPointSet * create(const std::string & name, const IHistogram2D & hist) = 0;

    /**
     * Create an IDataPointSet from an IHistogram3D.
     * @param name The name of the IDataPointSet.
     * @param hist The IHistogram3D from which the data is taken.
     * @return     The newly created IDataPointSet.
     *
     */
    virtual IDataPointSet * create(const std::string & name, const IHistogram3D & hist) = 0;

    /**
     * Create an IDataPointSet from an ICloud1D.
     * @param name  The name of the IDataPointSet.
     * @param cloud The ICloud1D from which the data is taken.
     * @return      The newly created IDataPointSet.
     *
     */
    virtual IDataPointSet * create(const std::string & name, const ICloud1D & cloud) = 0;

    /**
     * Create an IDataPointSet from an ICloud2D.
     * @param name  The name of the IDataPointSet.
     * @param cloud The ICloud2D from which the data is taken.
     * @return      The newly created IDataPointSet.
     *
     */
    virtual IDataPointSet * create(const std::string & name, const ICloud2D & cloud) = 0;

    /**
     * Create an IDataPointSet from an ICloud3D.
     * @param name  The name of the IDataPointSet.
     * @param cloud The ICloud3D from which the data is taken.
     * @return      The newly created IDataPointSet.
     *
     */
    virtual IDataPointSet * create(const std::string & name, const ICloud3D & cloud) = 0;

    /**
     * Create an IDataPointSet from an IProfile1D.
     * @param name    The name of the IDataPointSet.
     * @param profile The IProfile1D from which the data is taken.
     * @return        The newly created IDataPointSet.
     *
     */
    virtual IDataPointSet * create(const std::string & name, const IProfile1D & profile) = 0;

    /**
     * Create an IDataPointSet from an IProfile2D.
     * @param name    The name of the IDataPointSet.
     * @param profile The IProfile2D from which the data is taken.
     * @return        The newly created IDataPointSet.
     *
     */
    virtual IDataPointSet * create(const std::string & name, const IProfile2D & profile) = 0;

    /**
     * Add two IDataSetPoint, point by point and measurement by measurement.
     * @param name          The name of the resulting IDataPointSet
     * @param dataPointSet1 The first member of the addition.
     * @param dataPointSet2 The second member of the addition.
     *
     */
    virtual IDataPointSet * add(const std::string & name, const IDataPointSet & dataPointSet1, const IDataPointSet & dataPointSet2) = 0;

    /**
     * Subtract two IDataSetPoint, point by point and measurement by measurement.
     * @param name          The name of the resulting IDataPointSet
     * @param dataPointSet1 The first member of the subtraction.
     * @param dataPointSet2 The second member of the subtraction.
     * @param strategy      The strategy of how to perform the subtraction. The default corresponds to
     *                      uncorrelated Gaussian error propagation.
     *
     */
    virtual IDataPointSet * subtract(const std::string & name, const IDataPointSet & dataPointSet1, const IDataPointSet & dataPointSet2) = 0;

    /**
     * Multiply two IDataSetPoint, point by point and measurement by measurement.
     * @param name          The name of the resulting IDataPointSet
     * @param dataPointSet1 The first member of the multiplication.
     * @param dataPointSet2 The second member of the multiplication.
     * @param strategy      The strategy of how to perform the multiplication. The default corresponds to
     *                      uncorrelated Gaussian error propagation.
     *
     */
    virtual IDataPointSet * multiply(const std::string & name, const IDataPointSet & dataPointSet1, const IDataPointSet & dataPointSet2) = 0;

    /**
     * Divide two IDataSetPoint, point by point and measurement by measurement.
     * @param name          The name of the resulting IDataPointSet
     * @param dataPointSet1 The first member of the division.
     * @param dataPointSet2 The second member of the division.
     * @param strategy      The strategy of how to perform the division. The default corresponds to
     *                      uncorrelated Gaussian error propagation.
     *
     */
    virtual IDataPointSet * divide(const std::string & name, const IDataPointSet & dataPointSet1, const IDataPointSet & dataPointSet2) = 0;

    /**
     * Calculate weighted means of two IDataSetPoint, point by point and measurement by measurement.
     * @param name          The name of the resulting IDataPointSet
     * @param dataPointSet1 The first IDataPointSet.
     * @param dataPointSet2 The second IDataPointSet.
     * @param strategy      The strategy of how to calculate the weighted means. The default corresponds to
     *                      uncorrelated Gaussian error propagation.
     *
     */
    virtual IDataPointSet * weightedMean(const std::string & name, const IDataPointSet & dataPointSet1, const IDataPointSet & dataPointSet2) = 0;
}; // class
}; // namespace AIDA
#endif /* ifndef AIDA_IDATAPOINTSETFACTORY_H */
