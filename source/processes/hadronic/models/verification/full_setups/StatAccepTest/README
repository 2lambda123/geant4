
 Last update: 14-Dec-2005
 ========================

 This directory contains a configurable calorimeter setup to be used
 as statistical acceptance suite of Geant4, that is to validate a
 new release with respect the previous one (regression test).

 The setup Bash script, exerciseSetup.sh, is meant for the Grid,
 under the assumption that all the needed software is installed
 in the directory  $VO_GEANT4_SW_DIR/dirInstallations 
 (the environmental variable VO_GEANT4_SW_DIR is automatically
  defined when you run on the Grid).

 To add flexibility to this tool, it is possible to send to a
 Grid site, together with the job, also a Geant4 release and this 
 application directory (StatAccepTest/). If such Geant4 release is 
 found in the parent directory of the application directory 
 (i.e. in ../StatAccepTest/), then this release is used; if not, 
 then it will be taken from $VO_GEANT4_SW_DIR/dirInstallations .

 If you want to run on your computer, then you need to modify
 the setup script: look at  exerciseSetup.sh  and  build.py .

 In the main program  * mainStatAccepTest.cc *  you can select 
 the Physics List (LHEP, QGSP, QGSP_BERT, QGSP_BIC), in the macro
 command file  * exercise.g4 *  you can choose which particle to shoot,
 the beam energy, the number of events, and the kind of calorimeter
 you are interested in, and also, eventually, a transverse magnetic 
 field (see that command file to look at the various options available).

 The calorimeter is a box, with the beam along the x-axis, and
 whose dimensions are the same along y, z (i.e. transverse dimensions
 with respect the beam), and also equal to the total absorber
 thickness along the beam (x-) axis. This size (total thickness
 of the absorber) can be specified either in unit of lambdas of
 the absorber material, or in normal length in [mm]. 
 The user has to specified also the thickness (in [mm]) of a
 single layer of active material, and the number of layers.
 In the case of an homogeneous calorimeter, for instance PbWO4,
 the number of layers indicate essentially the number of sampling
 we can have for the longitudinal shower profile.
 Finally, the number of bins for the lateral shower profile should
 also be specified, and the width (radius) of the first bin in unit
 of lambda (of the absorber) or in [mm]. The bins have incresing
 size as the radius grows, in such a way to keep enough statistics
 in spite of the rapid decrease of the shower with the radius.   
 Notice that, due to HBOOK limitations, there should be not
 more than 100 layers for the longitudinal shower profile, 
 and not more than 30 layers for the lateral shower profile.

 The output of the program is an HBOOK ntuple  * ntuple.hbook *
 which contains some physics variables, like the total energy 
 deposit in the active layers, the total deposit in the whole 
 calorimeter, the energy deposit in each active layer, and the 
 transverse energy deposition sum over all the active layers, 
 in a certain number of radial bins.

 The ntuple is then used in the stand-alone (i.e. independent from
 Geant4) program  pvalue , in the subdirectory dirStat/.
 This program reads two ntuples, ntuple_a.hbook and ntuple_b.hbook,
 which can be obtained by running the same simulation program,
 mainStatAccepTest, and with same configuration, run.g4,
 for the two versions of Geant4 that we want to compare.
 The program pvalue make the statitical tests between the
 various distributions, and signal a  ***WARNING***  when the
 p-value of that test is below a certain threshold, fixed at 1%.
 Notice that this does not mean necessarily that the two 
 distributions are statistically incompatible with each other,
 because, by definition, 1% of pair of distributions coming
 from the same parent distributions have a p-value below 10%.
 However, it is worth to take a look by eye to those distributions
 to see if there are really so different as could be in the
 presence of a bug.
 
 Some scripts and one kumac has been provided to allow a full
 automatization of this Statistical Acceptance suite.
 Here the structure of these scripts/kumac:

    1)  mainScript.py 
         ---> 2)  simuDriver.sh  
                  ---> 3a)  build.py
                  ---> 3b)  execute mainAcceptanceTest
                  ---> 3c)  dirStat/driver.py        
                            ---> 4)  drivePlot.py
                                     ---> 5a)  execute  pvalue 
                                     ---> 5b)  plot.py
                                               ---> 6) plot.kumac

 only the first one, mainScript.py , needs to be modified by the user.

 After the whole simulation is completed, a post-processing phase
 must be performed in order to produce plots of various observables.
 This phase requires that all the output files of the simulation
 are collected in the same directory tree (eventual with a 
 subdirectory structure), whereas the HBOOK files (ntuples) are
 not needed. 
 The subdirectory  dirObservables/  contains a Python script,
 observables.py , and some kumacs that are invoked by the script
 to produce the plots. The user is required simply to set some
 parameters in the  observables.py  script, and then run it.
 Please read the comments at the top of the file  observables.py
 for more information.

 Other two scripts, unpack.py and pvalues.py, have been added in
 the same subdirectory  ( dirObservables/ ) . They are useful
 immediately after you get the results from the Grid jobs.
 Please read the comments at the top of these files for more
 information.
