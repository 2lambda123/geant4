
 Last update: 06-Dec-2006
 ------------------------

 This Geant4 application is meant to test the robustness of Geant4
 physics for different types of particles, for different beam energies,
 in several materials.

 The setup is a cylindrical "calorimeter" composed of layers of the 
 same thickness (and, of course, radius), each made of a different
 material. The materials are all the (269) NIST materials that should
 be usable in Geant4 applications, i.e. materials made of elements
 whose atomic number (Z) is not exceeding 92, and with at least one 
 stable isotope. 
 The thickness chosen for the layer (10 cm), and its radius (50 cm)
 are a compromise between having a not too low probability to have a
 hadronic interaction in each layer, and the need to limit the 
 dimensions of the apparatus for CPU performance reasons.
 Please see the class RandomCaloDetectorConstruction to change the
 dimensions of the layer.

 The idea is to randomly choose, event by event:
   - the beam particle type;
   - the beam particle kinetic energy;
   - the beam particle direction;
   - the beam particle starting position.
 In this way, we should be able to "test" if the Geant4 code crashes
 for a specific combination of particle, energy, and material.
 Furthermore, at the level of the stepping action, it is possible
 to make some tests on the kinematics of the interactions.
 For events in which the beam energy is above a certain threshold
 (>= 10 GeV), some simple biasing techniques are used for
 electrons/positrons/gammas/neutrons in order to speed up the
 simulation.
 Please see the class RandomCaloPrimaryGeneratorAction to see
 in detail the list of possible primary particles, beam energies,
 and beam particle starting position.
 See instead the class RandomCaloPrimaryStackingAction for the
 biasing techniques.

 In general, look for the string  ***LOOKHERE***  to see the 
 places in the code where parameters and choices could be changed.

 In the main program, mainRandomCalo.cc, you can select the
 Physics List.

 In the macro command file, run.g4, you can select the number of
 events to run, and, eventually, the magnetic field.

 To build the application:
                            gmake

 To run the application:
                           $G4BIN/$G4SYSTEM/mainRandomCalo run.g4

 The output of the application, being mainly motivated to robustness
 testing, consists only of some printout information, like the 
 primary particle, energy, position, and direction for each event, 
 and, at the very end, the average deposited energy. 
 Furthermore, any eventual tests of the kinematics of the reactions
 which are implemented in the RandomCaloSteppingAction can print out
 some information useful to detect any eventual energy-momentum
 violation, or any other unphysical behaviour.
