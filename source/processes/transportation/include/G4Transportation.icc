//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
//
// $Id: G4Transportation.icc,v 1.8 2004-11-23 17:45:43 japost Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//

// 
//
//        Inline function implementation.
//
// =======================================================================
// Created:  9 June 1998, J. Apostolakis
// =======================================================================
//

inline void
G4Transportation::SetPropagatorInField( G4PropagatorInField* pFieldPropagator)
{
   fFieldPropagator= pFieldPropagator;
}

inline G4PropagatorInField* G4Transportation::GetPropagatorInField()
{
   return fFieldPropagator;
}

inline G4bool G4Transportation::DoesGlobalFieldExist()
{
  G4TransportationManager* transportMgr;
  transportMgr= G4TransportationManager::GetTransportationManager();

  // fFieldExists= transportMgr->GetFieldManager()->DoesFieldExist();
  // return fFieldExists;
  return transportMgr->GetFieldManager()->DoesFieldExist();
}

inline void G4Transportation::SetVerboseLevel( G4int verboseLev )
{
  fVerboseLevel= verboseLev;
}

inline G4int G4Transportation::GetVerboseLevel( ) const
{
  return fVerboseLevel;
}

inline G4double G4Transportation::GetThresholdWarningEnergy() const
{
  return fThreshold_Warning_Energy;
}
 
inline G4double G4Transportation::GetThresholdImportantEnergy() const
{ 
  return fThreshold_Important_Energy;
} 

inline G4int G4Transportation::GetThresholdTrials() const
{
  return fThresholdTrials;
}

inline void G4Transportation::SetThresholdWarningEnergy( G4double newEnWarn )
{
  fThreshold_Warning_Energy= newEnWarn;
}

inline void G4Transportation::SetThresholdImportantEnergy( G4double newEnImp )
{
  fThreshold_Important_Energy = newEnImp; 
}

inline void G4Transportation::SetThresholdTrials(G4int newMaxTrials )
{
  fThresholdTrials = newMaxTrials; 
}

     // Get/Set parameters for killing loopers: 
     //   Above 'important' energy a 'looping' particle in field will 
     //   *NOT* be abandoned, except after fThresholdTrials attempts.
     // Below Warning energy, no verbosity for looping particles is issued

inline G4double G4Transportation::GetMaxEnergyKilled() const
{
  return fMaxEnergyKilled; 
}

inline G4double G4Transportation::GetSumEnergyKilled() const
{
  return fSumEnergyKilled;
}

inline void G4Transportation::ResetKilledStatistics(G4int report)
{
  if( report ) { 
    G4cout << " G4Transportation: Statistics for looping particles " << G4endl;
    G4cout << "   Sum of energy of loopers killed: " <<  fSumEnergyKilled << G4endl;
    G4cout << "   Max energy of loopers killed: " <<  fMaxEnergyKilled << G4endl;
  } 

  fSumEnergyKilled= 0;
  fMaxEnergyKilled= -1.0*GeV;
}
     // Statistics for tracks killed (currently due to looping in field)

