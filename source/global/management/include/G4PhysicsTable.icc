//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
//
// $Id: G4PhysicsTable.icc,v 1.6 2004-10-29 11:38:08 kurasige Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
// 
// ------------------------------------------------------------
//      GEANT 4 class inline implementation
//
//	History: first implementation, based on object model of
//	2nd December 1995, G.Cosmo
//
// ------------------------------------------------------------

inline
 void G4PhysicsTable::clearAndDestroy() 
{
  G4PhysicsVector* a;
  while (size()>0) {
    a = G4PhysCollection::back();
    G4PhysCollection::pop_back();
    if ( a )  delete a;    
  } 

  vecFlag.clear();
}

inline
 G4PhysicsVector*& G4PhysicsTable::operator()(size_t i) 
{
  return (*this)[i]; 
}

inline
 G4PhysicsVector* const& G4PhysicsTable::operator()(size_t i) const
{ 
  return (*this)[i]; 
}

inline
 void   G4PhysicsTable::push_back(G4PhysicsVector* pvec)
{
  G4PhysCollection::push_back(pvec);
  vecFlag.push_back(true);
}

inline
 void   G4PhysicsTable::insert(G4PhysicsVector* pvec)
{
  G4PhysCollection::push_back(pvec);
  vecFlag.push_back(true);
}

inline
 void  G4PhysicsTable::insertAt (size_t idx, G4PhysicsVector* pvec)
{
  G4PhysicsTableIterator itr=begin();
  for (size_t i=0; i<idx; ++i) itr++;
  G4PhysCollection::insert(itr, pvec);

  G4FlagCollection::iterator itrF=vecFlag.begin();
  for (size_t j=0; j<idx; ++j) itrF++;
  vecFlag.insert(itrF, true);
}

inline
 size_t G4PhysicsTable::entries() const 
{
  return G4PhysCollection::size();
}

inline
 size_t G4PhysicsTable::length() const 
{
  return G4PhysCollection::size();
}

inline
 G4bool G4PhysicsTable::isEmpty() const
{
  return G4PhysCollection::empty();
}

inline
 G4bool G4PhysicsTable::GetFlag(size_t i) const
{
  return vecFlag[i];
}

inline 
 void  G4PhysicsTable::ClearFlag(size_t i)
{
  vecFlag[i] = false;
}
