//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
// $Id$
//
// 
//---------------------------------------------------------------
//      GEANT 4 class source file
//
//  G4PhysicsVector.icc
//
//  Description:
//    A physics vector which has values of energy-loss, cross-section, 
//    and other physics values of a particle in matter in a given 
//    range of the energy, momentum, etc.
//    This class serves as the base class for a vector having various 
//    energy scale, for example like 'log', 'linear', 'free', etc.
//
//---------------------------------------------------------------

#if defined G4GLOB_ALLOC_EXPORT
  extern G4DLLEXPORT __thread G4Allocator<G4PhysicsVector> *aPVAllocator_G4MT_TLS_;
#else
  extern G4DLLIMPORT __thread G4Allocator<G4PhysicsVector> *aPVAllocator_G4MT_TLS_;
#endif

inline void* G4PhysicsVector::operator new(size_t)
{  ;;;   if (!aPVAllocator_G4MT_TLS_) aPVAllocator_G4MT_TLS_ = new G4Allocator<G4PhysicsVector>  ; G4Allocator<G4PhysicsVector> &aPVAllocator = *aPVAllocator_G4MT_TLS_;  ;;;  
  void* aVector;
  aVector = (void*)aPVAllocator.MallocSingle();
  return aVector;
}

inline void G4PhysicsVector::operator delete(void* aVector)
{  ;;;   if (!aPVAllocator_G4MT_TLS_) aPVAllocator_G4MT_TLS_ = new G4Allocator<G4PhysicsVector>  ; G4Allocator<G4PhysicsVector> &aPVAllocator = *aPVAllocator_G4MT_TLS_;  ;;;  
  aPVAllocator.FreeSingle((G4PhysicsVector*)aVector);
}

inline G4double G4PhysicsVector::Value(G4double theEnergy) 
{ if (!aPVAllocator_G4MT_TLS_) aPVAllocator_G4MT_TLS_ = new G4Allocator<G4PhysicsVector>  ;
  // Use cache for speed up - check if the value 'theEnergy' is same as the 
  // last call. If it is same, then use the last value, if not - recompute

  if( theEnergy != cacheG4MTThreadPrivate->lastEnergy ) { ComputeValue(theEnergy); }
  return cacheG4MTThreadPrivate->lastValue;
}

inline
 G4double G4PhysicsVector::GetLastEnergy() const
{ if (!aPVAllocator_G4MT_TLS_) aPVAllocator_G4MT_TLS_ = new G4Allocator<G4PhysicsVector>  ;
  return cacheG4MTThreadPrivate->lastEnergy;	
}

inline
 G4double G4PhysicsVector::GetLastValue() const
{ if (!aPVAllocator_G4MT_TLS_) aPVAllocator_G4MT_TLS_ = new G4Allocator<G4PhysicsVector>  ;
   return cacheG4MTThreadPrivate->lastValue;
}

inline 
 size_t G4PhysicsVector::GetLastBin() const
{ if (!aPVAllocator_G4MT_TLS_) aPVAllocator_G4MT_TLS_ = new G4Allocator<G4PhysicsVector>  ;
   return cacheG4MTThreadPrivate->lastBin;
}
 
inline
 G4double G4PhysicsVector::operator[](const size_t binNumber) const
{ if (!aPVAllocator_G4MT_TLS_) aPVAllocator_G4MT_TLS_ = new G4Allocator<G4PhysicsVector>  ;
  return  dataVector[binNumber];
}

//---------------------------------------------------------------

inline
 G4double G4PhysicsVector::operator()(const size_t binNumber) const
{ if (!aPVAllocator_G4MT_TLS_) aPVAllocator_G4MT_TLS_ = new G4Allocator<G4PhysicsVector>  ;
  return dataVector[binNumber];
}

//---------------------------------------------------------------

inline
 G4double G4PhysicsVector::Energy(const size_t binNumber) const
{ if (!aPVAllocator_G4MT_TLS_) aPVAllocator_G4MT_TLS_ = new G4Allocator<G4PhysicsVector>  ;
  return binVector[binNumber];
}

//---------------------------------------------------------------

inline
 G4double G4PhysicsVector::GetMaxEnergy() const
{ if (!aPVAllocator_G4MT_TLS_) aPVAllocator_G4MT_TLS_ = new G4Allocator<G4PhysicsVector>  ;
  return edgeMax;
}

//---------------------------------------------------------------

inline 
 size_t G4PhysicsVector::GetVectorLength() const
{ if (!aPVAllocator_G4MT_TLS_) aPVAllocator_G4MT_TLS_ = new G4Allocator<G4PhysicsVector>  ;
  return numberOfNodes;
}

//---------------------------------------------------------------

inline
 G4double G4PhysicsVector::GetValue(G4double theEnergy, G4bool&) 
{ if (!aPVAllocator_G4MT_TLS_) aPVAllocator_G4MT_TLS_ = new G4Allocator<G4PhysicsVector>  ;
  return Value(theEnergy);
}

//------------------------------------------------

inline
 G4double G4PhysicsVector::LinearInterpolation(G4int lastBin)
{ if (!aPVAllocator_G4MT_TLS_) aPVAllocator_G4MT_TLS_ = new G4Allocator<G4PhysicsVector>  ;
  // Linear interpolation is used to get the value. If the give energy
  // is in the highest bin, no interpolation will be Done. Because 
  // there is an extra bin hidden from a user at locBin=numberOfBin, 
  // the following interpolation is valid even the current locBin=
  // numberOfBin-1. 

  G4double intplFactor = (cacheG4MTThreadPrivate->lastEnergy-binVector[lastBin]) 
     / (binVector[lastBin + 1]-binVector[lastBin]); // Interpol. factor

  return dataVector[lastBin] +
         ( dataVector[lastBin + 1]-dataVector[lastBin] ) * intplFactor;
}

//---------------------------------------------------------------

inline
 G4double G4PhysicsVector::SplineInterpolation(G4int lastBin)
{ if (!aPVAllocator_G4MT_TLS_) aPVAllocator_G4MT_TLS_ = new G4Allocator<G4PhysicsVector>  ;
  // Spline interpolation is used to get the value. If the give energy
  // is in the highest bin, no interpolation will be Done. Because 
  // there is an extra bin hidden from a user at locBin=numberOfBin, 
  // the following interpolation is valid even the current locBin=
  // numberOfBin-1. 

  if(0 == secDerivative.size() ) { FillSecondDerivatives(); }

  // check bin value
  G4double x1 = binVector[lastBin];
  G4double x2 = binVector[lastBin + 1];
  G4double delta = x2 - x1;

  G4double a = (x2 - cacheG4MTThreadPrivate->lastEnergy)/delta;
  G4double b = (cacheG4MTThreadPrivate->lastEnergy - x1)/delta;
   
  // Final evaluation of cubic spline polynomial for return   
  G4double y1 = dataVector[lastBin];
  G4double y2 = dataVector[lastBin + 1];

  G4double res = a*y1 + b*y2 + 
        ( (a*a*a - a)*secDerivative[lastBin] +
          (b*b*b - b)*secDerivative[lastBin + 1] )*delta*delta/6.0;

  return res;
}

//---------------------------------------------------------------

inline 
 void G4PhysicsVector::Interpolation(G4int lastBin)
{ if (!aPVAllocator_G4MT_TLS_) aPVAllocator_G4MT_TLS_ = new G4Allocator<G4PhysicsVector>  ;
  if(useSpline) { cacheG4MTThreadPrivate->lastValue = SplineInterpolation(lastBin); }
  else          { cacheG4MTThreadPrivate->lastValue = LinearInterpolation(lastBin); }
}

//---------------------------------------------------------------

inline 
 void G4PhysicsVector::PutValue(size_t binNumber, G4double theValue)
{ if (!aPVAllocator_G4MT_TLS_) aPVAllocator_G4MT_TLS_ = new G4Allocator<G4PhysicsVector>  ;
  dataVector[binNumber] = theValue;
}

//---------------------------------------------------------------

inline 
 G4bool G4PhysicsVector::IsFilledVectorExist() const
{ if (!aPVAllocator_G4MT_TLS_) aPVAllocator_G4MT_TLS_ = new G4Allocator<G4PhysicsVector>  ;
  G4bool status=false;

  if(numberOfNodes > 0) { status=true; }
  return status;
}

//---------------------------------------------------------------

inline 
 G4PhysicsVectorType G4PhysicsVector::GetType() const
{ if (!aPVAllocator_G4MT_TLS_) aPVAllocator_G4MT_TLS_ = new G4Allocator<G4PhysicsVector>  ;
  return type;
}

//---------------------------------------------------------------

inline 
 void G4PhysicsVector::SetSpline(G4bool val)
{ if (!aPVAllocator_G4MT_TLS_) aPVAllocator_G4MT_TLS_ = new G4Allocator<G4PhysicsVector>  ;
  useSpline = val;
}

//---------------------------------------------------------------

inline
void G4PhysicsVector::SetVerboseLevel(G4int value)
{ if (!aPVAllocator_G4MT_TLS_) aPVAllocator_G4MT_TLS_ = new G4Allocator<G4PhysicsVector>  ;
   verboseLevel = value;
}

//---------------------------------------------------------------

inline
G4int G4PhysicsVector::GetVerboseLevel(G4int)
{ if (!aPVAllocator_G4MT_TLS_) aPVAllocator_G4MT_TLS_ = new G4Allocator<G4PhysicsVector>  ;
   return verboseLevel;
}

