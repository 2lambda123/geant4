//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
// $Id: G4PhysicsVector.icc,v 1.10 2008-04-04 15:17:53 vnivanch Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
// 
//---------------------------------------------------------------
//      GEANT 4 class source file
//
//  G4PhysicsVector.icc
//
//  Description:
//    A physics vector which has values of energy-loss, cross-section, 
//    and other physics values of a particle in matter in a given 
//    range of the energy, momentum, etc.
//    This class serves as the base class for a vector having various 
//    energy scale, for example like 'log', 'linear', 'free', etc.
//
//---------------------------------------------------------------


inline
 G4double G4PhysicsVector::operator[](const size_t binNumber) const
{
  return dataVector[binNumber];
}


inline
 G4double G4PhysicsVector::operator()(const size_t binNumber) const
{
  return dataVector[binNumber];
}


inline 
 size_t G4PhysicsVector::GetVectorLength() const
{
  return numberOfBin;
}



inline
 G4double G4PhysicsVector::LinearInterpolation(G4double theEnergy, 
                                               size_t theLocBin)
{

  // Linear interpolation is used to get the value. If the give energy
  // is in the highest bin, no interpolation will be Done. Because 
  // there is an extra bin hidden from a user at locBin=numberOfBin, 
  // the following interpolation is valid even the current locBin=
  // numberOfBin-1. 

  G4double intplFactor = (theEnergy-binVector[theLocBin]) 
     / (binVector[theLocBin+1]-binVector[theLocBin]); // Interpolation factor

  return dataVector[theLocBin] +
         ( dataVector[theLocBin+1]-dataVector[theLocBin] ) * intplFactor;
}

inline
 G4double G4PhysicsVector::SplineInterpolation(G4double theEnergy, 
                                               size_t theLocBin)
{
  // Spline interpolation is used to get the value. If the give energy
  // is in the highest bin, no interpolation will be Done. Because 
  // there is an extra bin hidden from a user at locBin=numberOfBin, 
  // the following interpolation is valid even the current locBin=
  // numberOfBin-1. 

  if( !secDerivative ) FillSecondDerivatives();

  // check index
  size_t index = theLocBin;
  if(index > numberOfBin-1) index = numberOfBin - 1;

  // check bin value
  G4double res; 
  G4double delta = binVector[index+1] - binVector[index];

  if (std::abs(delta) <= DBL_MIN) res = dataVector[index];
  else 
    {
      G4double a = (binVector[index+1] - theEnergy)/delta ;
      G4double b = (theEnergy - binVector[index])/delta ;
   
      // Final evaluation of cubic spline polynomial for return
   
      G4double y1 = dataVector[index];
      G4double y2 = dataVector[index+1];

      res = a*y1 + b*y2 + 
	((a*a*a - a)*(*secDerivative)[index] +
	 (b*b*b - b)*(*secDerivative)[index+1])*delta*delta/6.0  ;
    }
  return res;
}

inline
 G4double G4PhysicsVector::GetValue(G4double theEnergy, 
                                    G4bool& isOutRange) 
{

  // Use cache for speed up - check if the value 'theEnergy' is same as the 
  // last call. If it is same, then use the last bin location. Also the
  // value 'theEnergy' lies between the last energy and low edge of of the 
  // bin of last call, then the last bin location is used.

  isOutRange = false;                // No range check. 

  size_t locBin = 0;

  if( !(theEnergy != lastEnergy) ) {
     return lastValue;        

  } else if( (theEnergy <  lastEnergy)
          && (theEnergy >= binVector[lastBin]) ) {
     locBin = lastBin;

     lastEnergy = theEnergy;
     if(useSpline) lastValue = SplineInterpolation(theEnergy, locBin);
     else          lastValue = LinearInterpolation(theEnergy, locBin);
     return lastValue;

  } else if( theEnergy < edgeMin ){
     lastBin = 0;
     lastEnergy = theEnergy;
     lastValue = dataVector[0];
     return lastValue;

  } else if( theEnergy >= edgeMax ){
     lastBin = numberOfBin-1;
     lastEnergy = theEnergy;
     lastValue = dataVector[ numberOfBin-1 ];
     return lastValue;

  }  else {
     locBin = FindBinLocation(theEnergy); 

     lastBin = locBin;
     lastEnergy = theEnergy;
     if(useSpline) lastValue = SplineInterpolation(theEnergy, locBin);
     else          lastValue = LinearInterpolation(theEnergy, locBin);
     return lastValue;
  }

}

inline 
 void G4PhysicsVector::PutValue(size_t binNumber, G4double theValue)
{
  dataVector[binNumber] = theValue;

  // Fill the bin which is hidden to user with theValue. This is to 
  // handle correctly when Energy=theEmax in getValue.
  if(binNumber==numberOfBin-1) dataVector[binNumber+1] = theValue;     
}

inline 
 G4bool G4PhysicsVector::IsFilledVectorExist() const
{
  G4bool status=false;

  if(numberOfBin > 0) { status=true; }
  return status;
}


inline 
 void G4PhysicsVector::PutComment(const G4String& theComment)
{
  comment = theComment;
}

inline 
 const G4String& G4PhysicsVector::GetComment() const
{
  return comment;
}

inline 
 G4PhysicsVectorType G4PhysicsVector::GetType() const
{
  return type;
}

inline 
 void G4PhysicsVector::SetSpline(G4bool val)
{
  useSpline = val;
}
