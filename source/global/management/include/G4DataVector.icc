//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
//
// $Id: G4DataVector.icc,v 1.1 2005-03-15 19:11:35 gcosmo Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
//
// class G4DataVector inline implementation
// 

inline
void G4DataVector::insertAt(size_t pos, const G4double& a) 
{ 
  iterator i = begin();
  for (size_t ptn=0; (ptn<pos)&&(i!=end()); i++,ptn++) {;}
  if (i!=end())
    { insert(i,a); }
  else
    { push_back(a); }
}

inline
size_t G4DataVector::index(const G4double& a) 
{ 
  size_t ptn = 0;
  for (iterator i=begin(); i!=end(); i++,ptn++)
    { if (!(*i!=a)) { return ptn; } }

  return (ptn=~(size_t)0);
}

inline
G4bool G4DataVector::contains(const G4double& a) const
{
  for (const_iterator i=begin(); i!=end(); i++)
    { if (!(*i!=a)) { return true; } }

  return false;
}

inline 
G4bool G4DataVector::remove(const G4double& a)
{
  G4bool found = false;

  for (iterator i=begin(); i!=end(); i++)
  {
    if (!(*i!=a))
    {
      erase(i);
      found = true;
      break;
    }
  }
  return found;
}

inline 
size_t G4DataVector::removeAll(const G4double& a)
{
  size_t ptn=0;

  for (iterator i=begin(); i!=end(); i++)
  {
    if (!(*i!=a))
    {
      erase(i);
      ptn++;
      i--;
    } 
  }
  return ptn;
}
