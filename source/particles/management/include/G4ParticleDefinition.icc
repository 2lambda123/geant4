//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
//
// $Id: G4ParticleDefinition.icc,v 1.8 2004-12-02 08:08:58 kurasige Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//

inline 
 G4ParticleTable* G4ParticleDefinition::GetParticleTable()
{ 
  return theParticleTable; 
}

inline
 G4DecayTable* G4ParticleDefinition::GetDecayTable()
{ 
  return theDecayTable; 
}

inline
 void          G4ParticleDefinition::SetDecayTable(G4DecayTable* aDecayTable) 
{ 
  theDecayTable = aDecayTable; 
}


inline 
 void G4ParticleDefinition::SetVerboseLevel(G4int value)
{
   verboseLevel = value;
}

inline 
 G4int G4ParticleDefinition::GetVerboseLevel() const
{
   return verboseLevel;
}

inline
 G4ProcessManager* G4ParticleDefinition::GetProcessManager() const
{
    return theProcessManager;
}

inline
 void G4ParticleDefinition::SetProcessManager(G4ProcessManager *aProcessManager)
{
      theProcessManager = aProcessManager;
}

inline
 G4int G4ParticleDefinition::GetQuarkContent(G4int flavor) const 
{
  G4int content = 0; 
  if ((flavor>0) && (flavor<=NumberOfQuarkFlavor)){
    content = theQuarkContent[flavor-1];
  }else {
#ifdef G4VERBOSE
    if (verboseLevel >0) {
      G4cout << "Invalid Quark Flavor for G4ParticleDefinition::GetQuarkContent";
      G4cout << ": flavor=" << flavor <<G4endl;
    }	
#endif	
  }
  return content;  
}

inline
 G4int G4ParticleDefinition::GetAntiQuarkContent(G4int flavor) const 
{
  G4int content = 0;
  if ((flavor>0) && (flavor<=NumberOfQuarkFlavor)){
    content = theAntiQuarkContent[flavor-1];
  }else {
#ifdef G4VERBOSE
    if (verboseLevel >0) {
      G4cout <<"Invalid Quark Flavor for G4ParticleDefinition::GetAntiQuarkContent";
      G4cout << ": flavor=" << flavor <<G4endl;
    }
#endif
  }  
  return content;
}

inline 
 void G4ParticleDefinition::SetParticleSubType(const G4String& subtype)
{
  theParticleSubType = subtype;
}
 
inline 
 void             G4ParticleDefinition::SetAntiPDGEncoding(G4int aEncoding)
{ 
  theAntiPDGEncoding = aEncoding; 
}

inline 
G4bool G4ParticleDefinition::GetApplyCutsFlag() const
{
  return fApplyCutsFlag;
}

