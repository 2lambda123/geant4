//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
// -*- C++ -*-
// AID-GENERATED
// =========================================================================
// This class was generated by AID - Abstract Interface Definition          
// DO NOT MODIFY, but use the org.freehep.aid.Aid utility to regenerate it. 
// =========================================================================
#ifndef HEPREP_HEPREPINSTANCETREE_H
#define HEPREP_HEPREPINSTANCETREE_H 1

// Copyright 2000-2002, FreeHEP.

#include <vector>

#include "HEPREP/HepRepTreeID.h"

namespace HEPREP {

class HepRep;
class HepRepInstance;
class HepRepSelectFilter;
class HepRepTreeID;

/**
 * HepRepInstanceTree interface.
 *
 * @author Mark Donszelmann
 */
class HepRepInstanceTree : virtual public HepRepTreeID {

public: 
    /// Destructor.
    virtual ~HepRepInstanceTree() { /* nop */; }

    /**
     * Adds an instance to this instancetree.
     *
     * @param instance to be added.
     * @return false only if written immediately to a stream.
     */
    virtual bool addInstance(HepRepInstance * instance) = 0;

    /**
     * Removes an instance from this instancetree.
     *
     * @param instance to be removed.
     */
    virtual void removeInstance(HepRepInstance * instance) = 0;

    /**
     * Returns a collection of instances.
     *
     * @return collection of HepRepInstances.
     */
    virtual std::vector<HepRepInstance *>  * getInstances() = 0;

    /**
     * Adds a related instance tree to this instancetree.
     *
     * @param instanceTree related instancetree.
     * @return false only if written immediately to a stream.
     */
    virtual bool addInstanceTree(HepRepTreeID * instanceTree) = 0;

    /**
     * Returns a collection of associated instance trees.
     *
     * @return collection of HepRepInstanceTrees.
     */
    virtual std::vector<HepRepInstanceTree *>  * getInstanceTrees() = 0;

    /**
     * Returns the associated typetree.
     *
     * @return TreeID of the associated typetree.
     */
    virtual HepRepTreeID * getTypeTree() = 0;

    /**
     * Returns a deep copy of this instancetree.
     *
     * @param heprep needed to find the associated type.
     * @param filter to filter the instances.
     * @return copy of this instancetree.
     */
    virtual HepRepInstanceTree * copy(HepRep * heprep, HepRepSelectFilter * filter = NULL) = 0;

    virtual HepRepTreeID * copy() = 0;
}; // class
}; // namespace HEPREP
#endif /* ifndef HEPREP_HEPREPINSTANCETREE_H */
