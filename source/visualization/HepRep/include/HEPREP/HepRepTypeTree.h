//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
// This class was generated by AID - Abstract Interface Definition          
// DO NOT MODIFY, but use the org.freehep.aid.Aid utility to regenerate it. 
// =========================================================================
#ifndef HEPREP_HEPREPTYPETREE_H
#define HEPREP_HEPREPTYPETREE_H 1

// Copyright 2000-2002, FreeHEP.

#include <vector>

#include "HEPREP/HepRepTreeID.h"

namespace HEPREP {

class HepRep;
class HepRepTreeID;
class HepRepType;

/**
 * HepRepTypeTree interface.
 *
 * @author Mark Donszelmann
 */
class HepRepTypeTree : virtual public HepRepTreeID {

public: 
    /// Destructor.
    virtual ~HepRepTypeTree() { /* nop */; }

    /**
     * Adds a type to this typetree.
     *
     * @param type to be added.
     * @return false only if written immediatelty to a stream.
     */
    virtual bool addType(HepRepType * type) = 0;

    /**
     * Returns a collection of all types in this tree.
     *
     * @return collection of HepRepTypes.
     */
    virtual std::vector<HepRepType *>  * getTypes() = 0;

    /**
     * Returns a deep copy of this typetree.
     *
     * @param heprep top-level heprep. (Not sure if this is necessary).
     * @return copy of this typetree.
     */
    virtual HepRepTypeTree * copy(HepRep * heprep) = 0;

// To be enable in g++ 3.0
//    using HepRep::HepRepTreeID::copy;
// To be disabled in g++ 3.0
    virtual HepRepTreeID * copy() = 0;
}; // class
}; // namespace HEPREP
#endif /* ifndef HEPREP_HEPREPTYPETREE_H */
