//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
// -*- C++ -*-
// AID-GENERATED
// =========================================================================
// This class was generated by AID - Abstract Interface Definition          
// DO NOT MODIFY, but use the org.freehep.aid.Aid utility to regenerate it. 
// =========================================================================
#ifndef HEPREP_HEPREPITERATORLISTENER_H
#define HEPREP_HEPREPITERATORLISTENER_H 1

// Copyright 2000-2002, FreeHEP.

#include <string>
#include <vector>

namespace HEPREP {

/**
 * HepRepIteratorListener interface. The implementor is called back for changes
 * of attributes while using the HepRepIterator to iterate over all the HepRepInstances.
 *
 * @author Mark Donszelmann
 */
class HepRepIteratorListener {

public: 
    /// Destructor.
    virtual ~HepRepIteratorListener() { /* nop */; }

    /**
     * Called if attribute key changes its value.
     *
     * @param key name of the changed attribute.
     * @param value value of the changed attribute.
     * @param showLabel value of showLabel.
     */
    virtual void setAttribute(std::string key, std::string value, int showLabel) = 0;

    /**
     * Called if attribute key changes its value.
     *
     * @param key name of the changed attribute.
     * @param value value of the changed attribute.
     * @param showLabel value of showLabel.
     */
    virtual void setAttribute(std::string key, std::vector<double> value, int showLabel) = 0;

    /**
     * Called if attribute key changes its value.
     *
     * @param key name of the changed attribute.
     * @param value value of the changed attribute.
     * @param showLabel value of showLabel.
     */
    virtual void setAttribute(std::string key, long value, int showLabel) = 0;

    /**
     * Called if attribute key changes its value.
     *
     * @param key name of the changed attribute.
     * @param value value of the changed attribute.
     * @param showLabel value of showLabel.
     */
    virtual void setAttribute(std::string key, int value, int showLabel) = 0;

    /**
     * Called if attribute key changes its value.
     *
     * @param key name of the changed attribute.
     * @param value value of the changed attribute.
     * @param showLabel value of showLabel.
     */
    virtual void setAttribute(std::string key, double value, int showLabel) = 0;

    /**
     * Called if attribute key changes its value.
     *
     * @param key name of the changed attribute.
     * @param value value of the changed attribute.
     * @param showLabel value of showLabel.
     */
    virtual void setAttribute(std::string key, bool value, int showLabel) = 0;

    /**
     * Called if attribute key is removed from the attribute set.
     *
     * @param key name of the removed attribute.
     */
    virtual void removeAttribute(std::string key) = 0;
}; // class
}; // namespace HEPREP
#endif /* ifndef HEPREP_HEPREPITERATORLISTENER_H */
