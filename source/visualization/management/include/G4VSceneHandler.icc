//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
//
// $Id: G4VSceneHandler.icc,v 1.12 2001-08-09 20:13:40 johna Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
// 
// John Allison  19th July 1996.

inline G4VGraphicsSystem* G4VSceneHandler::GetGraphicsSystem () const {
  return &fSystem;
}

inline G4int G4VSceneHandler::GetSceneHandlerId () const {
  return fSceneHandlerId;
}

inline G4int G4VSceneHandler::GetViewCount () const {
  return fViewCount;
}

inline
G4double G4VSceneHandler::GetMarkerDiameter
(const G4VMarker& marker, G4VSceneHandler::MarkerSizeType& sizeType) {
  return GetMarkerSize (marker, sizeType);
}

inline
G4double G4VSceneHandler::GetMarkerRadius
(const G4VMarker& marker, G4VSceneHandler::MarkerSizeType& sizeType) {
  return GetMarkerSize (marker, sizeType) / 2.;
}

inline G4int G4VSceneHandler::IncrementViewCount () {
  return fViewCount++;
}

inline const G4String& G4VSceneHandler::GetName () const {
  return fName;
}

inline void G4VSceneHandler::SetName (const G4String& name) {
  fName = name;
}

inline G4Scene* G4VSceneHandler::GetScene () const {
  return fpScene;
}

inline const G4ViewerList& G4VSceneHandler::GetViewerList () const {
  return fViewerList;
}

inline G4VModel* G4VSceneHandler::GetModel () const {
  return fpModel;
}

inline G4VViewer* G4VSceneHandler::GetCurrentViewer () const {
  return fpViewer;
}

inline G4bool G4VSceneHandler::GetMarkForClearingTransientStore () const {
  return fMarkForClearingTransientStore;
}

inline void G4VSceneHandler::SetCurrentViewer (G4VViewer* pViewer) {
  fpViewer = pViewer;
}

inline G4ViewerList& G4VSceneHandler::SetViewerList () {
  return fViewerList;
}

inline void
G4VSceneHandler::SetModel (G4VModel* pModel) {
  fpModel = pModel;
}

inline void G4VSceneHandler::SetMarkForClearingTransientStore (G4bool mark) {
  fMarkForClearingTransientStore = mark;
}

inline const G4Colour& G4VSceneHandler::GetColor (const G4Visible& visible) {
  return GetColour (visible);
}

inline const G4Colour& G4VSceneHandler::GetTextColor (const G4Text& text) {
  return GetTextColour (text);
}
