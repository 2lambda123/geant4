//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
//
// $Id: G4VisManager.icc,v 1.8 2001-08-05 02:29:05 johna Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
// 
// GEANT4 Visualization Manager - John Allison 02/Jan/1996.

inline void G4VisManager::Initialize () {
  Initialise ();
}

inline G4VSceneHandler* G4VisManager::GetCurrentSceneHandler () const {
  return fpSceneHandler;
}

inline G4VViewer* G4VisManager::GetCurrentViewer () const {
  return fpViewer;
}

inline G4Scene* G4VisManager::GetCurrentScene () const {
  return fpScene;
}

inline const G4SceneHandlerList&
G4VisManager::GetAvailableSceneHandlers () const {
  return fAvailableSceneHandlers;
}

inline const G4SceneList& G4VisManager::GetSceneList () const {
  return fSceneList;
}

inline G4VGraphicsSystem*
G4VisManager::GetCurrentGraphicsSystem () const {
  return fpGraphicsSystem;
}

inline G4VisManager::Verbosity G4VisManager::GetVerbosity () const {
  return fVerbosity;
}

inline void G4VisManager::GetWindowSizeHint
 (G4int& xHint, G4int& yHint) const {
  xHint = fWindowSizeHintX; yHint = fWindowSizeHintY;
}

inline void G4VisManager::SetCurrentScene (G4Scene* pScene) {
  fpScene = pScene;
}

inline G4SceneList& G4VisManager::SetSceneList () {
  return fSceneList;
}

inline G4SceneHandlerList& G4VisManager::SetAvailableSceneHandlers () {
  return fAvailableSceneHandlers;
}

inline void G4VisManager::SetVerboseLevel (G4VisManager::Verbosity verbosity) {
  fVerbosity = verbosity;
}

inline void G4VisManager::SetWindowSizeHint (G4int xHint, G4int yHint) {
  fWindowSizeHintX = xHint; fWindowSizeHintY = yHint;
}
