//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
//
// $Id: G4Scene.icc,v 1.12 2006-03-06 14:30:59 allison Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
// 
// Scene data  John Allison  19th July 1996.

inline G4bool G4Scene::operator == (const G4Scene& s) const {
  return !(G4Scene::operator != (s));
}

inline const G4String& G4Scene::GetName () const {
  return fName;
}

inline G4bool G4Scene::IsEmpty () const {
  return fRunDurationModelList.size () == 0;
}

inline const std::vector<G4VModel*>&
G4Scene::GetRunDurationModelList () const {
  return fRunDurationModelList;
}

inline const std::vector<G4VModel*>&
G4Scene::GetEndOfEventModelList () const {
  return fEndOfEventModelList;
}

inline const G4VisExtent& G4Scene::GetExtent () const {
  return fExtent;
}

inline const G4Point3D& G4Scene::GetStandardTargetPoint () const {
  return fStandardTargetPoint;
}

inline G4bool G4Scene::GetRefreshAtEndOfEvent () const {
  return fRefreshAtEndOfEvent;
}

inline G4bool G4Scene::GetRefreshAtEndOfRun () const {
  return fRefreshAtEndOfRun;
}

inline G4bool G4Scene::GetRecomputeTransients () const {
  return fRecomputeTransients;
}

inline std::vector<G4VModel*>& G4Scene::SetRunDurationModelList ()
{
  return fRunDurationModelList;
}

inline std::vector<G4VModel*>& G4Scene::SetEndOfEventModelList ()
{
  return fRunDurationModelList;
}

inline void G4Scene::SetRefreshAtEndOfEvent(G4bool refresh) {
  fRefreshAtEndOfEvent = refresh;
}

inline void G4Scene::SetRefreshAtEndOfRun(G4bool refresh) {
  fRefreshAtEndOfRun = refresh;
}

inline void G4Scene::SetRecomputeTransients(G4bool recompute) {
  fRecomputeTransients = recompute;
}
