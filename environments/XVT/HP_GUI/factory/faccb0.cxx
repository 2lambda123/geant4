//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
//
// $Id: faccb0.cxx,v 1.3 2001-07-11 09:56:53 gunter Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
//
/* 
	This is version 4.5 of XVT-Architect.
	This file was automatically generated by XVT-Architect,
	Do not modify its contents.
*/

#include "factory.h"
#include "XVTPwr.h"
#include "AppDef.h"
#include PwrGen_i
#include "facdec.h"
#include "classes.h"
#include "defines.h"
#include "faccb.h"
#define _PA_REF(x) x=x

void _Init_GUI_faccb0() { }

void* C_G4Win_GUI_DEFAULT(const PAFactory* theFactory, CObjectRWC* theData)
{
	_PA_REF(theFactory);
	_PA_REF(theData);
	CDocument* anEnclosure = PtrCast( CDocument, theData );
	G4XvtWin* anInstance = new G4XvtWin(anEnclosure, CRect((UNITS)50, (UNITS)50, (UNITS)1017, (UNITS)782), NULLString, WSF_SIZE|WSF_CLOSE|WSF_ICONIZABLE|0, W_DOC, G4WinMB+DEFAULT_BASE
#if (DSP_TEMPLATE_RELEASE > 03220)
	, TASK_WIN);
#else
	);
#endif
	return anInstance;
}

void I_G4Win_GUI_DEFAULT(const PAFactory* theFactory, CObjectRWC* theData, CDataMembers* theDataMembers)
{
	_PA_REF(theFactory);
	_PA_REF(theData);
	_PA_REF(theDataMembers);
	G4XvtWin* anInstance = PtrCast(G4XvtWin, theData);
	if (!anInstance) return;

	{
		CFont aFont;
		aFont.Deserialize("01\\system\\0\\12\\");
		CEnvironment anEnv(0xc0c0c0, 0x7000000, 0xc0c0c0, PAT_SOLID		, 0x7000000, PAT_SOLID,1, aFont, M_COPY, P_SOLID, FALSE);
		
		anInstance->SetEnvironment(anEnv);
	}

	
	IPAFactoryView(anInstance, STRING1, NULLcmd, NULLcmd, TRUE, TRUE, FALSE, TOPSTICKY|LEFTSTICKY, FALSE, FALSE);
	
	{
		CView* aView = (CView*) theFactory->GetInstance(1062);
		if (aView) anInstance->SetKeyFocus(aView);
	}
	
	anInstance->SetBackgroundDrawing(FALSE);
	
}

CFactoryElement _G4WinDEFAULT(&GUIFactory, G4Win, 20024, 2, C_G4Win_GUI_DEFAULT, I_G4Win_GUI_DEFAULT, G4Doc, 0, 1, 1, 0);

void* C_CMenuButton1065_GUI_DEFAULT(const PAFactory* theFactory, CObjectRWC* theData)
{
	_PA_REF(theFactory);
	_PA_REF(theData);
	CSubview* anEnclosure = PtrCast( CSubview, theData );
	CMenuButton *anInstance = new CMenuButton( anEnclosure, CRect((UNITS)54, (UNITS)3, (UNITS)77, (UNITS)26), M_FILE_PRINT );
	return anInstance;
}

void I_CMenuButton1065_GUI_DEFAULT(const PAFactory* theFactory, CObjectRWC* theData, CDataMembers* theDataMembers)
{
	_PA_REF(theFactory);
	_PA_REF(theData);
	_PA_REF(theDataMembers);
	CMenuButton* anInstance = PtrCast(CMenuButton, theData);
	if (!anInstance) return;

	
	IPAFactoryView(anInstance, "", NULLcmd, NULLcmd, TRUE, TRUE, FALSE, TOPSTICKY|LEFTSTICKY, FALSE, FALSE);
	
	
	anInstance->SetTogglable( FALSE );
	CImage anImage(1002);
	CPicture* aPicture = new CPicture( anInstance, CPoint((UNITS)0, (UNITS)0), anImage );
	_PA_REF(aPicture);
	anInstance->SetCommands( NULLcmd, NULLcmd, PRINT_INcmd, PRINT_OUTcmd );
	anInstance->SizeToFit();
	
	
}

CFactoryElement _CMenuButton1065DEFAULT(&GUIFactory, CMenuButton1065, 20126, 3, C_CMenuButton1065_GUI_DEFAULT, I_CMenuButton1065_GUI_DEFAULT, LogBar, 0, 1, 13, 2);

void* C_CMenuButton1080_GUI_DEFAULT(const PAFactory* theFactory, CObjectRWC* theData)
{
	_PA_REF(theFactory);
	_PA_REF(theData);
	CSubview* anEnclosure = PtrCast( CSubview, theData );
	CMenuButton *anInstance = new CMenuButton( anEnclosure, CRect((UNITS)174, (UNITS)3, (UNITS)197, (UNITS)26), QUITcmd );
	return anInstance;
}

void I_CMenuButton1080_GUI_DEFAULT(const PAFactory* theFactory, CObjectRWC* theData, CDataMembers* theDataMembers)
{
	_PA_REF(theFactory);
	_PA_REF(theData);
	_PA_REF(theDataMembers);
	CMenuButton* anInstance = PtrCast(CMenuButton, theData);
	if (!anInstance) return;

	
	IPAFactoryView(anInstance, "", NULLcmd, NULLcmd, TRUE, TRUE, FALSE, TOPSTICKY|LEFTSTICKY, FALSE, FALSE);
	
	
	anInstance->SetTogglable( FALSE );
	CImage anImage(1007);
	CPicture* aPicture = new CPicture( anInstance, CPoint((UNITS)0, (UNITS)0), anImage );
	_PA_REF(aPicture);
	anInstance->SetCommands( NULLcmd, NULLcmd, QUIT_INcmd, QUIT_OUTcmd );
	anInstance->SizeToFit();
	
	
}

CFactoryElement _CMenuButton1080DEFAULT(&GUIFactory, CMenuButton1080, 20126, 3, C_CMenuButton1080_GUI_DEFAULT, I_CMenuButton1080_GUI_DEFAULT, LogBar, 0, 1, 13, 7);

void* C_helpButton_GUI_DEFAULT(const PAFactory* theFactory, CObjectRWC* theData)
{
	_PA_REF(theFactory);
	_PA_REF(theData);
	CSubview* anEnclosure = PtrCast( CSubview, theData );
	CMenuButton *anInstance = new CMenuButton( anEnclosure, CRect((UNITS)711, (UNITS)3, (UNITS)734, (UNITS)26), HELPcmd );
	return anInstance;
}

void I_helpButton_GUI_DEFAULT(const PAFactory* theFactory, CObjectRWC* theData, CDataMembers* theDataMembers)
{
	_PA_REF(theFactory);
	_PA_REF(theData);
	_PA_REF(theDataMembers);
	CMenuButton* anInstance = PtrCast(CMenuButton, theData);
	if (!anInstance) return;

	
	IPAFactoryView(anInstance, "", NULLcmd, NULLcmd, TRUE, FALSE, FALSE, TOPSTICKY|LEFTSTICKY, FALSE, FALSE);
	
	
	anInstance->SetTogglable( FALSE );
	CImage anImage(1011);
	CPicture* aPicture = new CPicture( anInstance, CPoint((UNITS)0, (UNITS)0), anImage );
	_PA_REF(aPicture);
	anInstance->SetCommands( NULLcmd, NULLcmd, HELP_INcmd, HELP_OUTcmd );
	anInstance->SizeToFit();
	
	
}

CFactoryElement _helpButtonDEFAULT(&GUIFactory, helpButton, 20126, 3, C_helpButton_GUI_DEFAULT, I_helpButton_GUI_DEFAULT, LogBar, 0, 1, 13, 12);

