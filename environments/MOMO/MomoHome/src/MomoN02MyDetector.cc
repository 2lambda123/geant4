//
// ********************************************************************
// * DISCLAIMER                                                       *
// *                                                                  *
// * The following disclaimer summarizes all the specific disclaimers *
// * of contributors to this software. The specific disclaimers,which *
// * govern, are listed with their locations in:                      *
// *   http://cern.ch/geant4/license                                  *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.                                                             *
// *                                                                  *
// * This  code  implementation is the  intellectual property  of the *
// * GEANT4 collaboration.                                            *
// * By copying,  distributing  or modifying the Program (or any work *
// * based  on  the Program)  you indicate  your  acceptance of  this *
// * statement, and all its terms.                                    *
// ********************************************************************
//
//***** Generated by Geant4 Geometry Editor at  Thu Mar 14 10:39:13 JST 2002 *****

//------HeaderFile-
 #include "MomoN02MyDetector.hh"

#include "G4UnitsTable.hh"

#include "G4VUserDetectorConstruction.hh"

#include "globals.hh"
#include "G4Material.hh"
#include "G4MaterialTable.hh"
#include "G4Element.hh"
#include "G4ElementTable.hh"
#include "G4Box.hh"
#include "G4Tubs.hh"
#include "G4LogicalVolume.hh"
#include "G4ThreeVector.hh"
#include "G4PVPlacement.hh"
#include "G4PVReplica.hh"
#include "G4SDManager.hh"
#include "G4VisAttributes.hh"
#include "G4Colour.hh"

MomoN02MyDetector::MomoN02MyDetector()
{ ; }
MomoN02MyDetector::~MomoN02MyDetector()
{ ; }
G4VPhysicalVolume* MomoN02MyDetector::Construct( )
{
// Elements
G4Element* elementH = new G4Element( "Hydrogen", "H", 1. , 1.00794*g/mole );
G4Element* elementO = new G4Element( "Oxygen", "O", 8. , 15.9994*g/mole );
G4Element* elementN = new G4Element( "Nitrogen", "N", 7. , 14.00674*g/mole );

// Materials from Combination

G4Material* water = new G4Material("water",  1.0*g/cm3, 2, kStateUndefined, 273.15*kelvin, 1.0*atmosphere );
water->AddElement( elementH, 2 );
water->AddElement( elementO, 1 );
G4Material* Air = new G4Material("Air",  0.0010*g/cm3, 2, kStateUndefined, 273.15*kelvin, 1.0*atmosphere );
Air->AddElement( elementN, 0.8 );
Air->AddElement( elementO, 0.2 );

// Materials from Scratch


// Visualization attributes


G4VisAttributes * gray= new G4VisAttributes( G4Colour(204/255. ,204/255. ,204/255. ));

G4VisAttributes * blue= new G4VisAttributes( G4Colour(51/255. ,255/255. ,255/255. ));

// Logical  Volumes

G4Box *solidworld= new G4Box("solidworld", 5000.0*mm, 5000.0*mm, 5000.0*mm );
G4LogicalVolume * logicalworld = new G4LogicalVolume(solidworld, 	 //its solid
				 Air, 		 //its material
			 "logicalworld" ,		 //its name
			 0,0,0);

logicalworld->SetVisAttributes(gray);

G4Tubs *solidwatertank= new G4Tubs("solidwatertank", 0.0*mm, 1500.0*mm, 1500.0*mm, 0.0*deg, 360.0*deg );
G4LogicalVolume * logicalwatertank = new G4LogicalVolume(solidwatertank, 	 //its solid
				 water, 		 //its material
			 "logicalwatertank" ,		 //its name
			 0,0,0);

logicalwatertank->SetVisAttributes(blue);


// Physical Volumes ----  Single Positioned Placement,   Repeated Placement,   Slicing  --------------------------- 


// Single Positioned Placement 

G4RotationMatrix rotMatrixworld;   // unit rotation matrix
G4double angleworld = 0.0*deg;   // rotational angle
rotMatrixworld.rotateX(angleworld);  // rot matrix

G4VPhysicalVolume *  physicalworld= new G4PVPlacement(G4Transform3D(rotMatrixworld,	//rotation 
		 G4ThreeVector(0.0*mm, 0.0*mm, 0.0*mm)),
		 "physicalworld",   //its name  (2nd constructor)
		 logicalworld,         //its logical volume 
		 NULL,              //its mother volume 
		 false,                 //no boolean operation 
		 0);                       //copy number 

G4RotationMatrix rotMatrixwatertank;   // unit rotation matrix
G4double anglewatertank = 0.0*deg;   // rotational angle
rotMatrixwatertank.rotateX(anglewatertank);  // rot matrix

G4VPhysicalVolume *  physicalwatertank= new G4PVPlacement(G4Transform3D(rotMatrixwatertank,	//rotation 
		 G4ThreeVector(0.0*mm, 0.0*mm, 0.0*mm)),
		 "physicalwatertank",   //its name  (2nd constructor)
		 logicalwatertank,         //its logical volume 
		 physicalworld,              //its mother volume 
		 false,                 //no boolean operation 
		 0);                       //copy number 


// Repeated Placement Translation 


// Repeated Placement AxialSymmetoric


// Slicing Translation 


// Slicing AxialSymmetric 


// return the physical World


 return physicalworld;
}
