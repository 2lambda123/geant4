//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//    *******************************
//    *                             *
//    *    Tst52AnalysisManager.cc *
//    *                             *
//    *******************************
//
// $Id: Tst52AnalysisManager.cc,v 1.1 2007-04-12 12:00:17 guatelli Exp $
// GEANT4 tag $Name: not supported by cvs2svn $
// Author: Susanna Guatelli (guatelli@ge.infn.it)
//
// History:
// -----------
// 17 May  2003   S. Guatelli   1st implementation
//
// -------------------------------------------------------------------
 
#include <stdlib.h>
#include <fstream>
#include "Tst52AnalysisManager.hh"

#include "G4ios.hh"
#include <AIDA/AIDA.h>
#include "G4RunManager.hh"


Tst52AnalysisManager* Tst52AnalysisManager::instance = 0;

Tst52AnalysisManager::Tst52AnalysisManager() 
  :  aFact(0), treeFact(0),theTree(0), histogramFactory(0),
     histogramEnergyDeposit(0),histogramLandau(0),secondary_electron(0),
     secondary_photon(0),secondary_electron_phot(0)
{ 
  aFact = AIDA_createAnalysisFactory();
  treeFact = aFact -> createTreeFactory();
}

Tst52AnalysisManager::~Tst52AnalysisManager() 
{ 
  delete secondary_electron_phot;
  secondary_electron_phot = 0;

  delete secondary_photon;
  secondary_photon =0;

  delete secondary_electron;
  secondary_electron =0;
  
  delete histogramLandau;
  histogramLandau = 0;

  delete  histogramEnergyDeposit;
  histogramEnergyDeposit = 0;

  delete histogramFactory;
  histogramFactory = 0;

  delete treeFact;
  treeFact = 0;

  delete theTree;
  theTree = 0;

  delete aFact;
  aFact = 0;
}

Tst52AnalysisManager* Tst52AnalysisManager::getInstance()
{
  if (instance == 0) instance = new Tst52AnalysisManager;
  return instance;
}

void Tst52AnalysisManager::book() 
{
 std::string fileName = "test50.hbk";
 theTree = treeFact->create(fileName,"hbook",false, true);
 histogramFactory = aFact -> createHistogramFactory( *theTree );
 
}

void Tst52AnalysisManager::bookHisto(G4int bin, G4double zmin, G4double zmax)
{
histogramEnergyDeposit = histogramFactory -> createHistogram1D
                         ("10","Energy Deposit (MeV) w.r.t z (mm)",bin,zmin,zmax);

G4double thickness =  zmax - zmin;
G4double histogramLandau_xmax = (thickness/micrometer) * 4.;

histogramLandau = histogramFactory -> createHistogram1D
                         ("20","Energy Deposit (keV)", 100, 0.,histogramLandau_xmax); 

secondary_electron = histogramFactory -> createHistogram1D
                         ("30","Energy of secondary electron (MeV) generated by ionization", 1000, 0., 0.2); 

secondary_photon = histogramFactory -> createHistogram1D
                         ("40","Energy of secondary photons (MeV)", 1000, 0., 1.); 


secondary_electron_phot = histogramFactory -> createHistogram1D
                         ("50","Energy of secondary electron (MeV) generated by photoelectric effect", 1000, 0., 0.1); 

}

void Tst52AnalysisManager::FillEnergyDeposit(G4double zz, G4double energyDep)
{
  //  G4cout << "depth(mm):" << zz << "  edep(MeV):" << energyDep << G4endl;
  histogramEnergyDeposit ->fill(zz,energyDep);
}

void Tst52AnalysisManager::landau(G4double energyDeposit_event)
{
  histogramLandau -> fill(energyDeposit_event);
  // G4cout << "Analysis: " << energyDeposit_event<< G4endl;
}

void Tst52AnalysisManager::secondaryElectron(G4double energy)
{
  secondary_electron -> fill(energy);
}

void Tst52AnalysisManager::secondaryPhoton(G4double energy)
{
 secondary_photon -> fill(energy);
}
void Tst52AnalysisManager::secondaryElectronPhoto(G4double energy)
{
 secondary_electron_phot -> fill(energy);
 }

void Tst52AnalysisManager::finish() 
{  
  theTree -> commit();
  theTree -> close();
}












