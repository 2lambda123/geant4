?RCS:
?X:
?X: This unit produces a shell script "qt" which can be used to find
?X: out how and where Qt is installed on the system. It will perform several
?X: checks for the Qt headers, libraries and applications, setting variables
?X: as needed. It leaves "qt" sitting around for other Configure units
?X: to use, but arranges for its demise at the end of Configure.
?X:
?MAKE:Qt g4_qt_version g4_qt_cxxflags g4_qt_gl_cxxflags g4_qt_libs \
g4_qt_gl_libs g4_qt_moc: startsh Loc cat n
?MAKE:	-pick add $@ %<
?V:with_qt_dir:g4_qt_version g4_qt_cxxflags g4_qt_gl_cxxflags g4_qt_libs g4_qt_gl_libs g4_qt_moc g4_qt_is_configured g4_havegoodqt
?F:./qt
?T:with_qt_dir
cat <<EOSC >qt
$startsh
#
# Autoconf(ish) style check for Qt headers, libraries and moc application
#

#
# These are variables that the final unit generated script may use
#
with_qt_dir="\$qt_search_dir"

#
# Only run if we haven't succesfully found Qt4 already
#
if test "x\$g4_qt_is_configured" = "x" || test "x\$g4_is_qt4" = "xno" ; then
    #
    # Flag specifying if we've configured Qt o.k.
    #
    g4_qt_is_configured="yes" # Optimism

    # Flag to be set if any part of configuration fails
    g4_havegoodqt="yes" # Optimism

    # Qt4 flag
    g4_is_qt4="no"

    # Variables to be set
    g4_qt_include_dir=''
    g4_qt_lib_dir=''
    g4_qt_moc=''

    g4_qt_version=''
    g4_qt_cxxflags=''
    g4_qt_gl_cxxflags=''
    g4_qt_libs=''
    g4_qt_gl_libs=''

    #
    # User may supply a value for 'QTDIR' and in that case we ASSUME a
    # Trolltech style installation or a Mac Framework. The latter has a
    # higher priority in the list of search paths because otherwise we may
    # miss the presence of a Framework (see Bug #1095)
    #
    if test "x\$with_qt_dir" != "x" ; then
        g4_qt_dir="\$with_qt_dir"
        g4_qt_possible_qt_include_dirs="\$with_qt_dir/QtCore.framework/Headers
                                        \$with_qt_dir/lib*/QtCore.framework/Headers
                                        \$with_qt_dir/include/QtCore
                                        \$with_qt_dir/include/Qt 
                                        \`ls -dr \$with_qt_dir/include/qt*/QtCore 2>/dev/null\` 
                                        \`ls -dr \$with_qt_dir/include/qt*/Qt 2>/dev/null\` 
                                        \`ls -dr \$with_qt_dir/include/qt* 2>/dev/null\` 
                                        \$with_qt_dir/include"

        # Check for qglobal.h
        g4_qglobal_loc=\`./loc qglobal.h no \$g4_qt_possible_qt_include_dirs\`

        if test "x\$g4_qglobal_loc" = "xno" ; then
            g4_havegoodqt=no
            g4_qt_include_dir=no
        fi
        echo "checking for qglobal.h... \$g4_qglobal_loc"

        if test "x\$g4_qglobal_loc" != "xno" ; then
            g4_qt_include_dir="\`dirname \$g4_qglobal_loc\`"
        fi

    else
        # We use standard search paths, again preferencing Frameworks so that
        # these are not missed
        qt_direct_test_header="qglobal.h"

        g4_qt_include_path_list="
            \`ls -dr /Library/Frameworks/QtCore.framework/Headers 2>/dev/null\` 
            \`ls -dr /System/Library/Frameworks/QtCore.framework/Headers 2>/dev/null\`
            \`ls -dr /usr/local/Qt*/QtCore.framework/Headers 2>/dev/null\`
            \`ls -dr /usr/local/Qt*/lib*/QtCore.framework/Headers 2>/dev/null\`
            \`ls -dr /usr/local/lib*/Qt*/QtCore.framework/Headers 2>/dev/null\`
            \`ls -dr /opt/local/Qt*/QtCore.framework/Headers 2>/dev/null\`
            \`ls -dr /opt/local/Qt*/lib*/QtCore.framework/Headers 2>/dev/null\`
            \`ls -dr /opt/local/lib/Qt*/QtCore.framework/Headers 2>/dev/null\`
            \`ls -dr /opt/local/lib*/QtCore.framework/Headers 2>/dev/null\`
            \`ls -dr /opt/Qt*/QtCore.framework/Headers 2>/dev/null\`
            \`ls -dr /opt/Qt*/lib*/QtCore.framework/Headers 2>/dev/null\`
            \`ls -dr /usr/lib/QtCore.framework/Headers 2>/dev/null\`
            \`ls -dr /usr/lib/Qt*/QtCore.framework/Headers 2>/dev/null\`
            /usr/include/QtCore
            \`ls -dr /usr/include/qt*/QtCore 2>/dev/null\`
	        \`ls -dr /usr/local/include/QtCore 2>/dev/null\`
            \`ls -dr /usr/local/include/qt*/QtCore 2>/dev/null\`
	        \`ls -dr /usr/local/qt*/include/QtCore 2>/dev/null\` 
            \`ls -dr /opt/qt*/include/QtCore 2>/dev/null\` 
            \`ls -dr /usr/qt*/include/QtCore 2>/dev/null\`
            \`ls -dr /usr/qt/*/include/QtCore 2>/dev/null\` 
            \`ls -dr /usr/include/qt/*/QtCore 2>/dev/null\`
            \`ls -dr /sw/include/QtCore 2>/dev/null\`
            \`ls -dr /sw/qt*/include/QtCore 2>/dev/null\`
            \`ls -dr /sw/qt/*/include/QtCore 2>/dev/null\`
            /usr/include
            \`ls -dr /usr/include/qt* 2>/dev/null\`
            \`ls -dr /usr/local/include 2>/dev/null\`
	        \`ls -dr /usr/local/include/qt* 2>/dev/null\`
            \`ls -dr /usr/local/qt*/include 2>/dev/null\`
            \`ls -dr /opt/qt*/include 2>/dev/null\` 
            \`ls -dr /usr/qt*/include 2>/dev/null\`
            \`ls -dr /usr/qt/*/include 2>/dev/null\` 
            \`ls -dr /usr/include/qt/* 2>/dev/null\`
            \`ls -dr /sw/include 2>/dev/null\`
            \`ls -dr /sw/qt*/include 2>/dev/null\`
            \`ls -dr /sw/qt/*/include 2>/dev/null\`
            /usr/include/Qt
            \`ls -dr /usr/include/qt*/Qt 2>/dev/null\`
            \`ls -dr /usr/local/include/Qt 2>/dev/null\`
            \`ls -dr /usr/local/include/qt*/Qt 2>/dev/null\`
            \`ls -dr /opt/qt*/include/Qt 2>/dev/null\` 
            \`ls -dr /usr/qt*/include/Qt 2>/dev/null\`
            \`ls -dr /usr/qt/*/include/Qt 2>/dev/null\` 
            \`ls -dr /usr/include/qt/*/Qt 2>/dev/null\`
            \`ls -dr /sw/include/Qt 2>/dev/null\`
            \`ls -dr /sw/qt*/include/Qt 2>/dev/null\`
            \`ls -dr /sw/qt/*/include/Qt 2>/dev/null\`
        "

        # Find ALL installed versions of qglobal.h
        for g4_qt_dir in \$g4_qt_include_path_list ; do
            if test -r "\$g4_qt_dir/\$qt_direct_test_header" ; then
                g4_qt_found_dirs="\$g4_qt_found_dirs \$g4_qt_dir"
            fi
        done

        # Which one relates to the newest Qt?
        g4_qt_prev_ver=0
        for g4_qt_dir in \$g4_qt_found_dirs ; do
            g4_qt_this_ver=\`grep -w '#define QT_VERSION' \$g4_qt_dir/\$qt_direct_test_header | sed s/'#define QT_VERSION'//\`

            if expr \$g4_qt_this_ver '>' \$g4_qt_prev_ver > /dev/null ; then
                g4_qt_include_dir=\$g4_qt_dir
                g4_qt_prev_ver=\$g4_qt_this_ver
            fi
        done

        if test "x\$g4_qt_include_dir" = "x" ; then
            g4_qt_include_dir=no
            g4_havegoodqt=no
            echo "checking for qglobal.h... no"
        else
            echo "checking for qglobal.h... \$g4_qt_include_dir/qglobal.h"
        fi
    fi # END TEST with_qt_dir is set

    #
    # Result of above tests should have given us g4_qt_include_dir
    # We can now use this to check other things, taking care to deal with the
    # correct paths...
    #

    # Immediate and obvious Darwin check...
    if test "x\`basename \$g4_qt_include_dir\`" = "xHeaders" ; then
        #check for moc - we have a framework so we first need to check for
        #a bin directory below g4_qt_include_dir. Depending on how the
        #Framework was installed, this may be below the level that
        #QtCore.framework is at.

        # Find base framework directory
        g4_qt_fmwk_base_dir=\`dirname \$g4_qt_include_dir\`
        g4_qt_fmwk_base_dir=\`dirname \$g4_qt_fmwk_base_dir\`

        if test "x\`basename \$g4_qt_fmwk_base_dir\`" = "xlib" ; then
            #This is probably an independent install
            echo "checking Mac Framework location... trolltech/custom"
            g4_qt_dir=\`dirname \$g4_qt_fmwk_base_dir\`

            #Check for moc
            if test -x "\$g4_qt_dir/bin/moc" ; then
                g4_qt_moc="\$g4_qt_dir/bin/moc"
                echo "checking for moc... \$g4_qt_moc"

                g4_qt_version="4"
                g4_qt_cxxflags="-I\$g4_qt_dir/lib/QtCore.framework/Headers -I\$g4_qt_dir/lib/QtGui.framework/Headers"
                g4_qt_gl_cxxflags="-I\$g4_qt_dir/lib/QtOpenGl.framework/Headers"
                g4_qt_libs="-F\$g4_qt_dir/lib -framework QtCore -framework QtGui"
                g4_qt_gl_libs="-framework QtOpenGL"
            else
                echo "checking for moc... no"
                g4_havegoodqt=no
            fi
        elif test "x\`basename \$g4_qt_fmwk_base_dir\`" = "xFrameworks" ; then
            #This looks like a system install
            echo "Checking Mac Framework location... Frameworks"
            if test -x "/usr/bin/moc" ; then
                g4_qt_moc="/usr/bin/moc"
                echo "checking for moc... \$g4_qt_moc"

                g4_qt_dir=\$g4_qt_fmwk_base_dir

 	            g4_qt_version="4"
                g4_qt_cxxflags="-I\$g4_qt_dir/QtCore.framework/Headers -I\$g4_qt_dir/QtGui.framework/Headers"
                g4_qt_gl_cxxflags="-I\$g4_qt_dir/QtOpenGl.framework/Headers"
                g4_qt_libs="-F\$g4_qt_dir -framework QtCore -framework QtGui"
                g4_qt_gl_libs="-framework QtOpenGL"
            else
                echo "checking for moc... no"
                g4_havegoodqt=no
            fi
        fi
    elif test "x\$g4_qt_include_dir" != "x" ; then
        # Probably have Unix-style installation, in which case estimated
        # 'QTDIR' equivalent is $with_qt_dir if supplied, or directory
        # one level below the 'include' directory in \$g4_qt_include_dir
        if test "x\$with_qt_dir" = "x" ; then
            # We need to strip g4_qt_include_dir, if it was found
            g4_qt_dir=\$g4_qt_include_dir

            # Only do this IF there's an 'include' in the path name!
            if test "x\`echo \$g4_qt_dir | grep include\`" != "x" ; then
                while test "x\`basename \$g4_qt_dir\`" != "xinclude" ;
                do
                    g4_qt_dir=\`dirname \$g4_qt_dir\`
                done
            fi

            #Now should be one level above equivalent QTDIR
            g4_qt_dir=\`dirname \$g4_qt_dir\`
        fi

        # At this point, we need get Qt version of detected qglobal.h because
        # Qt3/4 libraries MAY be installed alongside each other...
        qt_direct_test_header=qglobal.h
        g4_qt_major_ver=\`grep QT_VERSION_STR \$g4_qt_include_dir/\$qt_direct_test_header 2>/dev/null | sed 's/.* \"\([0-9]\)\..*\"/\1/'\`

        #
        # We might have an odd install where our found qglobal.h #includes
        # the real qglobal...
        #
        if test "x\$g4_qt_major_ver" = "x" ; then
            # check for a #include of qglobal...
            possible_actual_qglobal=\`grep '#include.*qglobal' \$g4_qt_include_dir/\$qt_direct_test_header 2>/dev/null\`

            if test "x\$possible_actual_qglobal" != "x" ; then
                #We did get something, and it's likely the include
                #will give us a relative path (but an ASSUMPTION at present)
                relative_path_to_qglobal=\`grep '#include.*qglobal' \$g4_qt_include_dir/\$qt_direct_test_header 2>/dev/null | sed 's/.*\"\(.*\)\"/\1/'\`

                if test -r \$g4_qt_include_dir/\$relative_path_to_qglobal ; then
                    g4_qt_major_ver=\`grep QT_VERSION_STR \$g4_qt_include_dir/\$relative_path_to_qglobal 2>/dev/null | sed 's/.* \"\([0-9]\)\..*\"/\1/'\`
                else
                    g4_qt_major_ver=no
                    g4_havegoodqt=no
                fi
            else
                g4_qt_major_ver=no
                g4_havegoodqt=no
            fi
        fi #END TEST odd qglobal includes qglobal behaviour
            
        if test "x\$g4_qt_major_ver" = "x4" ; then
            g4_is_qt4=yes
        else
            g4_is_qt4=no
        fi
        echo "checking Qt major version... \$g4_qt_major_ver"

        #
        # We also need to check for Qt4 installations with QtCore type
        # directory structures. That being the case, make sure we have
        # the extra headers..
        #
        if test "x\`basename \$g4_qt_include_dir\`" = "xQtCore" ; then
            g4_qt_extra_headers=""
            g4_qt_gl_headers=""
            g4_qt_extra_packages="QtGui"
            g4_qt_gl_packages="QtOpenGL"

            for i in \$g4_qt_extra_packages ; do
                if test -d "\`dirname \$g4_qt_include_dir\`/\$i" ; then
                    echo "checking for \$i headers... yes"
                    g4_qt_extra_headers="\$g4_qt_extra_headers \`dirname \$g4_qt_include_dir\`/\$i"
                else
                    echo "checking for \$i headers... no"
                    g4_havegoodqt=no
                fi
            done

            for i in \$g4_qt_gl_packages ; do
                if test -d "\`dirname \$g4_qt_include_dir\`/\$i" ; then
                    echo "checking for \$i headers... yes"
                    g4_qt_gl_headers="\$g4_qt_gl_headers \`dirname \$g4_qt_include_dir\`/\$i"
                else
                    echo "checking for \$i headers... no"
                    g4_havegoodqt=no
                fi
            done

        fi #END TEST QtCore style install


        #
        # Now check for appropriate library...
        #
        if test -d "\$g4_qt_dir/lib64" ; then
	    # Damn, this doesn't guarantee we're on a 64bit system, some distros/packages
	    # will have a lib64 dir even on an i*86 machine...
	    # We don't ever cross-compile Geant4, so must have the native libraries.
	    # Double check for this craziness...
            case "`uname -m`" in
		i*86)
		    g4_qt_lib_dir=\$g4_qt_dir/lib
		    ;;
		*)
		    g4_qt_lib_dir=\$g4_qt_dir/lib64
		    ;;
	    esac
        else
            g4_qt_lib_dir=\$g4_qt_dir/lib
        fi

        if test "x\$g4_is_qt4" = "xyes" ; then
            g4_qt_lib="\`ls \$g4_qt_lib_dir/libQtCore* 2> /dev/null | sed -n 1p |
                    sed s@\$g4_qt_lib_dir/lib@@ | sed s@[.].*@@\`"

            if test "x\$g4_qt_lib" = "x" ; then
                # We might be on Windows...
                g4_qt_lib="\`ls \$g4_qt_lib_dir/QtCore4.lib 2> /dev/null | sed -n 1p | sed s@\$g4_qt_lib_dir/@@\`"
            fi

            if test "x\$g4_qt_lib" != "x" ; then
                echo "checking for QtCore library... \$g4_qt_lib"
            else
                echo "checking for QtCore library... no"
                g4_havegoodqt=no
            fi
        else
            g4_qt_lib="\`ls \$g4_qt_lib_dir/libqt-mt.* \$g4_qt_lib_dir/libqt.* 2> /dev/null | sed -n 1p | sed s@\$g4_qt_lib_dir/lib@@ | sed s@[.].*@@\`"

            if test "x\$g4_qt_lib" != "x" ; then
                echo "checking for qt-mt or qt library... \$g4_qt_lib"

                # On Darwin we also need libqui for Qt3
                if test "x\$osname" = "xdarwin" ; then
                    g4_qt_lib_qui="\`ls \$g4_qt_lib_dir/libqui.* 2> /dev/null | 
                                    sed -n 1p | sed s@\$g4_qt_lib_dir/lib@@ | 
                                    sed s@[.].*@@\`"
                    if test "x\$g4_qt_lib_qui" != "x" ; then
                        echo "checking for qui library... yes"
                    else
                        echo "checking for qui library... no"
                        g4_havegoodqt=no
                    fi
                fi
            else
                echo "checking for qt-mt or qt library... no"
                g4_havegoodqt=no
            fi
        fi #END TEST for Qt4/3 libraries

        #
        # Finally, we need to search for moc
	# We use prior knowledge of the detected Qt version to
	# try and grab the correct moc straight off.
        #
        g4_qt_bin_dir=\$g4_qt_dir/bin
        g4_qtmoc=no
	g4_qt_cross_check_moc=no

	if test "x\$g4_is_qt4" = "xyes" ; then
	    # Try the qt4 variants first...
	    if test -x "\$g4_qt_bin_dir/moc-qt4" ; then
		g4_qtmoc="\$g4_qt_bin_dir/moc-qt4"
	    elif test -x "\$g4_qt_bin_dir/qt4-moc" ; then
		g4_qtmoc="\$g4_qt_bin_dir/qt4-moc"
	    elif test -x "\$g4_qt_bin_dir/moc" ; then
		g4_qtmoc="\$g4_qt_bin_dir/moc"
		g4_qt_cross_check_moc=yes
	    else
		g4_havegoodqt=no
	    fi
	else
	    # We've probably got Qt3, so check for
	    # the qt3 variants first
	    if test -x "\$g4_qt_bin_dir/moc-qt3" ; then
		g4_qtmoc="\$g4_qt_bin_dir/moc-qt3"
	    elif test -x "\$g4_qt_bin_dir/qt3-moc" ; then
		g4_qtmoc="\$g4_qt_bin_dir/qt3-moc"
	    elif test -x "\$g4_qt_bin_dir/moc" ; then
		g4_qtmoc="\$g4_qt_bin_dir/moc"
		g4_qt_cross_check_moc=yes
	    else
		g4_havegoodqt=no
	    fi
        fi
        echo "checking for moc... \$g4_qtmoc"

	#
	# If pure 'moc' was found, cross check its version
	# against previously detected Qt major version
	#
	if test "x\$g4_qt_cross_check_moc" = "xyes" ; then
	    $echo $n "Checking \$g4_qtmoc major version is \$g4_qt_major_ver... $c"
	    # Grab version of found moc
	    g4_qt_found_moc_major_version=\`\$g4_qtmoc -v 2>&1 | sed 's/^.*(Qt \([0-9]\)\..*/\1/'\`
	    if test "x\$g4_qt_found_moc_major_version" != "x\$g4_qt_major_ver" ; then
		# We need to ask the user where correct moc is
		$echo "no"
		promptend="no"
		user_moc="\$g4_qtmoc"

		while test "x\$promptend" = "xno" ; do
		    echo " "
		    g4message=\`cat << EOM
Qt moc was found as \$user_moc and has major version \$g4_qt_found_moc_major_version. 
This does not match the version of the detected Qt install 
which is \$g4_qt_major_ver.
Please enter the full path to the moc program which matches this Qt
version, or type '-' to CANCEL the Qt checks.
EOM\`
		    dflt="\$user_moc"
		    rp=\$g4message
                    . ./myread

		    # Check for user cancellation
                    if test "x\$ans" = "x-" ; then
			g4_havegoodqt="no"
			g4_qtmoc=""
			promptend="yes"
                    else
                        user_moc="\$ans"
			if test -x "\$user_moc" ; then
			    g4_qt_found_moc_major_version=\`\$user_moc -v 2>&1 | sed 's/^.*(Qt \([0-9]\)\..*/\1/'\`
			    if test "x\$g4_qt_found_moc_major_version" != "x\$g4_qt_major_ver" ; then
			        echo "Checking if \$user_moc version is \$g4_qt_major_ver... no"
			    else
			        echo "Checking if \$user_moc version is \$g4_qt_major_ver... yes"
				g4_qtmoc=\$user_moc
				promptend=yes
                            fi
			else
			    echo "warning: \$user_moc is not executable."
			    user_moc="<null>"
                            g4_qt_found_moc_major_version="<null>"
			fi
                    fi
		# We need to ask the user where correct moc is
		done
            else
                $echo "yes"
            fi
	fi

        ## THIS IS POINT AT WHICH TO DO FALLBACK TESTS I.E DOES
        ## COMPILATION OF SMALL TEST PROGRAM WORK - THEN HEADERS AND
        ## LIBS ARE AUTOMATICALLY FOUND BY LINKER

        #
        ## Finally, set output variables, raw for now
        #
        if test "x\$g4_havegoodqt" = "xyes" ; then
	    g4_qt_version=\$g4_qt_major_ver
            
            # Take care of Qt4 style header structure...
            if test "x\`basename \$g4_qt_include_dir\`" = "xQtCore"; then
		g4_qt_cxxflags="-I\`dirname \$g4_qt_include_dir\` -I\$g4_qt_include_dir"
	    else
	    	g4_qt_cxxflags="-I\$g4_qt_include_dir"
	    fi
            if test "x\$g4_is_qt4" = "xyes" ; then
                for i in \$g4_qt_extra_headers ; do
                    g4_qt_cxxflags="\$g4_qt_cxxflags -I\$i"
                done
                for i in \$g4_qt_gl_headers ; do
                    g4_qt_gl_cxxflags="\$g4_qt_gl_cxxflags -I\$i"
                done
            fi

            g4_qt_libs="-L\$g4_qt_lib_dir"
            if test "x\$g4_qt_lib" = "xQtCore4.lib" ; then
                #We have Windows...
                g4_qt_libs="\$g4_qt_libs QtCore4.lib QtGui4.lib"
                g4_qt_gl_libs="QtOpenGL4.lib"
            else
                g4_qt_libs="\$g4_qt_libs -l\$g4_qt_lib"
                if test "x\$g4_is_qt4" = "xyes" ; then
                    g4_qt_libs="\$g4_qt_libs -lQtGui"
                    g4_qt_gl_libs="-lQtOpenGL"
                fi
            fi
            if test "x\$g4_qt_lib_qui" != "x" ; then
                g4_qt_libs="\$g4_qt_libs -lqui"
            fi


            g4_qt_moc=\$g4_qtmoc

            g4_qt_is_configured=yes
        else
            g4_qt_is_configured=''
        fi
    else
        #We couldn't find qglobal...
	    g4_havegoodqt="no"
    fi #END TEST for Darwin Framework

    # Hack in a final, well, hack to flag qt4
    if test "x\$g4_qt_version" = "x4" || "x\$g4_qt_major_version" = "x4" ; then
        g4_is_qt4="yes"
    fi
else
    #Probably also want flags here to reset variables if requested
    echo "configure: Qt already configured, no recheck neccessary"
fi #END TEST "x\$g4_qt_is_configured" = "x" 

EOSC
