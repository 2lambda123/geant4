?RCS:
?MAKE:g4vis_build_dawn_driver g4vis_use_dawn g4vis_build_dawnfile_driver g4vis_use_dawnfile g4vis_build_opacs_driver g4vis_use_opacs g4vis_build_openglx_driver g4vis_use_openglx g4vis_build_openglxm_driver g4vis_use_openglxm g4vis_build_oix_driver g4vis_use_oix g4vis_build_raytracer_driver g4vis_use_raytracer g4vis_build_vrml_driver g4vis_use_vrml g4vis_build_vrmlfile_driver g4vis_use_vrmlfile g4vis_build_asciitree_driver g4vis_use_asciitree:\
	Myread Getfile cat rm test
?MAKE:	-pick add $@ %<
?S:g4osname:
?S:	This variable contains the value of the 'g4osname' symbol, which
?S:	used for building G4SYSTEM.
?S:.

echo " "
case "$g4vis_none" in
'')
	g4vis_none=n
	;;
esac

case "$g4vis_build_heprep_driver" in
'')
	g4vis_build_heprep_driver=n
	;;
esac

case "$g4vis_use_heprep" in
'')
	g4vis_use_heprep=n
	;;
esac

case "$g4vis_build_openglwin32_driver" in
'')
	g4vis_build_openglwin32_driver=n
	;;
esac

case "$g4vis_use_openglwin32" in
'')
	g4vis_use_openglwin32=n
	;;
esac

case "$g4vis_build_oiwin32_driver" in
'')
	g4vis_build_oiwin32_driver=n
	;;
esac

case "$g4vis_use_oiwin32" in
'')
	g4vis_use_oiwin32=n
	;;
esac

case "$g4vis_build_dawn_driver" in
'')
	g4vis_build_dawn_driver=n
	;;
esac

case "$g4vis_use_dawn" in
'')
	g4vis_use_dawn=n
	;;
esac

# Set by default!
case "$g4vis_build_dawnfile_driver" in
'')
	g4vis_build_dawnfile_driver=y
	;;
esac

# Set by default!
case "$g4vis_use_dawnfile" in
'')
	g4vis_use_dawnfile=y
	;;
esac

case "$g4vis_build_opacs_driver" in
'')
	g4vis_build_opacs_driver=n
	;;
esac

case "$g4vis_use_opacs" in
'')
	g4vis_use_opacs=n
	;;
esac

case "$g4vis_build_openglx_driver" in
'')
	g4vis_build_openglx_driver=n
	;;
esac

case "$g4vis_use_openglx" in
'')
	g4vis_use_openglx=n
	;;
esac

case "$g4vis_build_openglxm_driver" in
'')
	g4vis_build_openglxm_driver=n
	;;
esac

case "$g4vis_use_openglxm" in
'')
	g4vis_use_openglxm=n
	;;
esac

case "$g4vis_build_oix_driver" in
'')
	g4vis_build_oix_driver=n
	;;
esac

case "$g4vis_use_oix" in
'')
	g4vis_use_oix=n
	;;
esac

# Set by default!
case "$g4vis_build_raytracer_driver" in
'')
	g4vis_build_raytracer_driver=y
	;;
esac

# Set by default!
case "$g4vis_use_raytracer" in
'')
	g4vis_use_raytracer=y
	;;
esac

case "$g4vis_build_vrml_driver" in
'')
	g4vis_build_vrml_driver=n
	;;
esac

case "$g4vis_use_vrml" in
'')
	g4vis_use_vrml=n
	;;
esac

# Set by default!
case "$g4vis_build_vrmlfile_driver" in
'')
	g4vis_build_vrmlfile_driver=y
	;;
esac

# Set by default!
case "$g4vis_use_vrmlfile" in
'')
	g4vis_use_vrmlfile=y
	;;
esac

# Set by default!
case "$g4vis_build_asciitree_driver" in
'')
	g4vis_build_asciitree_driver=y
	;;
esac

# Set by default!
case "$g4vis_use_asciitree" in
'')
	g4vis_use_asciitree=y
	;;
esac

# Set by default!
case "$g4vis_build_gagtree_driver" in
'')
	g4vis_build_gagtree_driver=y
	;;
esac

# Set by default!
case "$g4vis_use_gagtree" in
'')
	g4vis_use_gagtree=y
	;;
esac

echo ""

g4message=`cat << EOM

  G4VIS_NONE

DESCRIPTION

EOM`

dflt=$g4vis_none
rp=$g4message
. ./myread
gans=$ans

	case $gans in
	
	n*|N*) 
		g4vis_none=n
		;;
	y*|Y*) 
		g4vis_none=y
		;;
	esac

g4message=`cat << EOM

  G4VIS_BUILD_HEPREP_DRIVER
  G4VIS_USE_HEPREP

DESCRIPTION

EOM`

dflt=$g4vis_use_heprep
rp=$g4message
. ./myread
gans=$ans

	case $gans in
	
	n*|N*) 
		g4vis_build_heprep_driver=n
		g4vis_use_heprep=n
		;;
	y*|Y*) 
		g4vis_build_heprep_driver=y
		g4vis_use_heprep=y
		;;
	esac

g4message=`cat << EOM

  G4VIS_BUILD_OPENGLWIN32_DRIVER
  G4VIS_USE_OPENGLWIN32

DESCRIPTION

EOM`

dflt=$g4vis_use_openglwin32
rp=$g4message
. ./myread
gans=$ans

	case $gans in
	
	n*|N*) 
		g4vis_build_openglwin32_driver=n
		g4vis_use_openglwin32=n
		;;
	y*|Y*) 
		g4vis_build_openglwin32_driver=y
		g4vis_use_openglwin32=y
		;;
	esac

g4message=`cat << EOM

  G4VIS_BUILD_OIWIN32_DRIVER
  G4VIS_USE_OIWIN32

DESCRIPTION

EOM`

dflt=$g4vis_use_oiwin32
rp=$g4message
. ./myread
gans=$ans

	case $gans in
	
	n*|N*) 
		g4vis_build_oiwin32_driver=n
		g4vis_use_oiwin32=n
		;;
	y*|Y*) 
		g4vis_build_oiwin32_driver=y
		g4vis_use_oiwin32=y
		;;
	esac

g4message=`cat << EOM

  G4VIS_BUILD_DAWN_DRIVER
  G4VIS_USE_DAWN

DAWN drivers are interfaces to the Fukui Renderer DAWN. DAWN is
a vectorized 3D PostScript processor suited to prepare technical
high quality outputs for presentation and/or documentation.

The DAWNFILE driver sends 3D data to DAWN via an intermediate file, 
named g4.prim in the current directory. The file g4.prim is able to 
be re-visualized later without the help of Geant4. 
EOM`

dflt=$g4vis_use_dawn
rp=$g4message
. ./myread
gans=$ans

	case $gans in
	
	n*|N*) 
		g4vis_build_dawn_driver=n
		g4vis_use_dawn=n
		;;
	y*|Y*) 
		g4vis_build_dawn_driver=y
		g4vis_use_dawn=y
		;;
	esac

g4message=`cat << EOM

  G4VIS_BUILD_DAWNFILE_DRIVER
  G4VIS_USE_DAWNFILE

DAWN drivers are interfaces to Fukui Renderer DAWN. It is a vectorized 3D 
PostScript processor, and so well suited to prepare technical high
quality outputs for presentation and/or documentation. 
The DAWNFILE driver sends 3D data to DAWN via an intermediate file, 
named g4.prim in the current directory. The file g4.prim is able to 
be re-visualized later without the help of Geant4. 
EOM`

dflt=$g4vis_use_dawnfile
rp=$g4message
#. ./myread
#gans=$ans
gans=y

	case $gans in
	
	n*|N*) 
		g4vis_build_dawnfile_driver=n
		g4vis_use_dawnfile=n
		;;
	y*|Y*) 
		g4vis_build_dawnfile_driver=y
		g4vis_use_dawnfile=y
		;;
	esac

g4message=`cat << EOM

  G4VIS_BUILD_OPACS_DRIVER
  G4VIS_USE_OPACS

OPACS is a visualization environment based on X windows and OpenGL. 
It is written in ANSI C and is highly portable (UNIX, NT/X11, VMS). 
EOM`

dflt=$g4vis_use_opacs
rp=$g4message
. ./myread
gans=$ans

	case $gans in
	
	n*|N*) 
		g4vis_build_opacs_driver=n
		g4vis_use_opacs=n
		;;
	y*|Y*) 
		g4vis_build_opacs_driver=y
		g4vis_use_opacs=y
		;;
	esac

g4message=`cat << EOM

  G4VIS_BUILD_OPENGLX_DRIVER
  G4VIS_USE_OPENGLX

It is an interface to the de facto standard 3D graphics library,
OpenGL. It is well suited for real-time fast visualization
and prototyping. The X11 version of the OpenGL libraries is
required.
EOM`

dflt=$g4vis_use_openglx
rp=$g4message
. ./myread
gans=$ans

	case $gans in
	
	n*|N*) 
		g4vis_build_openglx_driver=n
		g4vis_use_openglx=n
		;;
	y*|Y*) 
		g4vis_build_openglx_driver=y
		g4vis_use_openglx=y
		;;
	esac

g4message=`cat << EOM

  G4VIS_BUILD_OPENGLXM_DRIVER
  G4VIS_USE_OPENGLXM

It is an interface to the de facto standard 3D graphics library,
OpenGL. It is well suited for real-time fast visualization
and prototyping. The X11 version of the OpenGL libraries is
required.
EOM`

dflt=$g4vis_use_openglxm
rp=$g4message
. ./myread
gans=$ans

	case $gans in
	
	n*|N*) 
		g4vis_build_openglxm_driver=n
		g4vis_use_openglxm=n
		;;
	y*|Y*) 
		g4vis_build_openglxm_driver=y
		g4vis_use_openglxm=y
		;;
	esac

g4message=`cat << EOM

  G4VIS_BUILD_OIX_DRIVER
  G4VIS_USE_OIX

This driver is based on the "Hepvis" class library.
The OpenInventor driver and the Hepvis class library are based
on OpenInventor technology for scientific visualization.
EOM`

dflt=$g4vis_use_oix
rp=$g4message
. ./myread
gans=$ans

	case $gans in
	
	n*|N*) 
		g4vis_build_oix_driver=n
		g4vis_use_oix=n
		;;
	y*|Y*) 
		g4vis_build_oix_driver=y
		g4vis_use_oix=y
		;;
	esac

g4message=`cat << EOM

  G4VIS_BUILD_RAYTRACER_DRIVER
  G4VIS_USE_RAYTRACER

It performs ray-tracing visualization using the tracking routines of Geant4. 
It is, therefore, available for debugging tracking routines. 
It is well suited for photo-realistic high quality output for 
presentation, and for intuitive debugging of detector geometry. 
EOM`

dflt=$g4vis_use_raytracer
rp=$g4message
#. ./myread
#gans=$ans
gans=y

	case $gans in
	
	n*|N*) 
		g4vis_build_raytracer_driver=n
		g4vis_use_raytracer=n
		;;
	y*|Y*) 
		g4vis_build_raytracer_driver=y
		g4vis_use_raytracer=y
		;;
	esac

g4message=`cat << EOM

  G4VIS_BUILD_VRML_DRIVER
  G4VIS_USE_VRML

This driver generates VRML files, which describe 3D scenes to be 
visualized with a proper VRML viewer, at either a local or a remote host. 
EOM`

dflt=$g4vis_use_vrml
rp=$g4message
. ./myread
gans=$ans

	case $gans in
	
	n*|N*) 
		g4vis_build_vrml_driver=n
		g4vis_use_vrml=n
		;;
	y*|Y*) 
		g4vis_build_vrml_driver=y
		g4vis_use_vrml=y
		;;
	esac

g4message=`cat << EOM

  G4VIS_BUILD_VRMLFILE_DRIVER
  G4VIS_USE_VRMLFILE

This driver generates VRML files, which describe 3D scenes to be 
visualized with a proper VRML viewer, at either a local or a remote host. 
The VRMLFILE driver sends 3D data to your VRML viewer, which is running 
in the same host machine as Geant4, via an intermediate file named 
g4.wrl created in the current directory. This file is available for 
re-visualization afterwards. In visualization, you should specify a 
name of the VRML viewer by setting the environment variable G4VRML_VIEWER 
beforehand.
EOM`

dflt=$g4vis_use_vrmlfile
rp=$g4message
#. ./myread
#gans=$ans
gans=y

	case $gans in
	
	n*|N*) 
		g4vis_build_vrmlfile_driver=n
		g4vis_use_vrmlfile=n
		;;
	y*|Y*) 
		g4vis_build_vrmlfile_driver=y
		g4vis_use_vrmlfile=y
		;;
	esac


g4message=`cat << EOM

  G4VIS_BUILD_ASCIITREE_DRIVER
  G4VIS_USE_ASCIITREE

Description????????????????????????
EOM`

dflt=$g4vis_use_asciitree
rp=$g4message
# Don't ask by default and set to 'y'!
#. ./myread
#gans=$ans
gans=y

	case $gans in
	
	n*|N*) 
		g4vis_build_asciitree_driver=n
		g4vis_use_asciitree=n
		;;
	y*|Y*) 
		g4vis_build_asciitree_driver=y
		g4vis_use_asciitree=y
		;;
	esac


g4message=`cat << EOM

  G4VIS_BUILD_GAGTREE_DRIVER
  G4VIS_USE_GAGTREE

Description????????????????????????
EOM`

dflt=$g4vis_use_gagtree
rp=$g4message
# Don't ask by default and set to 'y'!
#. ./myread
#gans=$ans
gans=y

	case $gans in
	
	n*|N*) 
		g4vis_build_gagtree_driver=n
		g4vis_use_gagtree=n
		;;
	y*|Y*) 
		g4vis_build_gagtree_driver=y
		g4vis_use_gagtree=y
		;;
	esac
